# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6365, generator: {generator})
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Generic, Optional, TypeVar, Union
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest

from ... import models as _models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class LineageRESTOperations:
    """LineageRESTOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~PurviewCatalog.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    async def get_lineage_graph(
        self,
        guid: str,
        direction: Union[str, "_models.Enum7"],
        depth: Optional[int] = 3,
        width: Optional[int] = 10,
        include_parent: Optional[bool] = None,
        get_derived_lineage: Optional[bool] = None,
        **kwargs
    ) -> Optional["_models.JsonAtlasLineageInfo"]:
        """Gets lineage info about the specified entity by GUID.

        :param guid: The globally unique identifier of the entity.
        :type guid: str
        :param direction: The direction of the lineage, which could be INPUT, OUTPUT or BOTH.
        :type direction: str or ~PurviewCatalog.models.Enum7
        :param depth: The number of hops for lineage.
        :type depth: int
        :param width: The number of max expanding width in lineage.
        :type width: int
        :param include_parent: True to include the parent chain in the response.
        :type include_parent: bool
        :param get_derived_lineage: True to include derived lineage in the response.
        :type get_derived_lineage: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: JsonAtlasLineageInfo, or the result of cls(response)
        :rtype: ~PurviewCatalog.models.JsonAtlasLineageInfo or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["_models.JsonAtlasLineageInfo"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_lineage_graph.metadata['url']  # type: ignore
        path_format_arguments = {
            'guid': self._serialize.url("guid", guid, 'str', max_length=4096, min_length=1),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if depth is not None:
            query_parameters['depth'] = self._serialize.query("depth", depth, 'int')
        if width is not None:
            query_parameters['width'] = self._serialize.query("width", width, 'int')
        query_parameters['direction'] = self._serialize.query("direction", direction, 'str')
        if include_parent is not None:
            query_parameters['includeParent'] = self._serialize.query("include_parent", include_parent, 'bool')
        if get_derived_lineage is not None:
            query_parameters['getDerivedLineage'] = self._serialize.query("get_derived_lineage", get_derived_lineage, 'bool')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('JsonAtlasLineageInfo', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_lineage_graph.metadata = {'url': '/atlas/v2/lineage/{guid}'}  # type: ignore

    async def next_level_lineage(
        self,
        guid: str,
        direction: Union[str, "_models.Enum7"],
        get_derived_lineage: Optional[bool] = None,
        offset: Optional[int] = None,
        limit: Optional[int] = None,
        **kwargs
    ) -> Optional["_models.JsonAtlasLineageInfo"]:
        """Returns immediate next level lineage info about entity with pagination.

        :param guid: The globally unique identifier of the entity.
        :type guid: str
        :param direction: The direction of the lineage, which could be INPUT, OUTPUT or BOTH.
        :type direction: str or ~PurviewCatalog.models.Enum7
        :param get_derived_lineage: True to include derived lineage in the response.
        :type get_derived_lineage: bool
        :param offset: The offset for pagination purpose.
        :type offset: int
        :param limit: The page size - by default there is no paging.
        :type limit: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: JsonAtlasLineageInfo, or the result of cls(response)
        :rtype: ~PurviewCatalog.models.JsonAtlasLineageInfo or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["_models.JsonAtlasLineageInfo"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.next_level_lineage.metadata['url']  # type: ignore
        path_format_arguments = {
            'guid': self._serialize.url("guid", guid, 'str', max_length=4096, min_length=1),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['direction'] = self._serialize.query("direction", direction, 'str')
        if get_derived_lineage is not None:
            query_parameters['getDerivedLineage'] = self._serialize.query("get_derived_lineage", get_derived_lineage, 'bool')
        if offset is not None:
            query_parameters['offset'] = self._serialize.query("offset", offset, 'int')
        if limit is not None:
            query_parameters['limit'] = self._serialize.query("limit", limit, 'int')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('JsonAtlasLineageInfo', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    next_level_lineage.metadata = {'url': '/atlas/v2/lineage/{guid}/next/'}  # type: ignore
