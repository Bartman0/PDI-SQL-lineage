# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6365, generator: {generator})
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest

from ... import models as _models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class TypesRESTOperations:
    """TypesRESTOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~PurviewCatalog.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    async def get_classification_def_by_guid(
        self,
        guid: str,
        **kwargs
    ) -> Optional["_models.JsonAtlasClassificationDef"]:
        """Gets the classification definition for the given GUID.

        :param guid: The globally unique identifier of the classification.
        :type guid: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: JsonAtlasClassificationDef, or the result of cls(response)
        :rtype: ~PurviewCatalog.models.JsonAtlasClassificationDef or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["_models.JsonAtlasClassificationDef"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_classification_def_by_guid.metadata['url']  # type: ignore
        path_format_arguments = {
            'guid': self._serialize.url("guid", guid, 'str', max_length=4096, min_length=1),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('JsonAtlasClassificationDef', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_classification_def_by_guid.metadata = {'url': '/atlas/v2/types/classificationdef/guid/{guid}'}  # type: ignore

    async def get_classification_def_by_name(
        self,
        name: str,
        **kwargs
    ) -> Optional["_models.JsonAtlasClassificationDef"]:
        """Gets the classification definition by its name (unique).

        :param name: The name of the classification.
        :type name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: JsonAtlasClassificationDef, or the result of cls(response)
        :rtype: ~PurviewCatalog.models.JsonAtlasClassificationDef or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["_models.JsonAtlasClassificationDef"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_classification_def_by_name.metadata['url']  # type: ignore
        path_format_arguments = {
            'name': self._serialize.url("name", name, 'str', max_length=4096, min_length=1),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('JsonAtlasClassificationDef', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_classification_def_by_name.metadata = {'url': '/atlas/v2/types/classificationdef/name/{name}'}  # type: ignore

    async def get_entity_def_by_guid(
        self,
        guid: str,
        **kwargs
    ) -> Optional["_models.JsonAtlasEntityDef"]:
        """Gets the Entity definition for the given GUID.

        :param guid: The globally unique identifier of the entity.
        :type guid: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: JsonAtlasEntityDef, or the result of cls(response)
        :rtype: ~PurviewCatalog.models.JsonAtlasEntityDef or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["_models.JsonAtlasEntityDef"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_entity_def_by_guid.metadata['url']  # type: ignore
        path_format_arguments = {
            'guid': self._serialize.url("guid", guid, 'str', max_length=4096, min_length=1),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('JsonAtlasEntityDef', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_entity_def_by_guid.metadata = {'url': '/atlas/v2/types/entitydef/guid/{guid}'}  # type: ignore

    async def get_entity_def_by_name(
        self,
        name: str,
        **kwargs
    ) -> Optional["_models.JsonAtlasEntityDef"]:
        """Gets the entity definition by its name (unique).

        :param name: The name of the entity.
        :type name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: JsonAtlasEntityDef, or the result of cls(response)
        :rtype: ~PurviewCatalog.models.JsonAtlasEntityDef or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["_models.JsonAtlasEntityDef"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_entity_def_by_name.metadata['url']  # type: ignore
        path_format_arguments = {
            'name': self._serialize.url("name", name, 'str', max_length=4096, min_length=1),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('JsonAtlasEntityDef', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_entity_def_by_name.metadata = {'url': '/atlas/v2/types/entitydef/name/{name}'}  # type: ignore

    async def get_term_template_def_by_guid(
        self,
        guid: str,
        **kwargs
    ) -> Optional["_models.JsonAtlasStructDef"]:
        """Gets the term template definition for the given GUID.

        :param guid: The globally unique identifier of the term template.
        :type guid: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: JsonAtlasStructDef, or the result of cls(response)
        :rtype: ~PurviewCatalog.models.JsonAtlasStructDef or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["_models.JsonAtlasStructDef"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_term_template_def_by_guid.metadata['url']  # type: ignore
        path_format_arguments = {
            'guid': self._serialize.url("guid", guid, 'str', max_length=4096, min_length=1),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('JsonAtlasStructDef', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_term_template_def_by_guid.metadata = {'url': '/atlas/v2/types/termtemplatedef/guid/{guid}'}  # type: ignore

    async def get_term_template_def_by_name(
        self,
        name: str,
        **kwargs
    ) -> Optional["_models.JsonAtlasStructDef"]:
        """Gets the term template definition by its name (unique).

        :param name: The name of the term template.
        :type name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: JsonAtlasStructDef, or the result of cls(response)
        :rtype: ~PurviewCatalog.models.JsonAtlasStructDef or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["_models.JsonAtlasStructDef"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_term_template_def_by_name.metadata['url']  # type: ignore
        path_format_arguments = {
            'name': self._serialize.url("name", name, 'str', max_length=4096, min_length=1),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('JsonAtlasStructDef', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_term_template_def_by_name.metadata = {'url': '/atlas/v2/types/termtemplatedef/name/{name}'}  # type: ignore

    async def get_enum_def_by_guid(
        self,
        guid: str,
        **kwargs
    ) -> Optional["_models.JsonAtlasEnumDef"]:
        """Gets the enum definition for the given GUID.

        :param guid: The globally unique identifier of the enum.
        :type guid: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: JsonAtlasEnumDef, or the result of cls(response)
        :rtype: ~PurviewCatalog.models.JsonAtlasEnumDef or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["_models.JsonAtlasEnumDef"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_enum_def_by_guid.metadata['url']  # type: ignore
        path_format_arguments = {
            'guid': self._serialize.url("guid", guid, 'str', max_length=4096, min_length=1),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('JsonAtlasEnumDef', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_enum_def_by_guid.metadata = {'url': '/atlas/v2/types/enumdef/guid/{guid}'}  # type: ignore

    async def get_enum_def_by_name(
        self,
        name: str,
        **kwargs
    ) -> Optional["_models.JsonAtlasEnumDef"]:
        """Gets the enum definition by its name (unique).

        :param name: The name of the enum.
        :type name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: JsonAtlasEnumDef, or the result of cls(response)
        :rtype: ~PurviewCatalog.models.JsonAtlasEnumDef or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["_models.JsonAtlasEnumDef"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_enum_def_by_name.metadata['url']  # type: ignore
        path_format_arguments = {
            'name': self._serialize.url("name", name, 'str', max_length=4096, min_length=1),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('JsonAtlasEnumDef', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_enum_def_by_name.metadata = {'url': '/atlas/v2/types/enumdef/name/{name}'}  # type: ignore

    async def get_relationship_def_by_guid(
        self,
        guid: str,
        **kwargs
    ) -> Optional["_models.JsonAtlasRelationshipDef"]:
        """Gets the relationship definition for the given GUID.

        :param guid: The globally unique identifier of the relationship.
        :type guid: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: JsonAtlasRelationshipDef, or the result of cls(response)
        :rtype: ~PurviewCatalog.models.JsonAtlasRelationshipDef or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["_models.JsonAtlasRelationshipDef"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_relationship_def_by_guid.metadata['url']  # type: ignore
        path_format_arguments = {
            'guid': self._serialize.url("guid", guid, 'str', max_length=4096, min_length=1),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('JsonAtlasRelationshipDef', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_relationship_def_by_guid.metadata = {'url': '/atlas/v2/types/relationshipdef/guid/{guid}'}  # type: ignore

    async def get_relationship_def_by_name(
        self,
        name: str,
        **kwargs
    ) -> Optional["_models.JsonAtlasRelationshipDef"]:
        """Gets the relationship definition by its name (unique).

        :param name: The name of the relationship.
        :type name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: JsonAtlasRelationshipDef, or the result of cls(response)
        :rtype: ~PurviewCatalog.models.JsonAtlasRelationshipDef or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["_models.JsonAtlasRelationshipDef"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_relationship_def_by_name.metadata['url']  # type: ignore
        path_format_arguments = {
            'name': self._serialize.url("name", name, 'str', max_length=4096, min_length=1),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('JsonAtlasRelationshipDef', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_relationship_def_by_name.metadata = {'url': '/atlas/v2/types/relationshipdef/name/{name}'}  # type: ignore

    async def get_struct_def_by_guid(
        self,
        guid: str,
        **kwargs
    ) -> Optional["_models.JsonAtlasStructDef"]:
        """Gets the struct definition for the given GUID.

        :param guid: The globally unique identifier of the struct.
        :type guid: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: JsonAtlasStructDef, or the result of cls(response)
        :rtype: ~PurviewCatalog.models.JsonAtlasStructDef or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["_models.JsonAtlasStructDef"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_struct_def_by_guid.metadata['url']  # type: ignore
        path_format_arguments = {
            'guid': self._serialize.url("guid", guid, 'str', max_length=4096, min_length=1),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('JsonAtlasStructDef', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_struct_def_by_guid.metadata = {'url': '/atlas/v2/types/structdef/guid/{guid}'}  # type: ignore

    async def get_struct_def_by_name(
        self,
        name: str,
        **kwargs
    ) -> Optional["_models.JsonAtlasStructDef"]:
        """Gets the struct definition by its name (unique).

        :param name: The name of the struct.
        :type name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: JsonAtlasStructDef, or the result of cls(response)
        :rtype: ~PurviewCatalog.models.JsonAtlasStructDef or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["_models.JsonAtlasStructDef"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_struct_def_by_name.metadata['url']  # type: ignore
        path_format_arguments = {
            'name': self._serialize.url("name", name, 'str', max_length=4096, min_length=1),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('JsonAtlasStructDef', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_struct_def_by_name.metadata = {'url': '/atlas/v2/types/structdef/name/{name}'}  # type: ignore

    async def get_type_def_by_guid(
        self,
        guid: str,
        **kwargs
    ) -> Optional["_models.JsonAtlasBaseTypeDef"]:
        """Gets the type definition for the given GUID.

        :param guid: The globally unique identifier of the type.
        :type guid: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: JsonAtlasBaseTypeDef, or the result of cls(response)
        :rtype: ~PurviewCatalog.models.JsonAtlasBaseTypeDef or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["_models.JsonAtlasBaseTypeDef"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_type_def_by_guid.metadata['url']  # type: ignore
        path_format_arguments = {
            'guid': self._serialize.url("guid", guid, 'str', max_length=4096, min_length=1),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('JsonAtlasBaseTypeDef', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_type_def_by_guid.metadata = {'url': '/atlas/v2/types/typedef/guid/{guid}'}  # type: ignore

    async def get_type_def_by_name(
        self,
        name: str,
        **kwargs
    ) -> Optional["_models.JsonAtlasBaseTypeDef"]:
        """Gets the type definition by its name (unique).

        :param name: The name of the type.
        :type name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: JsonAtlasBaseTypeDef, or the result of cls(response)
        :rtype: ~PurviewCatalog.models.JsonAtlasBaseTypeDef or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["_models.JsonAtlasBaseTypeDef"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_type_def_by_name.metadata['url']  # type: ignore
        path_format_arguments = {
            'name': self._serialize.url("name", name, 'str', max_length=4096, min_length=1),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('JsonAtlasBaseTypeDef', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_type_def_by_name.metadata = {'url': '/atlas/v2/types/typedef/name/{name}'}  # type: ignore

    async def delete_atlas_type_by_name(
        self,
        name: str,
        **kwargs
    ) -> None:
        """Delete API for type identified by its name.

        Delete API for type identified by its name.

        :param name: The name of the type.
        :type name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.delete_atlas_type_by_name.metadata['url']  # type: ignore
        path_format_arguments = {
            'name': self._serialize.url("name", name, 'str', max_length=4096, min_length=1),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204, 400]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete_atlas_type_by_name.metadata = {'url': '/atlas/v2/types/typedef/name/{name}'}  # type: ignore

    async def get_all_type_defs(
        self,
        include_term_template: Optional[bool] = False,
        type: Optional[Union[str, "_models.Enum14"]] = "False",
        **kwargs
    ) -> "_models.JsonAtlasTypesDef":
        """Gets all type definitions in Atlas in bulk.

        :param include_term_template: Whether include termtemplatedef when return all typedefs.
         This is always true when search filter type=term_template.
        :type include_term_template: bool
        :param type: Typedef name as search filter when get typedefs.
        :type type: str or ~PurviewCatalog.models.Enum14
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: JsonAtlasTypesDef, or the result of cls(response)
        :rtype: ~PurviewCatalog.models.JsonAtlasTypesDef
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.JsonAtlasTypesDef"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_all_type_defs.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if include_term_template is not None:
            query_parameters['includeTermTemplate'] = self._serialize.query("include_term_template", include_term_template, 'bool')
        if type is not None:
            query_parameters['type'] = self._serialize.query("type", type, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('JsonAtlasTypesDef', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_all_type_defs.metadata = {'url': '/atlas/v2/types/typedefs'}  # type: ignore

    async def create_atlas_type_defs(
        self,
        types_def: "_models.JsonAtlasTypesDef",
        **kwargs
    ) -> Optional["_models.JsonAtlasTypesDef"]:
        """Creates all atlas type definitions in bulk, only new definitions will be created.
        Any changes to the existing definitions will be discarded.

        :param types_def: A composite wrapper object with corresponding lists of the type definition.
        :type types_def: ~PurviewCatalog.models.JsonAtlasTypesDef
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: JsonAtlasTypesDef, or the result of cls(response)
        :rtype: ~PurviewCatalog.models.JsonAtlasTypesDef or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["_models.JsonAtlasTypesDef"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_atlas_type_defs.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(types_def, 'JsonAtlasTypesDef')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 400]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('JsonAtlasTypesDef', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_atlas_type_defs.metadata = {'url': '/atlas/v2/types/typedefs'}  # type: ignore

    async def update_atlas_type_defs(
        self,
        types_def: "_models.JsonAtlasTypesDef",
        **kwargs
    ) -> Optional["_models.JsonAtlasTypesDef"]:
        """Updates all types in bulk, changes detected in the type definitions would be persisted.

        :param types_def: A composite object that captures all type definition changes.
        :type types_def: ~PurviewCatalog.models.JsonAtlasTypesDef
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: JsonAtlasTypesDef, or the result of cls(response)
        :rtype: ~PurviewCatalog.models.JsonAtlasTypesDef or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["_models.JsonAtlasTypesDef"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_atlas_type_defs.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(types_def, 'JsonAtlasTypesDef')
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 400]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('JsonAtlasTypesDef', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    update_atlas_type_defs.metadata = {'url': '/atlas/v2/types/typedefs'}  # type: ignore

    async def delete_atlas_type_defs(
        self,
        types_def: "_models.JsonAtlasTypesDef",
        **kwargs
    ) -> None:
        """Deletes API for all types in bulk.

        :param types_def: A composite object that captures all types to be deleted.
        :type types_def: ~PurviewCatalog.models.JsonAtlasTypesDef
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.delete_atlas_type_defs.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(types_def, 'JsonAtlasTypesDef')
        body_content_kwargs['content'] = body_content
        request = self._client.delete(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204, 400]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete_atlas_type_defs.metadata = {'url': '/atlas/v2/types/typedefs'}  # type: ignore

    async def get_type_def_headers(
        self,
        include_term_template: Optional[bool] = False,
        type: Optional[Union[str, "_models.Enum14"]] = "False",
        **kwargs
    ) -> List["_models.JsonAtlasTypeDefHeader"]:
        """Lists all type definitions returned as a list of minimal information header.

        :param include_term_template: Whether include termtemplatedef when return all typedefs.
         This is always true when search filter type=term_template.
        :type include_term_template: bool
        :param type: Typedef name as search filter when get typedefs.
        :type type: str or ~PurviewCatalog.models.Enum14
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of JsonAtlasTypeDefHeader, or the result of cls(response)
        :rtype: list[~PurviewCatalog.models.JsonAtlasTypeDefHeader]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["_models.JsonAtlasTypeDefHeader"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_type_def_headers.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if include_term_template is not None:
            query_parameters['includeTermTemplate'] = self._serialize.query("include_term_template", include_term_template, 'bool')
        if type is not None:
            query_parameters['type'] = self._serialize.query("type", type, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[JsonAtlasTypeDefHeader]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_type_def_headers.metadata = {'url': '/atlas/v2/types/typedefs/headers'}  # type: ignore

    async def get_type_statistics(
        self,
        **kwargs
    ) -> "_models.JsonTypeStatistics":
        """Gets type statistics.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: JsonTypeStatistics, or the result of cls(response)
        :rtype: ~PurviewCatalog.models.JsonTypeStatistics
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.JsonTypeStatistics"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_type_statistics.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('JsonTypeStatistics', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_type_statistics.metadata = {'url': '/atlas/v2/types/statistics'}  # type: ignore
