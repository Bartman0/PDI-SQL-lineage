openapi: 3.0.1
info:
  description: Purview Catalog Service is a fully managed cloud service whose users
    can discover the data sources they need and understand the data sources they find.
    At the same time, Data Catalog helps organizations get more value from their existing
    investments. This swagger defines REST API of the Hot Tier of Data Catalog Gen
    2.
  title: Purview Catalog Service REST API Document
  version: 2020-12-01-preview
servers:
- url: https://catalog.purview.azure.com/api
security:
- azure_auth:
  - user_impersonation
paths:
  /atlas/v2/entity:
    post:
      description: |-
        Creates or updates an entity in Atlas.
        Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        Map and array of collections are not well supported. E.g., array<array<int>>, array<map<string, int>>.
      operationId: EntityREST_CreateOrUpdate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/json_AtlasEntityWithExtInfo'
        description: Atlas entity with extended information.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_EntityMutationResponse'
          description: Created with EntityMutationResponse.
      tags:
      - EntityREST
      x-ms-examples:
        EntityREST_Create:
          $ref: ./examples/EntityREST_Create.json
        EntityREST_Update:
          $ref: ./examples/EntityREST_Update.json
      x-codegen-request-body-name: entity
      x-contentType: application/json
      x-accepts: application/json
  /atlas/v2/entity/bulk:
    delete:
      description: Deletes a list of entities in bulk identified by their GUIDs or
        unique attributes.
      operationId: EntityREST_BulkDelete
      parameters:
      - description: An array of GUIDs of entities to delete.
        explode: true
        in: query
        name: guid
        required: true
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_EntityMutationResponse'
          description: Deleted with EntityMutationResponse.
      tags:
      - EntityREST
      x-ms-examples:
        EntityREST_DeleteByGuids:
          $ref: ./examples/EntityREST_DeleteByGuids.json
      x-accepts: application/json
    get:
      description: Lists entities in bulk identified by its GUIDs.
      operationId: EntityREST_GetByGuids
      parameters:
      - description: An array of GUIDs of entities to create.
        explode: true
        in: query
        name: guid
        required: true
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Whether to return minimal information for referred entities.
        in: query
        name: minExtInfo
        schema:
          default: false
          type: boolean
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: Whether to ignore relationship attributes.
        in: query
        name: ignoreRelationships
        schema:
          default: false
          type: boolean
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasEntitiesWithExtInfo'
          description: OK.
        "404":
          content: {}
          description: No entity is found.
      tags:
      - EntityREST
      x-ms-examples:
        EntityREST_GetByGuids:
          $ref: ./examples/EntityREST_GetByGuids.json
      x-accepts: application/json
    post:
      description: |-
        Creates or updates entities in Atlas in bulk.
        Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        Map and array of collections are not well supported. E.g., array<array<int>>, array<map<string, int>>.
      operationId: EntityREST_CreateOrUpdateBulk
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/json_AtlasEntitiesWithExtInfo'
        description: An array of entities to create or update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_EntityMutationResponse'
          description: Ok.
      tags:
      - EntityREST
      x-ms-examples:
        EntityREST_CreateOrUpdateBulk:
          $ref: ./examples/EntityREST_CreateOrUpdateBulk.json
      x-codegen-request-body-name: entities
      x-contentType: application/json
      x-accepts: application/json
  /atlas/v2/entity/bulk/classification:
    post:
      description: Associates a classification to multiple entities in bulk.
      operationId: EntityREST_AddClassification
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/json_ClassificationAssociateRequest'
        description: The request to associate a classification to multiple entities.
        required: true
      responses:
        "204":
          content: {}
          description: No Content.
      tags:
      - EntityREST
      x-ms-examples:
        EntityREST_AddClassificationToEntityByGuids:
          $ref: ./examples/EntityREST_AddClassificationToEntityByGuids.json
      x-codegen-request-body-name: request
      x-contentType: application/json
      x-accepts: application/json
  /atlas/v2/entity/guid/{guid}:
    delete:
      description: Deletes an entity identified by its GUID.
      operationId: EntityREST_DeleteByGuid
      parameters:
      - description: The globally unique identifier of the entity.
        in: path
        name: guid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_EntityMutationResponse'
          description: Deleted with EntityMutationResponse.
      tags:
      - EntityREST
      x-ms-examples:
        EntityREST_DeleteByGuid:
          $ref: ./examples/EntityREST_DeleteByGuid.json
      x-accepts: application/json
    get:
      description: Gets complete definition of an entity given its GUID.
      operationId: EntityREST_GetById
      parameters:
      - description: The globally unique identifier of the entity.
        in: path
        name: guid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: Whether to return minimal information for referred entities.
        in: query
        name: minExtInfo
        schema:
          default: false
          type: boolean
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: Whether to ignore relationship attributes.
        in: query
        name: ignoreRelationships
        schema:
          default: false
          type: boolean
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasEntityWithExtInfo'
          description: OK.
      tags:
      - EntityREST
      x-ms-examples:
        EntityREST_GetById:
          $ref: ./examples/EntityREST_GetById.json
      x-accepts: application/json
    put:
      description: |-
        Updates entity partially - creates or updates entity attribute identified by its GUID.
        Supports only primitive attribute type and entity references.
        It does not support updation of complex types like arrays, and maps.
        Null updates are not possible.
      operationId: EntityREST_PartialUpdateEntityAttrByGuid
      parameters:
      - description: The globally unique identifier of the entity.
        in: path
        name: guid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The name of the attribute.
        in: query
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: The value of the attribute.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_EntityMutationResponse'
          description: Updated with EntityMutationResponse.
      tags:
      - EntityREST
      x-ms-examples:
        EntityREST_PartialUpdateEntityAttrByGuid:
          $ref: ./examples/EntityREST_PartialUpdateEntityAttrByGuid.json
      x-codegen-request-body-name: body
      x-contentType: application/json
      x-accepts: application/json
  /atlas/v2/entity/guid/{guid}/classification/{classificationName}:
    delete:
      description: Deletes a given classification from an existing entity represented
        by a GUID.
      operationId: EntityREST_DeleteClassification
      parameters:
      - description: The globally unique identifier of the entity.
        in: path
        name: guid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The name of the classification.
        in: path
        name: classificationName
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "204":
          content: {}
          description: No Content.
      tags:
      - EntityREST
      x-ms-examples:
        EntityREST_DeleteClassification:
          $ref: ./examples/EntityREST_DeleteClassification.json
      x-accepts: application/json
    get:
      description: Lists classifications for a given entity represented by a GUID.
      operationId: EntityREST_GetClassification
      parameters:
      - description: The globally unique identifier of the entity.
        in: path
        name: guid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The name of the classification.
        in: path
        name: classificationName
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasClassification'
          description: The classification for the given entity GUID.
      tags:
      - EntityREST
      x-ms-examples:
        EntityREST_GetClassification:
          $ref: ./examples/EntityREST_GetClassification.json
      x-accepts: application/json
  /atlas/v2/entity/guid/{guid}/classifications:
    get:
      description: Lists classifications for a given entity represented by a GUID.
      operationId: EntityREST_GetClassifications
      parameters:
      - description: The globally unique identifier of the entity.
        in: path
        name: guid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasClassifications'
          description: An array of classifications for the given entity GUID.
      tags:
      - EntityREST
      x-ms-examples:
        EntityREST_GetClassifications:
          $ref: ./examples/EntityREST_GetClassifications.json
      x-accepts: application/json
    post:
      description: Adds classifications to an existing entity represented by a GUID.
      operationId: EntityREST_AddClassifications
      parameters:
      - description: The globally unique identifier of the entity.
        in: path
        name: guid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      requestBody:
        content:
          application/json:
            schema:
              description: An array of classifications.
              items:
                $ref: '#/components/schemas/json_AtlasClassification'
              type: array
        description: An array of classifications to be added.
        required: true
      responses:
        "204":
          content: {}
          description: No Content.
      tags:
      - EntityREST
      x-ms-examples:
        EntityREST_AddClassifications:
          $ref: ./examples/EntityREST_AddClassifications.json
      x-codegen-request-body-name: classifications
      x-contentType: application/json
      x-accepts: application/json
    put:
      description: Updates classifications to an existing entity represented by a
        guid.
      operationId: EntityREST_UpdateClassifications
      parameters:
      - description: The globally unique identifier of the entity.
        in: path
        name: guid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      requestBody:
        content:
          application/json:
            schema:
              description: An array of classifications.
              items:
                $ref: '#/components/schemas/json_AtlasClassification'
              type: array
        description: An array of classifications to be updated.
        required: true
      responses:
        "204":
          content: {}
          description: No Content.
      tags:
      - EntityREST
      x-ms-examples:
        EntityREST_UpdateClassifications:
          $ref: ./examples/EntityREST_UpdateClassifications.json
      x-codegen-request-body-name: classifications
      x-contentType: application/json
      x-accepts: application/json
  /atlas/v2/entity/uniqueAttribute/type/{typeName}:
    delete:
      description: |-
        Deletes an entity identified by its type and unique attributes.
        In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        attr:<attrName>=<attrValue>.
        NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        The REST request would look something like this:
        DELETE /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
      operationId: EntityREST_DeleteByUniqueAttribute
      parameters:
      - description: The name of the type.
        in: path
        name: typeName
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The qualified name of the entity.
        in: query
        name: attr:qualifiedName
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_EntityMutationResponse'
          description: Deleted with EntityMutationResponse.
      tags:
      - EntityREST
      x-ms-examples:
        EntityREST_DeleteByUniqueAttribute:
          $ref: ./examples/EntityREST_DeleteByUniqueAttribute.json
      x-accepts: application/json
    get:
      description: |-
        Gets complete definition of an entity given its type and unique attribute.
        In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        attr:<attrName>=<attrValue>.
        NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        The REST request would look something like this:
        GET /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
      operationId: EntityREST_GetByUniqueAttributes
      parameters:
      - description: The name of the type.
        in: path
        name: typeName
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: Whether to return minimal information for referred entities.
        in: query
        name: minExtInfo
        schema:
          default: false
          type: boolean
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: Whether to ignore relationship attributes.
        in: query
        name: ignoreRelationships
        schema:
          default: false
          type: boolean
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The qualified name of the entity.
        in: query
        name: attr:qualifiedName
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasEntityWithExtInfo'
          description: AtlasEntityWithExtInfo.
      tags:
      - EntityREST
      x-ms-examples:
        EntityREST_GetByUniqueAttributes:
          $ref: ./examples/EntityREST_GetByUniqueAttributes.json
      x-accepts: application/json
    put:
      description: |-
        Updates entity partially - Allows a subset of attributes to be updated on
        an entity which is identified by its type and unique attribute  eg: Referenceable.qualifiedName.
        Null updates are not possible.
        In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        attr:<attrName>=<attrValue>.
        NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        The REST request would look something like this:
        PUT /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
      operationId: EntityREST_PartialUpdateEntityByUniqueAttrs
      parameters:
      - description: The name of the type.
        in: path
        name: typeName
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The qualified name of the entity.
        in: query
        name: attr:qualifiedName
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/json_AtlasEntityWithExtInfo'
        description: Atlas entity with extended information.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_EntityMutationResponse'
          description: Updated with EntityMutationResponse.
      tags:
      - EntityREST
      x-ms-examples:
        EntityREST_PartialUpdateEntityByUniqueAttrs:
          $ref: ./examples/EntityREST_PartialUpdateEntityByUniqueAttrs.json
      x-codegen-request-body-name: atlasEntityWithExtInfo
      x-contentType: application/json
      x-accepts: application/json
  /atlas/v2/entity/uniqueAttribute/type/{typeName}/classification/{classificationName}:
    delete:
      description: Deletes a given classification from an entity identified by its
        type and unique attributes.
      operationId: EntityREST_DeleteClassificationByUniqueAttribute
      parameters:
      - description: The name of the type.
        in: path
        name: typeName
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The name of the classification.
        in: path
        name: classificationName
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The qualified name of the entity.
        in: query
        name: attr:qualifiedName
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content.
        "404":
          content: {}
          description: Not Found.
      tags:
      - EntityREST
      x-ms-examples:
        EntityREST_DeleteClassificationByUniqueAttribute:
          $ref: ./examples/EntityREST_DeleteClassificationByUniqueAttribute.json
      x-accepts: application/json
  /atlas/v2/entity/uniqueAttribute/type/{typeName}/classifications:
    post:
      description: Adds classification to the entity identified by its type and unique
        attributes.
      operationId: EntityREST_AddClassificationsByUniqueAttribute
      parameters:
      - description: The name of the type.
        in: path
        name: typeName
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The qualified name of the entity.
        in: query
        name: attr:qualifiedName
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              description: An array of classification.
              items:
                $ref: '#/components/schemas/json_AtlasClassification'
              type: array
        description: An array of classification to be added.
        required: true
      responses:
        "204":
          content: {}
          description: No Content.
      tags:
      - EntityREST
      x-ms-examples:
        EntityREST_AddClassificationsByUniqueAttribute:
          $ref: ./examples/EntityREST_AddClassificationsByUniqueAttribute.json
      x-codegen-request-body-name: atlasClassificationArray
      x-contentType: application/json
      x-accepts: application/json
    put:
      description: Updates classification on an entity identified by its type and
        unique attributes.
      operationId: EntityREST_UpdateClassificationsByUniqueAttribute
      parameters:
      - description: The name of the type.
        in: path
        name: typeName
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The qualified name of the entity.
        in: query
        name: attr:qualifiedName
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              description: An array of classification.
              items:
                $ref: '#/components/schemas/json_AtlasClassification'
              type: array
        description: An array of classification to be updated.
        required: true
      responses:
        "204":
          content: {}
          description: No Content.
      tags:
      - EntityREST
      x-ms-examples:
        EntityREST_UpdateClassificationsByUniqueAttribute:
          $ref: ./examples/EntityREST_UpdateClassificationsByUniqueAttribute.json
      x-codegen-request-body-name: atlasClassificationArray
      x-contentType: application/json
      x-accepts: application/json
  /atlas/v2/entity/bulk/setClassifications:
    post:
      description: set classifications on entities in bulk.
      operationId: EntityREST_SetClassifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/json_AtlasEntityHeaders'
        description: Atlas entity headers.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Response that indicates each classification mutation
                  result.
                items:
                  type: string
                type: array
          description: OK
      tags:
      - EntityREST
      x-ms-examples:
        EntityREST_SetClassifications:
          $ref: ./examples/EntityREST_SetClassifications.json
      x-codegen-request-body-name: entityHeaders
      x-contentType: application/json
      x-accepts: application/json
  /atlas/v2/entity/bulk/uniqueAttribute/type/{typeName}:
    get:
      description: |-
        Bulk API to retrieve list of entities identified by its unique attributes.

        In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format

        typeName=<typeName>&attr_1:<attrName>=<attrValue>&attr_2:<attrName>=<attrValue>&attr_3:<attrName>=<attrValue>

        NOTE: The attrName should be an unique attribute for the given entity-type

        The REST request would look something like this

        GET /v2/entity/bulk/uniqueAttribute/type/hive_db?attr_0:qualifiedName=db1@cl1&attr_2:qualifiedName=db2@cl1
      operationId: EntityREST_GetEntitiesByUniqueAttributes
      parameters:
      - description: The name of the type.
        in: path
        name: typeName
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: Whether to return minimal information for referred entities.
        in: query
        name: minExtInfo
        schema:
          default: false
          type: boolean
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: Whether to ignore relationship attributes.
        in: query
        name: ignoreRelationships
        schema:
          default: false
          type: boolean
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: Qualified name of an entity. E.g. to find 2 entities you can
          set attrs_0:qualifiedName=db1@cl1&attrs_2:qualifiedName=db2@cl1
        in: query
        name: attr_N:qualifiedName
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasEntitiesWithExtInfo'
          description: OK.
      tags:
      - EntityREST
      x-ms-examples:
        EntityREST_GetEntitiesByUniqueAttributes:
          $ref: ./examples/EntityREST_GetEntitiesByUniqueAttributes.json
      x-accepts: application/json
  /atlas/v2/entity/guid/{guid}/header:
    get:
      description: Get entity header given its GUID.
      operationId: EntityREST_GetHeaderById
      parameters:
      - description: The globally unique identifier of the entity.
        in: path
        name: guid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasEntityHeader'
          description: AtlasEntityHeader
      summary: Get entity header given its GUID.
      tags:
      - EntityREST
      x-ms-examples:
        EntityREST_GetHeaderById:
          $ref: ./examples/EntityREST_GetHeaderById.json
      x-accepts: application/json
  /atlas/v2/glossary:
    get:
      description: Gets all glossaries registered with Atlas.
      operationId: GlossaryREST_GetGlossaries
      parameters:
      - description: The page size - by default there is no paging.
        in: query
        name: limit
        schema:
          format: int32
          type: integer
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The offset for pagination purpose.
        in: query
        name: offset
        schema:
          format: int32
          type: integer
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The sort order, ASC (default) or DESC.
        in: query
        name: sort
        schema:
          default: ASC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                description: An array of existing glossaries fitting the search criteria
                  or empty list if nothing matches.
                items:
                  $ref: '#/components/schemas/json_AtlasGlossary'
                type: array
          description: An array of existing glossaries fitting the search criteria
            or empty list if nothing matches.
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_GetGlossaries:
          $ref: ./examples/GlossaryREST_GetGlossaries.json
      x-accepts: application/json
    post:
      description: Creates a glossary.
      operationId: GlossaryREST_CreateGlossary
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/json_AtlasGlossary'
        description: |-
          Glossary definition, terms & categories can be anchored to a glossary.
          Using the anchor attribute when creating the Term/Category.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasGlossary'
          description: OK. If glossary creation was successful.
        "400":
          content: {}
          description: If glossary definition has invalid or missing information.
        "409":
          content: {}
          description: If glossary definition already exists (duplicate qualifiedName).
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_CreateGlossary:
          $ref: ./examples/GlossaryREST_CreateGlossary.json
      x-codegen-request-body-name: atlasGlossary
      x-contentType: application/json
      x-accepts: application/json
  /atlas/v2/glossary/categories:
    post:
      description: Creates glossary category in bulk.
      operationId: GlossaryREST_CreateGlossaryCategories
      requestBody:
        content:
          application/json:
            schema:
              description: An array of glossary category definitions.
              items:
                $ref: '#/components/schemas/json_AtlasGlossaryCategory'
              type: array
        description: An array of glossary category definitions to be created.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                description: An array of glossary category created successfully in
                  bulk.
                items:
                  $ref: '#/components/schemas/json_AtlasGlossaryCategory'
                type: array
          description: OK. If bulk glossary category creation was successful.
        "400":
          content: {}
          description: If ANY glossary category definition has invalid or missing
            information.
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_CreateGlossaryCategories:
          $ref: ./examples/GlossaryREST_CreateGlossaryCategories.json
      x-codegen-request-body-name: glossaryCategory
      x-contentType: application/json
      x-accepts: application/json
  /atlas/v2/glossary/category:
    post:
      description: Creates a glossary category.
      operationId: GlossaryREST_CreateGlossaryCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/json_AtlasGlossaryCategory'
        description: |-
          The glossary category definition. A category must be anchored to a Glossary when creating.
          Optionally, terms belonging to the category and the hierarchy can also be defined during creation.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasGlossaryCategory'
          description: OK. If glossary category creation was successful.
        "400":
          content: {}
          description: If glossary category definition has invalid or missing information.
        "409":
          content: {}
          description: If glossary category already exists (duplicate qualifiedName).
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_CreateGlossaryCategory:
          $ref: ./examples/GlossaryREST_CreateGlossaryCategory.json
      x-codegen-request-body-name: glossaryCategory
      x-contentType: application/json
      x-accepts: application/json
  /atlas/v2/glossary/category/{categoryGuid}:
    delete:
      description: Deletes a glossary category.
      operationId: GlossaryREST_DeleteGlossaryCategory
      parameters:
      - description: The globally unique identifier of the category.
        in: path
        name: categoryGuid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "204":
          content: {}
          description: OK. If glossary category delete was successful.
        "404":
          content: {}
          description: If glossary category GUID is invalid.
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_DeleteGlossaryCategory:
          $ref: ./examples/GlossaryREST_DeleteGlossaryCategory.json
      x-accepts: application/json
    get:
      description: Gets specific glossary category by its GUID.
      operationId: GlossaryREST_GetGlossaryCategory
      parameters:
      - description: The globally unique identifier of the category.
        in: path
        name: categoryGuid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasGlossaryCategory'
          description: OK. If glossary category exists for given GUID.
        "404":
          content: {}
          description: If glossary category GUID is invalid.
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_GetGlossaryCategory:
          $ref: ./examples/GlossaryREST_GetGlossaryCategory.json
      x-accepts: application/json
    put:
      description: Updates the given glossary category by its GUID.
      operationId: GlossaryREST_UpdateGlossaryCategory
      parameters:
      - description: The globally unique identifier of the category.
        in: path
        name: categoryGuid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/json_AtlasGlossaryCategory'
        description: The glossary category to be updated.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasGlossaryCategory'
          description: OK. If glossary category partial update was successful.
        "400":
          content: {}
          description: If glossary category definition has invalid or missing information.
        "404":
          content: {}
          description: If glossary category GUID is invalid.
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_UpdateGlossaryCategory:
          $ref: ./examples/GlossaryREST_UpdateGlossaryCategory.json
      x-codegen-request-body-name: glossaryCategory
      x-contentType: application/json
      x-accepts: application/json
  /atlas/v2/glossary/category/{categoryGuid}/partial:
    put:
      description: Updates the glossary category partially.
      operationId: GlossaryREST_PartialUpdateGlossaryCategory
      parameters:
      - description: The globally unique identifier of the category.
        in: path
        name: categoryGuid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                type: string
              description: A map containing keys as attribute names and values as
                corresponding attribute values.
              type: object
        description: A map containing keys as attribute names and values as corresponding
          attribute values for partial update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasGlossaryCategory'
          description: OK. If glossary category partial update was successful.
        "400":
          content: {}
          description: If category attributes are invalid.
        "404":
          content: {}
          description: If glossary category GUID is invalid.
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_PartialUpdateGlossaryCategory:
          $ref: ./examples/GlossaryREST_PartialUpdateGlossaryCategory.json
      x-codegen-request-body-name: partialUpdates
      x-contentType: application/json
      x-accepts: application/json
  /atlas/v2/glossary/category/{categoryGuid}/related:
    get:
      description: Gets all related categories (parent and children). Limit, offset,
        and sort parameters are currently not being enabled and won't work even they
        are passed.
      operationId: GlossaryREST_GetRelatedCategories
      parameters:
      - description: The globally unique identifier of the category.
        in: path
        name: categoryGuid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The page size - by default there is no paging.
        in: query
        name: limit
        schema:
          format: int32
          type: integer
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The offset for pagination purpose.
        in: query
        name: offset
        schema:
          format: int32
          type: integer
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The sort order, ASC (default) or DESC.
        in: query
        name: sort
        schema:
          default: ASC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  items:
                    $ref: '#/components/schemas/json_AtlasRelatedCategoryHeader'
                  type: array
                description: An array of related categories.
                type: object
          description: OK. Gets an array of related categories.
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_GetRelatedCategories:
          $ref: ./examples/GlossaryREST_GetRelatedCategories.json
      x-accepts: application/json
  /atlas/v2/glossary/category/{categoryGuid}/terms:
    get:
      description: Gets all terms associated with the specific category.
      operationId: GlossaryREST_GetCategoryTerms
      parameters:
      - description: The globally unique identifier of the category.
        in: path
        name: categoryGuid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The page size - by default there is no paging.
        in: query
        name: limit
        schema:
          format: int32
          type: integer
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The offset for pagination purpose.
        in: query
        name: offset
        schema:
          format: int32
          type: integer
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The sort order, ASC (default) or DESC.
        in: query
        name: sort
        schema:
          default: ASC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                description: An array of terms for the given category or an empty
                  list.
                items:
                  $ref: '#/components/schemas/json_AtlasRelatedTermHeader'
                type: array
          description: An array of terms for the given category or an empty list.
        "404":
          content: {}
          description: If glossary category GUID is invalid.
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_GetCategoryTerms:
          $ref: ./examples/GlossaryREST_GetCategoryTerms.json
      x-accepts: application/json
  /atlas/v2/glossary/term:
    post:
      description: Creates a glossary term.
      operationId: GlossaryREST_CreateGlossaryTerm
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/json_AtlasGlossaryTerm'
        description: |-
          The glossary term definition. A term must be anchored to a Glossary at the time of creation.
          Optionally it can be categorized as well.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasGlossaryTerm'
          description: OK. If glossary term creation was successful.
        "400":
          content: {}
          description: If glossary term definition has invalid or missing information.
        "409":
          content: {}
          description: If glossary term already exists (duplicate qualifiedName).
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_CreateGlossaryTerm:
          $ref: ./examples/GlossaryREST_CreateGlossaryTerm.json
        GlossaryREST_CreateGlossaryTermWithTermTemplate:
          $ref: ./examples/GlossaryREST_CreateGlossaryTermWithTermTemplate.json
      x-codegen-request-body-name: glossaryTerm
      x-contentType: application/json
      x-accepts: application/json
  /atlas/v2/glossary/term/{termGuid}:
    delete:
      description: Deletes a glossary term.
      operationId: GlossaryREST_DeleteGlossaryTerm
      parameters:
      - description: The globally unique identifier for glossary term.
        in: path
        name: termGuid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "204":
          content: {}
          description: OK. If glossary term delete was successful.
        "404":
          content: {}
          description: If glossary term guid in invalid.
      tags:
      - GlossaryREST
      x-accepts: application/json
    get:
      description: Gets a specific glossary term by its GUID.
      operationId: GlossaryREST_GetGlossaryTerm
      parameters:
      - description: The globally unique identifier for glossary term.
        in: path
        name: termGuid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasGlossaryTerm'
          description: OK. If glossary term exists for given GUID.
        "404":
          content: {}
          description: If glossary term GUID is invalid.
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_GetGlossaryTerm:
          $ref: ./examples/GlossaryREST_GetGlossaryTerm.json
      x-accepts: application/json
    put:
      description: Updates the given glossary term by its GUID.
      operationId: GlossaryREST_UpdateGlossaryTerm
      parameters:
      - description: The globally unique identifier for glossary term.
        in: path
        name: termGuid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/json_AtlasGlossaryTerm'
        description: The glossary term to be updated.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasGlossaryTerm'
          description: OK. If glossary term update was successful.
        "400":
          content: {}
          description: If glossary temr definition has invalid or missing information.
        "404":
          content: {}
          description: If glossary term GUID is invalid.
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_UpdateGlossaryTerm:
          $ref: ./examples/GlossaryREST_UpdateGlossaryTerm.json
      x-codegen-request-body-name: glossaryTerm
      x-contentType: application/json
      x-accepts: application/json
  /atlas/v2/glossary/term/{termGuid}/partial:
    put:
      description: Updates the glossary term partially.
      operationId: GlossaryREST_PartialUpdateGlossaryTerm
      parameters:
      - description: The globally unique identifier for glossary term.
        in: path
        name: termGuid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                type: string
              description: A map containing keys as attribute names and values as
                corresponding attribute values.
              type: object
        description: A map containing keys as attribute names and values as corresponding
          attribute values to be updated.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasGlossaryTerm'
          description: OK. If glossary partial update was successful.
        "400":
          content: {}
          description: If partial attributes are invalid.
        "404":
          content: {}
          description: If glossary term guid in invalid.
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_PartialUpdateGlossaryTerm:
          $ref: ./examples/GlossaryREST_PartialUpdateGlossaryTerm.json
      x-codegen-request-body-name: partialUpdates
      x-contentType: application/json
      x-accepts: application/json
  /atlas/v2/glossary/terms:
    post:
      description: Creates glossary terms in bulk.
      operationId: GlossaryREST_CreateGlossaryTerms
      requestBody:
        content:
          application/json:
            schema:
              description: An array of glossary term definitions.
              items:
                $ref: '#/components/schemas/json_AtlasGlossaryTerm'
              type: array
        description: An array of glossary term definitions to be created in bulk.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                description: If bulk glossary terms creation was successful.
                items:
                  $ref: '#/components/schemas/json_AtlasGlossaryTerm'
                type: array
          description: OK. If bulk glossary terms creation was successful.
        "400":
          content: {}
          description: If any glossary term definition has invalid or missing information.
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_CreateGlossaryTerms:
          $ref: ./examples/GlossaryREST_CreateGlossaryTerms.json
      x-codegen-request-body-name: glossaryTerm
      x-contentType: application/json
      x-accepts: application/json
  /atlas/v2/glossary/terms/{termGuid}/assignedEntities:
    delete:
      description: Deletes the term assignment for the given list of related objects.
      operationId: GlossaryREST_DeleteTermAssignmentFromEntities
      parameters:
      - description: The globally unique identifier for glossary term.
        in: path
        name: termGuid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      requestBody:
        content:
          application/json:
            schema:
              description: An array of related object IDs from which the term has
                to be dissociated.
              items:
                $ref: '#/components/schemas/json_AtlasRelatedObjectId'
              type: array
        description: An array of related object IDs from which the term has to be
          dissociated.
        required: true
      responses:
        "204":
          content: {}
          description: OK. If glossary term dissociation was successful.
        "400":
          content: {}
          description: If ANY of the related objects is invalid.
        "404":
          content: {}
          description: If glossary term GUID is invalid.
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_RemoveTermAssignmentFromEntities:
          $ref: ./examples/GlossaryREST_RemoveTermAssignmentFromEntities.json
      x-codegen-request-body-name: relatedObjectIds
      x-contentType: application/json
      x-accepts: application/json
    get:
      description: Gets all related objects assigned with the specified term.
      operationId: GlossaryREST_GetEntitiesAssignedWithTerm
      parameters:
      - description: The globally unique identifier for glossary term.
        in: path
        name: termGuid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The page size - by default there is no paging.
        in: query
        name: limit
        schema:
          format: int32
          type: integer
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The offset for pagination purpose.
        in: query
        name: offset
        schema:
          format: int32
          type: integer
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The sort order, ASC (default) or DESC.
        in: query
        name: sort
        schema:
          default: ASC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                description: An array of related objects (if any) for the given glossary
                  or an empty list.
                items:
                  $ref: '#/components/schemas/json_AtlasRelatedObjectId'
                type: array
          description: OK. An array of related objects (if any) for the given glossary
            or an empty list.
        "404":
          content: {}
          description: If glossary term GUID is invalid.
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_GetEntitiesAssignedWithTerm:
          $ref: ./examples/GlossaryREST_GetEntitiesAssignedWithTerm.json
      x-accepts: application/json
    post:
      description: Assigns the given term to the provided list of related objects.
      operationId: GlossaryREST_AssignTermToEntities
      parameters:
      - description: The globally unique identifier for glossary term.
        in: path
        name: termGuid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      requestBody:
        content:
          application/json:
            schema:
              description: An array of related object IDs to which the term has to
                be associated.
              items:
                $ref: '#/components/schemas/json_AtlasRelatedObjectId'
              type: array
        description: An array of related object IDs to which the term has to be associated.
        required: true
      responses:
        "204":
          content: {}
          description: OK. If the term assignment was successful.
        "400":
          content: {}
          description: If ANY of the related objects is invalid.
        "404":
          content: {}
          description: If glossary term GUID is invalid.
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_AssignTermToEntities:
          $ref: ./examples/GlossaryREST_AssignTermToEntities.json
      x-codegen-request-body-name: relatedObjectIds
      x-contentType: application/json
      x-accepts: application/json
    put:
      description: Deletes the term assignment for the given list of related objects.
      operationId: GlossaryREST_RemoveTermAssignmentFromEntities
      parameters:
      - description: The globally unique identifier for glossary term.
        in: path
        name: termGuid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      requestBody:
        content:
          application/json:
            schema:
              description: An array of related object IDs from which the term has
                to be dissociated.
              items:
                $ref: '#/components/schemas/json_AtlasRelatedObjectId'
              type: array
        description: An array of related object IDs from which the term has to be
          dissociated.
        required: true
      responses:
        "204":
          content: {}
          description: OK. If glossary term dissociation was successful.
        "400":
          content: {}
          description: If ANY of the related objects is invalid.
        "404":
          content: {}
          description: If glossary term GUID is invalid.
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_RemoveTermAssignmentFromEntities:
          $ref: ./examples/GlossaryREST_RemoveTermAssignmentFromEntities.json
      x-codegen-request-body-name: relatedObjectIds
      x-contentType: application/json
      x-accepts: application/json
  /atlas/v2/glossary/terms/{termGuid}/related:
    get:
      description: Gets all related terms for a specific term by its GUID. Limit,
        offset, and sort parameters are currently not being enabled and won't work
        even they are passed.
      operationId: GlossaryREST_GetRelatedTerms
      parameters:
      - description: The globally unique identifier for glossary term.
        in: path
        name: termGuid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The page size - by default there is no paging.
        in: query
        name: limit
        schema:
          format: int32
          type: integer
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The offset for pagination purpose.
        in: query
        name: offset
        schema:
          format: int32
          type: integer
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The sort order, ASC (default) or DESC.
        in: query
        name: sort
        schema:
          default: ASC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  items:
                    $ref: '#/components/schemas/json_AtlasRelatedTermHeader'
                  type: array
                description: An array of related glossary terms for the given glossary
                  or an empty list.
                type: object
          description: OK. An array of related glossary terms for the given glossary
            or an empty list.
        "404":
          content: {}
          description: If glossary term GUID is invalid.
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_GetRelatedTerms:
          $ref: ./examples/GlossaryREST_GetRelatedTerms.json
      x-accepts: application/json
  /atlas/v2/glossary/{glossaryGuid}:
    delete:
      description: Deletes a glossary.
      operationId: GlossaryREST_DeleteGlossary
      parameters:
      - description: The globally unique identifier for glossary.
        in: path
        name: glossaryGuid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "204":
          content: {}
          description: OK. If glossary delete was successful.
        "404":
          content: {}
          description: If glossary GUID in invalid.
      tags:
      - GlossaryREST
      x-accepts: application/json
    get:
      description: Gets a specific Glossary by its GUID.
      operationId: GlossaryREST_GetGlossary
      parameters:
      - description: The globally unique identifier for glossary.
        in: path
        name: glossaryGuid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasGlossary'
          description: OK. If glossary with given guid exists.
        "404":
          content: {}
          description: If glossary GUID is invalid.
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_GetGlossary:
          $ref: ./examples/GlossaryREST_GetGlossary.json
      x-accepts: application/json
    put:
      description: Updates the given glossary.
      operationId: GlossaryREST_UpdateGlossary
      parameters:
      - description: The globally unique identifier for glossary.
        in: path
        name: glossaryGuid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/json_AtlasGlossary'
        description: The glossary definition to be updated.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasGlossary'
          description: OK. If glossary update was successful.
        "400":
          content: {}
          description: If glossary definition has invalid or missing information.
        "404":
          content: {}
          description: If glossary GUID is invalid.
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_UpdateGlossary:
          $ref: ./examples/GlossaryREST_UpdateGlossary.json
      x-codegen-request-body-name: updatedGlossary
      x-contentType: application/json
      x-accepts: application/json
  /atlas/v2/glossary/{glossaryGuid}/categories:
    get:
      description: Gets the categories belonging to a specific glossary.
      operationId: GlossaryREST_GetGlossaryCategories
      parameters:
      - description: The globally unique identifier for glossary.
        in: path
        name: glossaryGuid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The page size - by default there is no paging.
        in: query
        name: limit
        schema:
          format: int32
          type: integer
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The offset for pagination purpose.
        in: query
        name: offset
        schema:
          format: int32
          type: integer
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The sort order, ASC (default) or DESC.
        in: query
        name: sort
        schema:
          default: ASC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                description: An array of glossary categories for the given glossary
                  or an empty list.
                items:
                  $ref: '#/components/schemas/json_AtlasGlossaryCategory'
                type: array
          description: OK. An array of glossary categories for the given glossary
            or an empty list.
        "404":
          content: {}
          description: If glossary guid is invalid.
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_GetGlossaryCategories:
          $ref: ./examples/GlossaryREST_GetGlossaryCategories.json
      x-accepts: application/json
  /atlas/v2/glossary/{glossaryGuid}/categories/headers:
    get:
      description: Gets the category headers belonging to a specific glossary.
      operationId: GlossaryREST_GetGlossaryCategoriesHeaders
      parameters:
      - description: The globally unique identifier for glossary.
        in: path
        name: glossaryGuid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The page size - by default there is no paging.
        in: query
        name: limit
        schema:
          format: int32
          type: integer
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The offset for pagination purpose.
        in: query
        name: offset
        schema:
          format: int32
          type: integer
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The sort order, ASC (default) or DESC.
        in: query
        name: sort
        schema:
          default: ASC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                description: An array of glossary category headers for the given glossary
                  or an empty list.
                items:
                  $ref: '#/components/schemas/json_AtlasRelatedCategoryHeader'
                type: array
          description: OK. An array of glossary category headers for the given glossary
            or an empty list.
        "404":
          content: {}
          description: If glossary GUID is invalid.
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_GetGlossaryCategoriesHeaders:
          $ref: ./examples/GlossaryREST_GetGlossaryCategoriesHeaders.json
      x-accepts: application/json
  /atlas/v2/glossary/{glossaryGuid}/detailed:
    get:
      description: Gets a specific glossary with detailed information.
      operationId: GlossaryREST_GetDetailedGlossary
      parameters:
      - description: The globally unique identifier for glossary.
        in: path
        name: glossaryGuid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasGlossaryExtInfo'
          description: OK. If glossary exists for given GUID.
        "404":
          content: {}
          description: If glossary GUID is invalid.
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_GetDetailedGlossary:
          $ref: ./examples/GlossaryREST_GetDetailedGlossary.json
      x-accepts: application/json
  /atlas/v2/glossary/{glossaryGuid}/partial:
    put:
      description: Updates the glossary partially. Some properties such as qualifiedName
        are not allowed to be updated.
      operationId: GlossaryREST_PartialUpdateGlossary
      parameters:
      - description: The globally unique identifier for glossary.
        in: path
        name: glossaryGuid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                type: string
              description: A map containing keys as attribute names and values as
                corresponding attribute values.
              type: object
        description: A map containing keys as attribute names and values as corresponding
          attribute values.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasGlossary'
          description: OK. If glossary partial update was successful.
        "400":
          content: {}
          description: If partial update parameters are invalid.
        "404":
          content: {}
          description: If glossary GUID is invalid.
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_PartialUpdateGlossary:
          $ref: ./examples/GlossaryREST_PartialUpdateGlossary.json
      x-codegen-request-body-name: partialUpdates
      x-contentType: application/json
      x-accepts: application/json
  /atlas/v2/glossary/{glossaryGuid}/terms:
    get:
      description: Gets terms belonging to a specific glossary.
      operationId: GlossaryREST_GetGlossaryTerms
      parameters:
      - description: The globally unique identifier for glossary.
        in: path
        name: glossaryGuid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The page size - by default there is no paging.
        in: query
        name: limit
        schema:
          format: int32
          type: integer
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The offset for pagination purpose.
        in: query
        name: offset
        schema:
          format: int32
          type: integer
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The sort order, ASC (default) or DESC.
        in: query
        name: sort
        schema:
          default: ASC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                description: An array of glossary terms for the given glossary or
                  an empty list.
                items:
                  $ref: '#/components/schemas/json_AtlasGlossaryTerm'
                type: array
          description: OK. An array of glossary terms for the given glossary or an
            empty list.
        "404":
          content: {}
          description: If glossary GUID is invalid.
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_GetGlossaryTerms:
          $ref: ./examples/GlossaryREST_GetGlossaryTerms.json
      x-accepts: application/json
  /atlas/v2/glossary/{glossaryGuid}/terms/headers:
    get:
      description: Gets term headers belonging to a specific glossary.
      operationId: GlossaryREST_GetGlossaryTermHeaders
      parameters:
      - description: The globally unique identifier for glossary.
        in: path
        name: glossaryGuid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The page size - by default there is no paging.
        in: query
        name: limit
        schema:
          format: int32
          type: integer
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The offset for pagination purpose.
        in: query
        name: offset
        schema:
          format: int32
          type: integer
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The sort order, ASC (default) or DESC.
        in: query
        name: sort
        schema:
          default: ASC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                description: An array of glossary terms for the given glossary or
                  an empty list.
                items:
                  $ref: '#/components/schemas/json_AtlasRelatedTermHeader'
                type: array
          description: OK. An array of glossary terms for the given glossary or an
            empty list.
        "404":
          content: {}
          description: If glossary GUID is invalid.
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_GetGlossaryTermHeaders:
          $ref: ./examples/GlossaryREST_GetGlossaryTermHeaders.json
      x-accepts: application/json
  /atlas/v2/glossary/{glossaryGuid}/terms/import:
    post:
      description: Import Glossary Terms from local csv file
      operationId: GlossaryREST_ImportGlossaryTermsViaCSV
      parameters:
      - description: The globally unique identifier for glossary.
        in: path
        name: glossaryGuid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  default: Name,Definition,Status,Related Terms,Synonyms,Acronym,Experts,Stewards
                  description: The csv file to import glossary terms from.
                  format: binary
                  type: string
              required:
              - file
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_ImportCSVOperation'
          description: Accepted. A job to import glossary terms via csv has been accepted.
        "400":
          content: {}
          description: If csv file is not valid
        "404":
          content: {}
          description: If glossary GUID is invalid.
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_ImportGlossaryTermsViaCSV:
          $ref: ./examples/GlossaryREST_GetImportCSVOperationStatus.json
      x-contentType: multipart/form-data
      x-accepts: application/json
  /atlas/v2/glossary/name/{glossaryName}/terms/import:
    post:
      description: Import Glossary Terms from local csv file by glossaryName
      operationId: GlossaryREST_ImportGlossaryTermsViaCSVByGlossaryName
      parameters:
      - description: The name of the glossary.
        in: path
        name: glossaryName
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  default: Name,Definition,Status,Related Terms,Synonyms,Acronym,Experts,Stewards
                  description: The csv file to import glossary terms from.
                  format: binary
                  type: string
              required:
              - file
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_ImportCSVOperation'
          description: Accepted. A job to import glossary terms via csv has been accepted.
        "400":
          content: {}
          description: If csv file is not valid
        "404":
          content: {}
          description: If glossary GUID is invalid.
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_ImportGlossaryTermsViaCSVByGlossaryName:
          $ref: ./examples/GlossaryREST_GetImportCSVOperationStatus.json
      x-contentType: multipart/form-data
      x-accepts: application/json
  /atlas/v2/glossary/terms/import/{operationGuid}:
    get:
      description: Get the status of import csv operation
      operationId: GlossaryREST_GetImportCSVOperationStatus
      parameters:
      - description: The globally unique identifier for async operation/job`.
        in: path
        name: operationGuid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_ImportCSVOperation'
          description: OK. Return the status of import csv operation.
        "404":
          content: {}
          description: If operation GUID is invalid.
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_GetImportCSVOperationStatus:
          $ref: ./examples/GlossaryREST_GetImportCSVOperationStatus.json
      x-accepts: application/json
  /atlas/v2/glossary/{glossaryGuid}/terms/export:
    post:
      description: Export Glossary Terms as csv file
      operationId: GlossaryREST_ExportGlossaryTermsAsCSV
      parameters:
      - description: The globally unique identifier for glossary.
        in: path
        name: glossaryGuid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      requestBody:
        content:
          application/json:
            schema:
              description: An array of term guids.
              items:
                $ref: '#/components/schemas/json_TermGuid'
              type: array
        description: An array of term guids.
        required: true
      responses:
        "200":
          content: {}
          description: OK. A csv file contains terms with given term ids will be generated.
        "400":
          content: {}
          description: If term ids is not belong to the glossary guid
        "404":
          content: {}
          description: If glossary GUID is invalid.
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_ExportGlossaryTermsAsCSV:
          $ref: ./examples/GlossaryREST_ExportGlossaryTermsAsCSV.json
      x-codegen-request-body-name: termGuids
      x-contentType: application/json
      x-accepts: application/json
  /atlas/v2/glossary/name/{glossaryName}/terms:
    get:
      description: Gets terms by glossary name.
      operationId: GlossaryREST_GetTermsByGlossaryName
      parameters:
      - description: The name of the glossary.
        in: path
        name: glossaryName
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The page size - by default there is no paging.
        in: query
        name: limit
        schema:
          format: int32
          type: integer
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The offset for pagination purpose.
        in: query
        name: offset
        schema:
          format: int32
          type: integer
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                description: An array of glossary terms for the given glossary or
                  an empty list.
                items:
                  $ref: '#/components/schemas/json_AtlasGlossaryTerm'
                type: array
          description: OK. An array of glossary terms for the given glossary or an
            empty list.
      tags:
      - GlossaryREST
      x-ms-examples:
        GlossaryREST_GetTermsByGlossaryName:
          $ref: ./examples/GlossaryREST_GetTermsByGlossaryName.json
      x-accepts: application/json
  /atlas/v2/search/advanced:
    post:
      description: Gets data using advanced search.
      operationId: DiscoveryREST_SearchAdvanced
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/json_SearchRequest'
        description: An object specifying the search criteria.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AdvancedSearchResult'
          description: OK. On successful lookup of the advanced search.
        "400":
          content: {}
          description: Illegal argument exception thrown.
      tags:
      - DiscoveryREST
      x-ms-examples:
        DiscoveryREST_SearchAdvanced:
          $ref: ./examples/DiscoveryREST_SearchAdvanced.json
        DiscoveryREST_SearchAdvanced_And:
          $ref: ./examples/DiscoveryREST_SearchAdvanced_And.json
        DiscoveryREST_SearchAdvanced_Not:
          $ref: ./examples/DiscoveryREST_SearchAdvanced_Not.json
        DiscoveryREST_SearchAdvanced_AndOrNested:
          $ref: ./examples/DiscoveryREST_SearchAdvanced_AndOrNested.json
        DiscoveryREST_SearchAdvanced_Attribute:
          $ref: ./examples/DiscoveryREST_SearchAdvanced_Attribute.json
        DiscoveryREST_SearchAdvanced_Classification:
          $ref: ./examples/DiscoveryREST_SearchAdvanced_Classification.json
        DiscoveryREST_SearchAdvanced_FileExtention:
          $ref: ./examples/DiscoveryREST_SearchAdvanced_FileExtension.json
        DiscoveryREST_SearchAdvanced_Id:
          $ref: ./examples/DiscoveryREST_SearchAdvanced_Id.json
        DiscoveryREST_SearchAdvanced_Type:
          $ref: ./examples/DiscoveryREST_SearchAdvanced_Type.json
        DiscoveryREST_SearchAdvanced_AssetType:
          $ref: ./examples/DiscoveryREST_SearchAdvanced_AssetType.json
        DiscoveryREST_SearchAdvanced_Term:
          $ref: ./examples/DiscoveryREST_SearchAdvanced_Term.json
        DiscoveryREST_SearchAdvanced_TermOfGlossary:
          $ref: ./examples/DiscoveryREST_SearchAdvanced_TermOfGlossary.json
        DiscoveryREST_SearchAdvanced_Facet:
          $ref: ./examples/DiscoveryREST_SearchAdvanced_Facet.json
        DiscoveryREST_SearchAdvanced_Taxonomy:
          $ref: ./examples/DiscoveryREST_SearchAdvanced_Taxonomy.json
      x-codegen-request-body-name: searchRequest
      x-contentType: application/json
      x-accepts: application/json
  /atlas/v2/search/suggest:
    post:
      description: Gets search suggestions by query criteria.
      operationId: DiscoveryREST_Suggest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/json_SuggestRequest'
        description: An object specifying the suggest criteria.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_SuggestResult'
          description: OK. On successful lookup of the suggestions.
        "400":
          content: {}
          description: Illegal argument exception thrown.
      tags:
      - DiscoveryREST
      x-ms-examples:
        DiscoveryREST_Suggest:
          $ref: ./examples/DiscoveryREST_Suggest.json
      x-codegen-request-body-name: suggestRequest
      x-contentType: application/json
      x-accepts: application/json
  /atlas/v2/search/autocomplete:
    get:
      description: Gets auto complete options.
      operationId: DiscoveryREST_AutoComplete
      parameters:
      - description: The keyword to get auto complete.
        in: query
        name: keyword
        required: true
        schema:
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: Limits the result set to only include the specified number of
          entries.
        in: query
        name: limit
        schema:
          format: int32
          type: integer
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AutocompleteResult'
          description: OK. On successful lookup of the auto complete options.
        "400":
          content: {}
          description: 'Illegal argument: Keyword is required'
      tags:
      - DiscoveryREST
      x-ms-examples:
        DiscoveryREST_AutoComplete:
          $ref: ./examples/DiscoveryREST_AutoComplete.json
      x-accepts: application/json
  /atlas/v2/lineage/{guid}:
    get:
      description: Gets lineage info about the specified entity by GUID.
      operationId: LineageREST_GetLineageGraph
      parameters:
      - description: The globally unique identifier of the entity.
        in: path
        name: guid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The number of hops for lineage.
        in: query
        name: depth
        schema:
          default: 3
          format: int32
          type: integer
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The number of max expanding width in lineage.
        in: query
        name: width
        schema:
          default: 10
          format: int32
          type: integer
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The direction of the lineage, which could be INPUT, OUTPUT or
          BOTH.
        in: query
        name: direction
        required: true
        schema:
          enum:
          - BOTH
          - INPUT
          - OUTPUT
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: True to include the parent chain in the response.
        in: query
        name: includeParent
        schema:
          type: boolean
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: True to include derived lineage in the response
        in: query
        name: getDerivedLineage
        schema:
          type: boolean
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasLineageInfo'
          description: OK. If Lineage exists for the given entity.
        "400":
          content: {}
          description: Bad query parameters.
        "404":
          content: {}
          description: If no lineage is found for the given entity.
      tags:
      - LineageREST
      x-ms-examples:
        LineageREST_GetLineageGraph:
          $ref: ./examples/LineageREST_GetLineageGraph.json
      x-accepts: application/json
  /atlas/v2/lineage/{guid}/next/:
    get:
      description: Returns immediate next level lineage info about entity with pagination
      operationId: LineageREST_NextLevelLineage
      parameters:
      - description: The globally unique identifier of the entity.
        in: path
        name: guid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The direction of the lineage, which could be INPUT, OUTPUT or
          BOTH.
        in: query
        name: direction
        required: true
        schema:
          enum:
          - BOTH
          - INPUT
          - OUTPUT
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: True to include derived lineage in the response
        in: query
        name: getDerivedLineage
        schema:
          type: boolean
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The offset for pagination purpose.
        in: query
        name: offset
        schema:
          format: int32
          type: integer
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: The page size - by default there is no paging.
        in: query
        name: limit
        schema:
          format: int32
          type: integer
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasLineageInfo'
          description: OK. If Lineage exists for the given entity.
        "400":
          content: {}
          description: Bad query parameters.
        "404":
          content: {}
          description: If no lineage is found for the given entity.
      tags:
      - LineageREST
      x-ms-examples:
        LineageREST_NextLevelLineage:
          $ref: ./examples/LineageREST_NextLevelLineage.json
      x-accepts: application/json
  /atlas/v2/relationship:
    post:
      description: Creates a new relationship between entities.
      operationId: RelationshipREST_Create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/json_AtlasRelationship'
        description: The AtlasRelationship object containing the information for the
          relationship to be created.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasRelationship'
          description: OK. The relationship is created.
      tags:
      - RelationshipREST
      x-ms-examples:
        RelationshipREST_Create:
          $ref: ./examples/RelationshipREST_Create.json
      x-codegen-request-body-name: relationship
      x-contentType: application/json
      x-accepts: application/json
    put:
      description: Updates an existing relationship between entities.
      operationId: RelationshipREST_Update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/json_AtlasRelationship'
        description: The AtlasRelationship object containing the information for the
          relationship to be created.
        required: true
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasRelationship'
          description: OK. The relationship is updated.
      tags:
      - RelationshipREST
      x-ms-examples:
        RelationshipREST_Update:
          $ref: ./examples/RelationshipREST_Update.json
      x-codegen-request-body-name: relationship
      x-contentType: application/json
      x-accepts: application/json
  /atlas/v2/relationship/guid/{guid}:
    delete:
      description: Deletes a relationship between entities by its GUID.
      operationId: RelationshipREST_DeleteById
      parameters:
      - description: The globally unique identifier of the relationship.
        in: path
        name: guid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "204":
          content: {}
          description: OK. The relationship is deleted.
      tags:
      - RelationshipREST
      x-ms-examples:
        RelationshipREST_DeleteById:
          $ref: ./examples/RelationshipREST_DeleteById.json
      x-accepts: application/json
    get:
      description: Gets relationship information between entities by its GUID.
      operationId: RelationshipREST_GetById2
      parameters:
      - description: The globally unique identifier of the relationship.
        in: path
        name: guid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: Limits whether includes extended information.
        in: query
        name: extendedInfo
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasRelationshipWithExtInfo'
          description: OK.
      tags:
      - RelationshipREST
      x-ms-examples:
        RelationshipREST_GetById2:
          $ref: ./examples/RelationshipREST_GetById2.json
      x-accepts: application/json
  /atlas/v2/types/classificationdef/guid/{guid}:
    get:
      description: Gets the classification definition for the given GUID.
      operationId: TypesREST_GetClassificationDefByGuid
      parameters:
      - description: The globally unique identifier of the classification.
        in: path
        name: guid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasClassificationDef'
          description: OK. On successful lookup of the the classification definition
            by its GUID.
        "404":
          content: {}
          description: On failed lookup for the given GUID.
      tags:
      - TypesREST
      x-ms-examples:
        TypesREST_GetClassificationDefByGuid:
          $ref: ./examples/TypesREST_GetClassificationDefByGuid.json
      x-accepts: application/json
  /atlas/v2/types/classificationdef/name/{name}:
    get:
      description: Gets the classification definition by its name (unique).
      operationId: TypesREST_GetClassificationDefByName
      parameters:
      - description: The name of the classification.
        in: path
        name: name
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasClassificationDef'
          description: OK. On successful lookup of the the classification definition
            by its name.
        "404":
          content: {}
          description: On failed lookup for the given name.
      tags:
      - TypesREST
      x-ms-examples:
        TypesREST_GetClassificationDefByName:
          $ref: ./examples/TypesREST_GetClassificationDefByName.json
      x-accepts: application/json
  /atlas/v2/types/entitydef/guid/{guid}:
    get:
      description: Gets the Entity definition for the given GUID.
      operationId: TypesREST_GetEntityDefByGuid
      parameters:
      - description: The globally unique identifier of the entity.
        in: path
        name: guid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasEntityDef'
          description: OK. On successful lookup of the the entity definition by its
            GUID.
        "404":
          content: {}
          description: On Failed lookup for the given GUID.
      tags:
      - TypesREST
      x-ms-examples:
        TypesREST_GetEntityDefByGuid:
          $ref: ./examples/TypesREST_GetEntityDefByGuid.json
      x-accepts: application/json
  /atlas/v2/types/entitydef/name/{name}:
    get:
      description: Gets the entity definition by its name (unique).
      operationId: TypesREST_GetEntityDefByName
      parameters:
      - description: The name of the entity.
        in: path
        name: name
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasEntityDef'
          description: OK. On successful lookup of the the entity definition by its
            name.
        "404":
          content: {}
          description: On failed lookup for the given name.
      tags:
      - TypesREST
      x-ms-examples:
        TypesREST_GetEntityDefByName:
          $ref: ./examples/TypesREST_GetEntityDefByName.json
      x-accepts: application/json
  /atlas/v2/types/termtemplatedef/guid/{guid}:
    get:
      description: Gets the term template definition for the given GUID.
      operationId: TypesREST_GetTermTemplateDefByGuid
      parameters:
      - description: The globally unique identifier of the term template.
        in: path
        name: guid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_TermTemplateDef'
          description: OK. On successful lookup of the the term template definition
            by its GUID.
        "404":
          content: {}
          description: On failed lookup for the given GUID.
      tags:
      - TypesREST
      x-ms-examples:
        TypesREST_GetTermTemplateDefByGuid:
          $ref: ./examples/TypesREST_GetTermTemplateDefByGuid.json
      x-accepts: application/json
  /atlas/v2/types/termtemplatedef/name/{name}:
    get:
      description: Gets the term template definition by its name (unique).
      operationId: TypesREST_GetTermTemplateDefByName
      parameters:
      - description: The name of the term template.
        in: path
        name: name
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_TermTemplateDef'
          description: OK. On successful lookup of the the term template definition
            by its name.
        "404":
          content: {}
          description: On failed lookup for the given name.
      tags:
      - TypesREST
      x-ms-examples:
        TypesREST_GetTermTemplateDefByName:
          $ref: ./examples/TypesREST_GetTermTemplateDefByName.json
      x-accepts: application/json
  /atlas/v2/types/enumdef/guid/{guid}:
    get:
      description: Gets the enum definition for the given GUID.
      operationId: TypesREST_GetEnumDefByGuid
      parameters:
      - description: The globally unique identifier of the enum.
        in: path
        name: guid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasEnumDef'
          description: OK. On successful lookup of the the enum definition by its
            GUID.
        "404":
          content: {}
          description: On failed lookup for the given GUID.
      tags:
      - TypesREST
      x-ms-examples:
        TypesREST_GetEnumDefByGuid:
          $ref: ./examples/TypesREST_GetEnumDefByGuid.json
      x-accepts: application/json
  /atlas/v2/types/enumdef/name/{name}:
    get:
      description: Gets the enum definition by its name (unique).
      operationId: TypesREST_GetEnumDefByName
      parameters:
      - description: The name of the enum.
        in: path
        name: name
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasEnumDef'
          description: OK. On successful lookup of the the enum definition by its
            name.
        "404":
          content: {}
          description: On failed lookup for the given name.
      tags:
      - TypesREST
      x-ms-examples:
        TypesREST_GetEnumDefByName:
          $ref: ./examples/TypesREST_GetEnumDefByName.json
      x-accepts: application/json
  /atlas/v2/types/relationshipdef/guid/{guid}:
    get:
      description: Gets the relationship definition for the given GUID.
      operationId: TypesREST_GetRelationshipDefByGuid
      parameters:
      - description: The globally unique identifier of the relationship.
        in: path
        name: guid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasRelationshipDef'
          description: OK. On successful lookup of the the relationship definition
            by its GUID.
        "404":
          content: {}
          description: On failed lookup for the given GUID.
      tags:
      - TypesREST
      x-ms-examples:
        TypesREST_GetRelationshipDefByGuid:
          $ref: ./examples/TypesREST_GetRelationshipDefByGuid.json
      x-accepts: application/json
  /atlas/v2/types/relationshipdef/name/{name}:
    get:
      description: Gets the relationship definition by its name (unique).
      operationId: TypesREST_GetRelationshipDefByName
      parameters:
      - description: The name of the relationship.
        in: path
        name: name
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasRelationshipDef'
          description: OK. On successful lookup of the the relationship definition
            by its name.
        "404":
          content: {}
          description: On failed lookup for the given name.
      tags:
      - TypesREST
      x-ms-examples:
        TypesREST_GetRelationshipDefByName:
          $ref: ./examples/TypesREST_GetRelationshipDefByName.json
      x-accepts: application/json
  /atlas/v2/types/structdef/guid/{guid}:
    get:
      description: Gets the struct definition for the given GUID.
      operationId: TypesREST_GetStructDefByGuid
      parameters:
      - description: The globally unique identifier of the struct.
        in: path
        name: guid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasStructDef'
          description: OK. On successful lookup of the the struct definition by its
            GUID.
        "404":
          content: {}
          description: On failed lookup for the given GUID.
      tags:
      - TypesREST
      x-ms-examples:
        TypesREST_GetStructDefByGuid:
          $ref: ./examples/TypesREST_GetStructDefByGuid.json
      x-accepts: application/json
  /atlas/v2/types/structdef/name/{name}:
    get:
      description: Gets the struct definition by its name (unique).
      operationId: TypesREST_GetStructDefByName
      parameters:
      - description: The name of the struct.
        in: path
        name: name
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasStructDef'
          description: OK. On successful lookup of the the struct definition by its
            name.
        "404":
          content: {}
          description: On failed lookup for the given name.
      tags:
      - TypesREST
      x-ms-examples:
        TypesREST_GetStructDefByName:
          $ref: ./examples/TypesREST_GetStructDefByName.json
      x-accepts: application/json
  /atlas/v2/types/typedef/guid/{guid}:
    get:
      description: Gets the type definition for the given GUID.
      operationId: TypesREST_GetTypeDefByGuid
      parameters:
      - description: The globally unique identifier of the type.
        in: path
        name: guid
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasBaseTypeDef'
          description: OK. On successful lookup of the the type definition by its
            GUID.
        "404":
          content: {}
          description: On failed lookup for the given GUID.
      tags:
      - TypesREST
      x-ms-examples:
        TypesREST_GetTypeDefByGuid:
          $ref: ./examples/TypesREST_GetTypeDefByGuid.json
      x-accepts: application/json
  /atlas/v2/types/typedef/name/{name}:
    delete:
      description: Delete API for type identified by its name.
      operationId: TypesREST_deleteAtlasTypeByName
      parameters:
      - description: The name of the type.
        in: path
        name: name
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "204":
          content: {}
          description: On successful deletion of the requested type definitions
        "400":
          content: {}
          description: On validation failure for any type definitions
      summary: Delete API for type identified by its name.
      tags:
      - TypesREST
      x-accepts: application/json
    get:
      description: Gets the type definition by its name (unique).
      operationId: TypesREST_GetTypeDefByName
      parameters:
      - description: The name of the type.
        in: path
        name: name
        required: true
        schema:
          maxLength: 4096
          minLength: 1
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasBaseTypeDef'
          description: OK. On successful lookup of the the type definition by its
            name.
        "404":
          content: {}
          description: On failed lookup for the given name.
      tags:
      - TypesREST
      x-ms-examples:
        TypesREST_GetTypeDefByName:
          $ref: ./examples/TypesREST_GetTypeDefByName.json
      x-accepts: application/json
  /atlas/v2/types/typedefs:
    delete:
      description: Deletes API for all types in bulk.
      operationId: TypesREST_DeleteAtlasTypeDefs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/json_AtlasTypesDef'
        description: A composite object that captures all types to be deleted
        required: true
      responses:
        "204":
          content: {}
          description: OK. On successful deletion of the requested type definitions.
        "400":
          content: {}
          description: On validation failure for any type definitions.
      tags:
      - TypesREST
      x-ms-examples:
        TypesREST_DeleteAtlasTypeDefs:
          $ref: ./examples/TypesREST_DeleteAtlasTypeDefs.json
      x-codegen-request-body-name: typesDef
      x-contentType: application/json
      x-accepts: application/json
    get:
      description: Gets all type definitions in Atlas in bulk.
      operationId: TypesREST_GetAllTypeDefs
      parameters:
      - description: |-
          Whether include termtemplatedef when return all typedefs.
          This is always true when search filter type=term_template
        in: query
        name: includeTermTemplate
        schema:
          default: false
          type: boolean
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: Typedef name as search filter when get typedefs.
        in: query
        name: type
        schema:
          default: "false"
          enum:
          - enum
          - entity
          - classification
          - relationship
          - struct
          - term_template
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasTypesDef'
          description: OK. AtlasTypesDef with type definitions matching the search
            criteria or else returns empty list of type definitions.
      tags:
      - TypesREST
      x-ms-examples:
        TypesREST_GetAllTypeDefs:
          $ref: ./examples/TypesREST_GetAllTypeDefs.json
        TypesREST_GetAllTermTemplateDef:
          $ref: ./examples/TypesREST_GetAllTermTemplateDef.json
        TypesREST_GetAllEnumDef:
          $ref: ./examples/TypesREST_GetAllEnumDef.json
      x-accepts: application/json
    post:
      description: |-
        Creates all atlas type definitions in bulk, only new definitions will be created.
        Any changes to the existing definitions will be discarded.
      operationId: TypesREST_CreateAtlasTypeDefs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/json_AtlasTypesDef'
        description: A composite wrapper object with corresponding lists of the type
          definition.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasTypesDef'
          description: OK. On successful update of requested type definitions.
        "400":
          content: {}
          description: On validation failure for any type definitions.
      tags:
      - TypesREST
      x-ms-examples:
        TypesREST_CreateAtlasTypeDefs:
          $ref: ./examples/TypesREST_CreateAtlasTypeDefs.json
      x-codegen-request-body-name: typesDef
      x-contentType: application/json
      x-accepts: application/json
    put:
      description: Updates all types in bulk, changes detected in the type definitions
        would be persisted.
      operationId: TypesREST_UpdateAtlasTypeDefs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/json_AtlasTypesDef'
        description: A composite object that captures all type definition changes.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_AtlasTypesDef'
          description: OK. On successful update of requested type definitions.
        "400":
          content: {}
          description: On validation failure for any type definitions.
      tags:
      - TypesREST
      x-ms-examples:
        TypesREST_UpdateAtlasTypeDefs:
          $ref: ./examples/TypesREST_UpdateAtlasTypeDefs.json
      x-codegen-request-body-name: typesDef
      x-contentType: application/json
      x-accepts: application/json
  /atlas/v2/types/typedefs/headers:
    get:
      description: Lists all type definitions returned as a list of minimal information
        header.
      operationId: TypesREST_GetTypeDefHeaders
      parameters:
      - description: |-
          Whether include termtemplatedef when return all typedefs.
          This is always true when search filter type=term_template
        in: query
        name: includeTermTemplate
        schema:
          default: false
          type: boolean
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      - description: Typedef name as search filter when get typedefs.
        in: query
        name: type
        schema:
          default: "false"
          enum:
          - enum
          - entity
          - classification
          - relationship
          - struct
          - term_template
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      responses:
        "200":
          content:
            application/json:
              schema:
                description: |-
                  An array of AtlasTypeDefHeader matching the search criteria
                  or an empty list if no match.
                items:
                  $ref: '#/components/schemas/json_AtlasTypeDefHeader'
                type: array
          description: |-
            An array of AtlasTypeDefHeader matching the search criteria
            or an empty list if no match.
      tags:
      - TypesREST
      x-ms-examples:
        TypesREST_GetTypeDefHeaders:
          $ref: ./examples/TypesREST_GetTypeDefHeaders.json
      x-accepts: application/json
  /atlas/v2/types/statistics:
    get:
      description: Gets type statistics.
      operationId: TypesREST_GetTypeStatistics
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/json_TypeStatistics'
          description: OK. On successful retrieve types and corresponding statistics.
      tags:
      - TypesREST
      x-ms-examples:
        TypesREST_GetMetrics:
          $ref: ./examples/TypesREST_GetTypeStatistics.json
      x-accepts: application/json
components:
  parameters:
    guid:
      description: The globally unique identifier of the entity.
      in: path
      name: guid
      required: true
      schema:
        maxLength: 4096
        minLength: 1
        type: string
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    classificationName:
      description: The name of the classification.
      in: path
      name: classificationName
      required: true
      schema:
        maxLength: 4096
        minLength: 1
        type: string
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    typeName:
      description: The name of the type.
      in: path
      name: typeName
      required: true
      schema:
        maxLength: 4096
        minLength: 1
        type: string
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    categoryGuid:
      description: The globally unique identifier of the category.
      in: path
      name: categoryGuid
      required: true
      schema:
        maxLength: 4096
        minLength: 1
        type: string
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    limit:
      description: The page size - by default there is no paging.
      in: query
      name: limit
      schema:
        format: int32
        type: integer
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    offset:
      description: The offset for pagination purpose.
      in: query
      name: offset
      schema:
        format: int32
        type: integer
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    sort:
      description: The sort order, ASC (default) or DESC.
      in: query
      name: sort
      schema:
        default: ASC
        type: string
    termGuid:
      description: The globally unique identifier for glossary term.
      in: path
      name: termGuid
      required: true
      schema:
        maxLength: 4096
        minLength: 1
        type: string
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    glossaryGuid:
      description: The globally unique identifier for glossary.
      in: path
      name: glossaryGuid
      required: true
      schema:
        maxLength: 4096
        minLength: 1
        type: string
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    operationGuid:
      description: The globally unique identifier for async operation/job`.
      in: path
      name: operationGuid
      required: true
      schema:
        maxLength: 4096
        minLength: 1
        type: string
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    glossaryName:
      description: The name of the glossary.
      in: path
      name: glossaryName
      required: true
      schema:
        maxLength: 4096
        minLength: 1
        type: string
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    searchLimit:
      description: Limits the result set to only include the specified number of entries.
      in: query
      name: limit
      schema:
        format: int32
        type: integer
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    searchKeyword:
      description: The keyword to get auto complete.
      in: query
      name: keyword
      required: true
      schema:
        type: string
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    depth:
      description: The number of hops for lineage.
      in: query
      name: depth
      schema:
        default: 3
        format: int32
        type: integer
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    width:
      description: The number of max expanding width in lineage.
      in: query
      name: width
      schema:
        default: 10
        format: int32
        type: integer
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    direction:
      description: The direction of the lineage, which could be INPUT, OUTPUT or BOTH.
      in: query
      name: direction
      required: true
      schema:
        enum:
        - BOTH
        - INPUT
        - OUTPUT
        type: string
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    includeParent:
      description: True to include the parent chain in the response.
      in: query
      name: includeParent
      schema:
        type: boolean
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    getDerivedLineage:
      description: True to include derived lineage in the response
      in: query
      name: getDerivedLineage
      schema:
        type: boolean
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    extendedInfo:
      description: Limits whether includes extended information.
      in: query
      name: extendedInfo
      schema:
        type: boolean
    relationshipRestRelationshipGuid:
      description: The globally unique identifier of the relationship.
      in: path
      name: guid
      required: true
      schema:
        maxLength: 4096
        minLength: 1
        type: string
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    typesRestClassificationGuid:
      description: The globally unique identifier of the classification.
      in: path
      name: guid
      required: true
      schema:
        maxLength: 4096
        minLength: 1
        type: string
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    typesRestClassificationName:
      description: The name of the classification.
      in: path
      name: name
      required: true
      schema:
        maxLength: 4096
        minLength: 1
        type: string
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    typesRestEntityGuid:
      description: The globally unique identifier of the entity.
      in: path
      name: guid
      required: true
      schema:
        maxLength: 4096
        minLength: 1
        type: string
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    typesRestEntityName:
      description: The name of the entity.
      in: path
      name: name
      required: true
      schema:
        maxLength: 4096
        minLength: 1
        type: string
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    typesRestTermTemplateGuid:
      description: The globally unique identifier of the term template.
      in: path
      name: guid
      required: true
      schema:
        maxLength: 4096
        minLength: 1
        type: string
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    typesRestTermTemplateName:
      description: The name of the term template.
      in: path
      name: name
      required: true
      schema:
        maxLength: 4096
        minLength: 1
        type: string
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    typesRestEnumGuid:
      description: The globally unique identifier of the enum.
      in: path
      name: guid
      required: true
      schema:
        maxLength: 4096
        minLength: 1
        type: string
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    typesRestEnumName:
      description: The name of the enum.
      in: path
      name: name
      required: true
      schema:
        maxLength: 4096
        minLength: 1
        type: string
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    typesRestRelationshipGuid:
      description: The globally unique identifier of the relationship.
      in: path
      name: guid
      required: true
      schema:
        maxLength: 4096
        minLength: 1
        type: string
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    typesRestRelationshipName:
      description: The name of the relationship.
      in: path
      name: name
      required: true
      schema:
        maxLength: 4096
        minLength: 1
        type: string
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    typesRestStructGuid:
      description: The globally unique identifier of the struct.
      in: path
      name: guid
      required: true
      schema:
        maxLength: 4096
        minLength: 1
        type: string
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    typesRestStructName:
      description: The name of the struct.
      in: path
      name: name
      required: true
      schema:
        maxLength: 4096
        minLength: 1
        type: string
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    typesRestTypeGuid:
      description: The globally unique identifier of the type.
      in: path
      name: guid
      required: true
      schema:
        maxLength: 4096
        minLength: 1
        type: string
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    typesRestTypeName:
      description: The name of the type.
      in: path
      name: name
      required: true
      schema:
        maxLength: 4096
        minLength: 1
        type: string
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    userId:
      description: The user ID.
      in: path
      name: userId
      required: true
      schema:
        type: string
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    principalId:
      description: The principal ID.
      in: path
      name: principalId
      required: true
      schema:
        type: string
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    minExtInfo:
      description: Whether to return minimal information for referred entities.
      in: query
      name: minExtInfo
      schema:
        default: false
        type: boolean
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    ignoreRelationships:
      description: Whether to ignore relationship attributes.
      in: query
      name: ignoreRelationships
      schema:
        default: false
        type: boolean
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    includeTermTemplate:
      description: |-
        Whether include termtemplatedef when return all typedefs.
        This is always true when search filter type=term_template
      in: query
      name: includeTermTemplate
      schema:
        default: false
        type: boolean
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    type:
      description: Typedef name as search filter when get typedefs.
      in: query
      name: type
      schema:
        default: "false"
        enum:
        - enum
        - entity
        - classification
        - relationship
        - struct
        - term_template
        type: string
        x-ms-parameter-location: method
      x-ms-parameter-location: method
  schemas:
    json_AtlasAttributeDef:
      description: class that captures details of a struct-attribute.
      properties:
        cardinality:
          $ref: '#/components/schemas/json_Cardinality'
        constraints:
          description: An array of constraints.
          items:
            $ref: '#/components/schemas/json_AtlasConstraintDef'
          type: array
        defaultValue:
          description: The default value of the attribute.
          type: string
        description:
          description: The description of the attribute.
          type: string
        includeInNotification:
          description: Determines if it is included in notification.
          type: boolean
        isIndexable:
          description: Determines if it is indexable.
          type: boolean
        isOptional:
          description: Determines if it is optional.
          type: boolean
        isUnique:
          description: Determines if it unique.
          type: boolean
        name:
          description: The name of the attribute.
          type: string
        options:
          additionalProperties:
            type: string
          description: The options for the attribute.
          type: object
        typeName:
          description: The name of the type.
          type: string
        valuesMaxCount:
          description: The maximum count of the values.
          format: int32
          type: integer
        valuesMinCount:
          description: The minimum count of the values.
          format: int32
          type: integer
      title: AtlasAttributeDef
      type: object
    json_AtlasBaseModelObject:
      description: The base model object.
      properties:
        guid:
          description: The GUID of the object.
          type: string
      title: AtlasBaseModelObject
      type: object
    json_AtlasBaseTypeDef:
      description: Base class that captures common-attributes for all Atlas types.
      example:
        serviceType: serviceType
        updatedBy: updatedBy
        description: description
        updateTime: 3.616076749251911
        version: 2.027123023002322
        lastModifiedTS: lastModifiedTS
        typeVersion: typeVersion
        createTime: 0.8008281904610115
        createdBy: createdBy
        name: name
        options:
          key: options
        dateFormatter:
          calendar: 6.027456183070403
          numberFormat:
            parseIntegerOnly: true
            groupingUsed: true
            availableLocales:
            - availableLocales
            - availableLocales
            maximumIntegerDigits: 5
            maximumFractionDigits: 1
            minimumFractionDigits: 5
            currency: currency
            minimumIntegerDigits: 2
          timeZone:
            DSTSavings: 7
            displayName: displayName
            rawOffset: 9
            availableIDs:
            - availableIDs
            - availableIDs
            ID: ID
          lenient: true
          availableLocales:
          - availableLocales
          - availableLocales
        guid: guid
      properties:
        category:
          $ref: '#/components/schemas/json_TypeCategory'
        createTime:
          description: The created time of the record.
          type: number
        createdBy:
          description: The user who created the record.
          type: string
        dateFormatter:
          $ref: '#/components/schemas/json_DateFormat'
        description:
          description: The description of the type definition.
          type: string
        guid:
          description: The GUID of the type definition.
          type: string
        name:
          description: The name of the type definition.
          type: string
        options:
          additionalProperties:
            type: string
          description: The options for the type definition.
          type: object
        serviceType:
          description: The service type.
          type: string
        typeVersion:
          description: The version of the type.
          type: string
        updateTime:
          description: The update time of the record.
          type: number
        updatedBy:
          description: The user who updated the record.
          type: string
        version:
          description: The version of the record.
          type: number
        lastModifiedTS:
          description: ETag for concurrency control.
          title: lastModifiedTS
          type: string
      title: AtlasBaseTypeDef
      type: object
    json_AtlasClassification:
      allOf:
      - $ref: '#/components/schemas/json_AtlasStruct'
      - $ref: '#/components/schemas/json_AtlasClassification_allOf'
      description: An instance of a classification; it doesn't have an identity, this
        object exists only when associated with an entity.
      title: AtlasClassification
    json_AtlasClassificationDef:
      allOf:
      - $ref: '#/components/schemas/json_AtlasStructDef'
      - $ref: '#/components/schemas/json_AtlasClassificationDef_allOf'
      description: class that captures details of a classification-type.
      title: AtlasClassificationDef
    json_AtlasClassifications:
      allOf:
      - $ref: '#/components/schemas/json_PList'
      description: REST serialization friendly list.
      title: AtlasClassifications
    json_AtlasConstraintDef:
      description: class that captures details of a constraint.
      properties:
        params:
          additionalProperties:
            properties: {}
            type: object
          description: The parameters of the constraint definition.
          type: object
        type:
          description: The type of the constraint.
          type: string
      title: AtlasConstraintDef
      type: object
    json_AtlasEntitiesWithExtInfo:
      allOf:
      - $ref: '#/components/schemas/json_AtlasEntityExtInfo'
      - $ref: '#/components/schemas/json_AtlasEntitiesWithExtInfo_allOf'
      description: An instance of an entity along with extended info - like hive_table,
        hive_database.
      title: AtlasEntitiesWithExtInfo
    json_AtlasEntity:
      allOf:
      - $ref: '#/components/schemas/json_AtlasStruct'
      - $ref: '#/components/schemas/json_AtlasEntity_allOf'
      description: An instance of an entity - like hive_table, hive_database.
      title: AtlasEntity
    json_TermTemplateDef:
      allOf:
      - $ref: '#/components/schemas/json_AtlasStructDef'
      description: term template definition for glossary term.
      title: TermTemplateDef
    json_AtlasEntityDef:
      allOf:
      - $ref: '#/components/schemas/json_AtlasStructDef'
      - $ref: '#/components/schemas/json_AtlasEntityDef_allOf'
      description: class that captures details of a entity-type.
      title: AtlasEntityDef
    json_AtlasEntityExtInfo:
      description: An instance of an entity along with extended info - like hive_table,
        hive_database.
      properties:
        referredEntities:
          additionalProperties:
            $ref: '#/components/schemas/json_AtlasEntity'
          description: The referred entities.
          type: object
      title: AtlasEntityExtInfo
      type: object
    json_AtlasEntityHeader:
      allOf:
      - $ref: '#/components/schemas/json_AtlasStruct'
      - $ref: '#/components/schemas/json_AtlasEntityHeader_allOf'
      description: An instance of an entity - like hive_table, hive_database.
      title: AtlasEntityHeader
    json_AtlasEntityHeaders:
      description: An instance of an entity header.
      properties:
        guidHeaderMap:
          additionalProperties:
            $ref: '#/components/schemas/json_AtlasEntityHeader'
          description: ""
          type: object
      title: AtlasEntityHeaders
      type: object
    json_AtlasEntityWithExtInfo:
      allOf:
      - $ref: '#/components/schemas/json_AtlasEntityExtInfo'
      - $ref: '#/components/schemas/json_AtlasEntityWithExtInfo_allOf'
      description: An instance of an entity along with extended info - like hive_table,
        hive_database.
      title: AtlasEntityWithExtInfo
    json_AtlasEnumDef:
      allOf:
      - $ref: '#/components/schemas/json_AtlasBaseTypeDef'
      - $ref: '#/components/schemas/json_AtlasEnumDef_allOf'
      description: class that captures details of an enum-type.
      title: AtlasEnumDef
    json_AtlasEnumElementDef:
      description: class that captures details of an enum-element.
      properties:
        description:
          description: The description of the enum element definition.
          type: string
        ordinal:
          description: The ordinal of the enum element definition.
          type: number
        value:
          description: The value of the enum element definition.
          type: string
      title: AtlasEnumElementDef
      type: object
    json_AtlasGlossary:
      allOf:
      - $ref: '#/components/schemas/json_AtlasGlossaryBaseObject'
      - $ref: '#/components/schemas/json_AtlasGlossary_allOf'
      description: The glossary object.
      title: AtlasGlossary
    json_AtlasGlossaryBaseObject:
      allOf:
      - $ref: '#/components/schemas/json_AtlasBaseModelObject'
      - $ref: '#/components/schemas/json_AtlasGlossaryBaseObject_allOf'
      description: The glossary base object.
      title: AtlasGlossaryBaseObject
    json_AtlasGlossaryCategory:
      allOf:
      - $ref: '#/components/schemas/json_AtlasGlossaryBaseObject'
      - $ref: '#/components/schemas/json_AtlasGlossaryCategory_allOf'
      description: The glossary category.
      title: AtlasGlossaryCategory
    json_AtlasGlossaryExtInfo:
      allOf:
      - $ref: '#/components/schemas/json_AtlasGlossary'
      - $ref: '#/components/schemas/json_AtlasGlossaryExtInfo_allOf'
      description: The extended information of glossary.
      title: AtlasGlossaryExtInfo
    json_AtlasGlossaryHeader:
      description: The glossary header with basic information.
      properties:
        displayText:
          description: The display text.
          type: string
        glossaryGuid:
          description: The GUID of the glossary.
          type: string
        relationGuid:
          description: The GUID of the relationship.
          type: string
      title: AtlasGlossaryHeader
      type: object
    json_AtlasGlossaryTerm:
      allOf:
      - $ref: '#/components/schemas/json_AtlasGlossaryBaseObject'
      - $ref: '#/components/schemas/json_AtlasGlossaryTerm_allOf'
      description: The glossary term.
      title: AtlasGlossaryTerm
    json_ResourceLink:
      properties:
        displayName:
          description: Display name for url.
          type: string
        url:
          description: web url. http or https
          type: string
      title: ResourceLink
      type: object
    json_ContactBasic:
      properties:
        id:
          description: Azure Active Directory object Id.
          type: string
        info:
          description: addtional information to describe this contact.
          type: string
      title: ContactBasic
      type: object
    json_TermStatus:
      description: Status of the AtlasGlossaryTerm
      enum:
      - DRAFT
      - APPROVED
      - ALERT
      - EXPIRED
      title: Status
      type: string
    json_TermCustomAttributes:
      additionalProperties:
        additionalProperties:
          description: The value of custom term attribute
          properties: {}
          type: object
        description: The term attribute name and attribute value, which is map<string,object>
        type: object
      description: |-
        The custom attributes of the term, which is map<string,map<string,object>>.
        The key of the first layer map is term template name.
      title: attributes
      type: object
    json_AtlasLineageInfo:
      description: The lineage information.
      example:
        lineageDepth: 0
        guidEntityMap: {}
        includeParent: true
        baseEntityGuid: baseEntityGuid
        widthCounts:
          key:
            key: '{}'
        relations:
        - fromEntityId: fromEntityId
          toEntityId: toEntityId
          relationshipId: relationshipId
        - fromEntityId: fromEntityId
          toEntityId: toEntityId
          relationshipId: relationshipId
        lineageWidth: 6
        parentRelations:
        - childEntityId: childEntityId
          parentEntityId: parentEntityId
          relationshipId: relationshipId
        - childEntityId: childEntityId
          parentEntityId: parentEntityId
          relationshipId: relationshipId
        childrenCount: 1
      properties:
        baseEntityGuid:
          description: The GUID of the base entity.
          type: string
        guidEntityMap:
          additionalProperties:
            $ref: '#/components/schemas/json_AtlasEntityHeader'
          description: The GUID entity map.
          type: object
        widthCounts:
          additionalProperties:
            additionalProperties:
              description: The entity guid.
              properties: {}
              type: object
            description: The lineage direction
            type: object
          description: The entity count in specific direction.
          type: object
        lineageDepth:
          description: The depth of lineage.
          format: int32
          type: integer
        lineageWidth:
          description: The width of lineage.
          format: int32
          type: integer
        includeParent:
          description: True to return the parent of the base entity.
          type: boolean
        childrenCount:
          description: The number of children node.
          format: int32
          type: integer
        lineageDirection:
          $ref: '#/components/schemas/json_LineageDirection'
        parentRelations:
          description: An array of parentRelations relations.
          items:
            $ref: '#/components/schemas/json_ParentRelation'
          type: array
        relations:
          description: An array of lineage relations.
          items:
            $ref: '#/components/schemas/json_LineageRelation'
          type: array
      title: AtlasLineageInfo
      type: object
    json_AtlasObjectId:
      description: Reference to an object-instance of an Atlas type - like entity.
      properties:
        guid:
          description: The GUID of the object.
          type: string
        typeName:
          description: The name of the type.
          type: string
        uniqueAttributes:
          additionalProperties:
            properties: {}
            type: object
          description: The unique attributes of the object.
          type: object
      title: AtlasObjectId
      type: object
    json_AtlasRelatedCategoryHeader:
      description: The header of the related category.
      example:
        displayText: displayText
        categoryGuid: categoryGuid
        relationGuid: relationGuid
        description: description
        parentCategoryGuid: parentCategoryGuid
      properties:
        categoryGuid:
          description: The GUID of the category.
          type: string
        description:
          description: The description of the category header.
          type: string
        displayText:
          description: The display text.
          type: string
        parentCategoryGuid:
          description: The GUID of the parent category.
          type: string
        relationGuid:
          description: The GUID of the relationship.
          type: string
      title: AtlasRelatedCategoryHeader
      type: object
    json_AtlasRelatedObjectId:
      allOf:
      - $ref: '#/components/schemas/json_AtlasObjectId'
      - $ref: '#/components/schemas/json_AtlasRelatedObjectId_allOf'
      description: Reference to an object-instance of AtlasEntity type used in relationship
        attribute values
      title: AtlasRelatedObjectId
    json_AtlasRelatedTermHeader:
      description: The header of the related term.
      example:
        displayText: displayText
        expression: expression
        relationGuid: relationGuid
        steward: steward
        description: description
        source: source
        termGuid: termGuid
      properties:
        description:
          description: The description of the related term.
          type: string
        displayText:
          description: The display text.
          type: string
        expression:
          description: The expression of the term.
          type: string
        relationGuid:
          description: The GUID of the relationship.
          type: string
        source:
          description: The source of the term.
          type: string
        status:
          $ref: '#/components/schemas/json_AtlasTermRelationshipStatus'
        steward:
          description: The steward of the term.
          type: string
        termGuid:
          description: The GUID of the term.
          type: string
      title: AtlasRelatedTermHeader
      type: object
    json_AtlasRelationship:
      allOf:
      - $ref: '#/components/schemas/json_AtlasStruct'
      - $ref: '#/components/schemas/json_AtlasRelationship_allOf'
      description: Atlas relationship instance.
      title: AtlasRelationship
    json_AtlasRelationshipDef:
      allOf:
      - $ref: '#/components/schemas/json_AtlasStructDef'
      - $ref: '#/components/schemas/json_AtlasRelationshipDef_allOf'
      description: |-
        AtlasRelationshipDef is a TypeDef that defines a relationship.
        <p>
        As with other typeDefs the AtlasRelationshipDef has a name. Once created the RelationshipDef has a guid.
        The name and the guid are the 2 ways that the RelationshipDef is identified.
        <p>
        RelationshipDefs have 2 ends, each of which specify cardinality, an EntityDef type name and name and optionally
        whether the end is a container.
        <p>
        RelationshipDefs can have AttributeDefs - though only primitive types are allowed. <br>
        RelationshipDefs have a relationshipCategory specifying the UML type of relationship required <br>
        RelationshipDefs also have a PropogateTag - indicating which way tags could flow over the relationships.
        <p>
        The way EntityDefs and RelationshipDefs are intended to be used is that EntityDefs will define AttributeDefs these AttributeDefs
        will not specify an EntityDef type name as their types.
        <p>
        RelationshipDefs introduce new atributes to the entity instances. For example
        <p>
        EntityDef A might have attributes attr1,attr2,attr3 <br>
        EntityDef B might have attributes attr4,attr5,attr6 <br>
        RelationshipDef AtoB might define 2 ends <br>

        <pre>
           end1:  type A, name attr7
           end2:  type B, name attr8  </pre>

        <p>
        When an instance of EntityDef A is created, it will have attributes attr1,attr2,attr3,attr7 <br>
        When an instance of EntityDef B is created, it will have attributes attr4,attr5,attr6,attr8
        <p>
        In this way relationshipDefs can be authored separately from entityDefs and can inject relationship attributes into
        the entity instances
      title: AtlasRelationshipDef
    json_AtlasRelationshipEndDef:
      description: |-
        The relationshipEndDef represents an end of the relationship. The end of the relationship is defined by a type, an
        attribute name, cardinality and whether it  is the container end of the relationship.
      properties:
        cardinality:
          $ref: '#/components/schemas/json_Cardinality'
        description:
          description: The description of the relationship end definition.
          type: string
        isContainer:
          description: Determines if it is container.
          type: boolean
        isLegacyAttribute:
          description: Determines if it is a legacy attribute.
          type: boolean
        name:
          description: The name of the relationship end definition.
          type: string
        type:
          description: The type of the relationship end.
          type: string
      title: AtlasRelationshipEndDef
      type: object
    json_AtlasRelationshipWithExtInfo:
      description: The relationship with extended information.
      example:
        referredEntities: {}
      properties:
        referredEntities:
          additionalProperties:
            $ref: '#/components/schemas/json_AtlasEntityHeader'
          description: The referred entity header.
          type: object
        relationship:
          $ref: '#/components/schemas/json_AtlasRelationship'
      title: AtlasRelationshipWithExtInfo
      type: object
    json_AtlasStruct:
      description: Captures details of struct contents. Not instantiated directly,
        used only via AtlasEntity, AtlasClassification.
      properties:
        attributes:
          additionalProperties:
            properties: {}
            type: object
          description: The attributes of the struct.
          type: object
        typeName:
          description: The name of the type.
          type: string
        lastModifiedTS:
          description: ETag for concurrency control.
          title: lastModifiedTS
          type: string
      title: AtlasStruct
      type: object
    json_AtlasStructDef:
      allOf:
      - $ref: '#/components/schemas/json_AtlasBaseTypeDef'
      - $ref: '#/components/schemas/json_AtlasStructDef_allOf'
      description: class that captures details of a struct-type.
      title: AtlasStructDef
    json_AtlasTermAssignmentHeader:
      description: The header for term assignment.
      properties:
        confidence:
          description: The confidence of the term assignment.
          format: int32
          type: integer
        createdBy:
          description: The user who created the record.
          type: string
        description:
          description: The description of the term assignment.
          type: string
        displayText:
          description: The display text.
          type: string
        expression:
          description: The expression of the term assignment.
          type: string
        relationGuid:
          description: The GUID of the relationship.
          type: string
        source:
          description: The source of the term.
          type: string
        status:
          $ref: '#/components/schemas/json_AtlasTermAssignmentStatus'
        steward:
          description: The steward of the term.
          type: string
        termGuid:
          description: The GUID of the term.
          type: string
      title: AtlasTermAssignmentHeader
      type: object
    json_AtlasTermAssignmentStatus:
      description: The status of terms assignment.
      enum:
      - DISCOVERED
      - PROPOSED
      - IMPORTED
      - VALIDATED
      - DEPRECATED
      - OBSOLETE
      - OTHER
      title: AtlasTermAssignmentStatus
      type: string
    json_AtlasTermCategorizationHeader:
      description: The basic information for term categorization.
      properties:
        categoryGuid:
          description: The GUID of the category.
          type: string
        description:
          description: The description of the record.
          type: string
        displayText:
          description: The display text.
          type: string
        relationGuid:
          description: The GUID of the relationship.
          type: string
        status:
          $ref: '#/components/schemas/json_AtlasTermRelationshipStatus'
      title: AtlasTermCategorizationHeader
      type: object
    json_AtlasTermRelationshipStatus:
      description: The status of term relationship.
      enum:
      - DRAFT
      - ACTIVE
      - DEPRECATED
      - OBSOLETE
      - OTHER
      title: AtlasTermRelationshipStatus
      type: string
    json_AtlasTypeDefHeader:
      description: The basic information of the type definition.
      example:
        name: name
        guid: guid
      properties:
        category:
          $ref: '#/components/schemas/json_TypeCategory'
        guid:
          description: The GUID of the type definition.
          type: string
        name:
          description: The name of the type definition.
          type: string
      title: AtlasTypeDefHeader
      type: object
    json_AtlasTypesDef:
      description: The definitions of types.
      example:
        structDefs:
        - null
        - null
        entityDefs:
        - null
        - null
        enumDefs:
        - null
        - null
        classificationDefs:
        - null
        - null
        relationshipDefs:
        - null
        - null
      properties:
        classificationDefs:
          description: An array of classification definitions.
          items:
            $ref: '#/components/schemas/json_AtlasClassificationDef'
          type: array
        entityDefs:
          description: An array of entity definitions.
          items:
            $ref: '#/components/schemas/json_AtlasEntityDef'
          type: array
        enumDefs:
          description: An array of enum definitions.
          items:
            $ref: '#/components/schemas/json_AtlasEnumDef'
          type: array
        relationshipDefs:
          description: An array of relationship definitions.
          items:
            $ref: '#/components/schemas/json_AtlasRelationshipDef'
          type: array
        structDefs:
          description: An array of struct definitions.
          items:
            $ref: '#/components/schemas/json_AtlasStructDef'
          type: array
      title: AtlasTypesDef
      type: object
    json_TypeStatistics:
      description: The types and corresponding statistics.
      example:
        typeStatistics:
          key:
            count: 0
      properties:
        typeStatistics:
          additionalProperties:
            $ref: '#/components/schemas/json_TypeStatistics_typeStatistics'
          description: An map with type and corresponding statistics.
          type: object
      title: TypeStatistics
      type: object
    json_AtlasUserSavedSearch:
      allOf:
      - $ref: '#/components/schemas/json_AtlasBaseModelObject'
      - $ref: '#/components/schemas/json_AtlasUserSavedSearch_allOf'
      description: User saved search.
      title: AtlasUserSavedSearch
    json_Cardinality:
      description: single-valued attribute or multi-valued attribute.
      enum:
      - SINGLE
      - LIST
      - SET
      title: Cardinality
      type: string
    json_ClassificationAssociateRequest:
      description: The request for classification association.
      properties:
        classification:
          $ref: '#/components/schemas/json_AtlasClassification'
        entityGuids:
          description: The GUID of the entity.
          items:
            type: string
          type: array
      title: ClassificationAssociateRequest
      type: object
    json_Condition:
      description: The enum for condition.
      enum:
      - AND
      - OR
      title: Condition
      type: string
    json_DateFormat:
      description: The date format.
      example:
        calendar: 6.027456183070403
        numberFormat:
          parseIntegerOnly: true
          groupingUsed: true
          availableLocales:
          - availableLocales
          - availableLocales
          maximumIntegerDigits: 5
          maximumFractionDigits: 1
          minimumFractionDigits: 5
          currency: currency
          minimumIntegerDigits: 2
        timeZone:
          DSTSavings: 7
          displayName: displayName
          rawOffset: 9
          availableIDs:
          - availableIDs
          - availableIDs
          ID: ID
        lenient: true
        availableLocales:
        - availableLocales
        - availableLocales
      properties:
        availableLocales:
          description: An array of available locales.
          items:
            type: string
          type: array
        calendar:
          type: number
        dateInstance:
          $ref: '#/components/schemas/json_DateFormat'
        dateTimeInstance:
          $ref: '#/components/schemas/json_DateFormat'
        instance:
          $ref: '#/components/schemas/json_DateFormat'
        lenient:
          description: Determines the leniency of the date format.
          type: boolean
        numberFormat:
          $ref: '#/components/schemas/json_NumberFormat'
        timeInstance:
          $ref: '#/components/schemas/json_DateFormat'
        timeZone:
          $ref: '#/components/schemas/json_TimeZone'
      title: DateFormat
      type: object
    json_EntityAuditActionV2:
      description: The enum of entity audit actions.
      enum:
      - ENTITY_CREATE
      - ENTITY_UPDATE
      - ENTITY_DELETE
      - ENTITY_IMPORT_CREATE
      - ENTITY_IMPORT_UPDATE
      - ENTITY_IMPORT_DELETE
      - CLASSIFICATION_ADD
      - CLASSIFICATION_DELETE
      - CLASSIFICATION_UPDATE
      - PROPAGATED_CLASSIFICATION_ADD
      - PROPAGATED_CLASSIFICATION_DELETE
      - PROPAGATED_CLASSIFICATION_UPDATE
      - TERM_ADD
      - TERM_DELETE
      title: EntityAuditActionV2
      type: string
    json_EntityAuditEventV2:
      description: Structure of v2 entity audit event
      properties:
        action:
          $ref: '#/components/schemas/json_EntityAuditActionV2'
        details:
          description: The details of the event.
          type: string
        entity:
          $ref: '#/components/schemas/json_AtlasEntity'
        entityId:
          description: The GUID of the entity.
          type: string
        eventKey:
          description: The key of the event.
          type: string
        timestamp:
          description: The timestamp of the event.
          format: int64
          type: integer
        type:
          $ref: '#/components/schemas/json_EntityAuditType'
        user:
          description: The user of the event.
          type: string
      title: EntityAuditEventV2
      type: object
    json_EntityAuditType:
      description: The enum of entity audit type.
      enum:
      - ENTITY_AUDIT_V1
      - ENTITY_AUDIT_V2
      title: EntityAuditType
      type: string
    json_EntityMutationResponse:
      description: The mutation response of entity.
      example:
        mutatedEntities:
          key:
          - null
          - null
        partialUpdatedEntities:
        - null
        - null
        guidAssignments:
          key: guidAssignments
      properties:
        guidAssignments:
          additionalProperties:
            type: string
          description: A map of GUID assignments with entities.
          type: object
        mutatedEntities:
          additionalProperties:
            items:
              $ref: '#/components/schemas/json_AtlasEntityHeader'
            type: array
          description: The entity headers of mutated entities.
          type: object
        partialUpdatedEntities:
          description: An array of entity headers that partially updated.
          items:
            $ref: '#/components/schemas/json_AtlasEntityHeader'
          type: array
      title: EntityMutationResponse
      type: object
    json_EntityOperation:
      description: The enum of entity operation.
      enum:
      - CREATE
      - UPDATE
      - PARTIAL_UPDATE
      - DELETE
      title: EntityOperation
      type: string
    json_FilterCriteria:
      description: The filter criteria with attributes and condition.
      properties:
        attributeName:
          description: The name of the attribute.
          type: string
        attributeValue:
          description: The value of the attribute.
          type: string
        condition:
          $ref: '#/components/schemas/json_Condition'
        criterion:
          description: An array of filter criteria.
          items:
            $ref: '#/components/schemas/json_FilterCriteria'
          type: array
        operator:
          $ref: '#/components/schemas/json_Operator'
      title: FilterCriteria
      type: object
    json_Format:
      description: The format object.
      title: Format
      type: object
    json_LineageDirection:
      description: The enum of lineage direction.
      enum:
      - INPUT
      - OUTPUT
      - BOTH
      title: LineageDirection
      type: string
    json_LineageRelation:
      description: The lineage relation with GUID of the from and to entity.
      example:
        fromEntityId: fromEntityId
        toEntityId: toEntityId
        relationshipId: relationshipId
      properties:
        fromEntityId:
          description: The GUID of from-entity.
          type: string
        relationshipId:
          description: The GUID of relationship.
          type: string
        toEntityId:
          description: The GUID of to-entity.
          type: string
      title: LineageRelation
      type: object
    json_ParentRelation:
      description: The lineage parents relation with GUID of the parent entity and
        to child entity.
      example:
        childEntityId: childEntityId
        parentEntityId: parentEntityId
        relationshipId: relationshipId
      properties:
        childEntityId:
          description: The GUID of child entity.
          type: string
        relationshipId:
          description: The GUID of relationship.
          type: string
        parentEntityId:
          description: The GUID of parent entity.
          type: string
      title: ParentRelation
      type: object
    json_NumberFormat:
      description: The number format.
      example:
        parseIntegerOnly: true
        groupingUsed: true
        availableLocales:
        - availableLocales
        - availableLocales
        maximumIntegerDigits: 5
        maximumFractionDigits: 1
        minimumFractionDigits: 5
        currency: currency
        minimumIntegerDigits: 2
      properties:
        availableLocales:
          description: The number format.
          items:
            type: string
          type: array
        currency:
          description: The currency.
          type: string
        currencyInstance:
          $ref: '#/components/schemas/json_NumberFormat'
        groupingUsed:
          description: Determines if grouping is used.
          type: boolean
        instance:
          $ref: '#/components/schemas/json_NumberFormat'
        integerInstance:
          $ref: '#/components/schemas/json_NumberFormat'
        maximumFractionDigits:
          description: The maximum of fraction digits.
          format: int32
          type: integer
        maximumIntegerDigits:
          description: The maximum of integer digits.
          format: int32
          type: integer
        minimumFractionDigits:
          description: The minimum of fraction digits.
          format: int32
          type: integer
        minimumIntegerDigits:
          description: The minimum of integer digits.
          format: int32
          type: integer
        numberInstance:
          $ref: '#/components/schemas/json_NumberFormat'
        parseIntegerOnly:
          description: Determines if only integer is parsed.
          type: boolean
        percentInstance:
          $ref: '#/components/schemas/json_NumberFormat'
        roundingMode:
          $ref: '#/components/schemas/json_RoundingMode'
      title: NumberFormat
      type: object
    json_TermGuid:
      description: The globally unique identifier for glossary term.
      title: termGuid
      type: string
    json_Operator:
      description: |-
        Supported search operations
        Logical comparision operators can only be used with numbers or dates
        IN, LIKE, startsWith, endsWith, CONTAINS can only be used with strings or text
      enum:
      - LT
      - GT
      - LTE
      - GTE
      - EQ
      - NEQ
      - IN
      - LIKE
      - STARTS_WITH
      - ENDS_WITH
      - CONTAINS
      - CONTAINS_ANY
      - CONTAINS_ALL
      - IS_NULL
      - NOT_NULL
      title: Operator
      type: string
    json_PList:
      description: Paginated-list, for returning search results.
      properties:
        list:
          description: An array of objects.
          items:
            properties: {}
            type: object
          type: array
        pageSize:
          description: The size of the page.
          format: int32
          type: integer
        sortBy:
          description: The sorted by field.
          type: string
        sortType:
          $ref: '#/components/schemas/json_SortType'
        startIndex:
          description: The start index of the page.
          format: int64
          type: integer
        totalCount:
          description: The total count of items.
          format: int64
          type: integer
      title: PList
      type: object
    json_PropagateTags:
      description: |-
        PropagateTags indicates whether tags should propagate across the relationship instance.
        <p>
        Tags can propagate:
        <p>
        NONE - not at all <br>
        ONE_TO_TWO - from end 1 to 2 <br>
        TWO_TO_ONE - from end 2 to 1  <br>
        BOTH - both ways
        <p>
        Care needs to be taken when specifying. The use cases we are aware of where this flag is useful:
        <p>
        - propagating confidentiality classifications from a table to columns - ONE_TO_TWO could be used here <br>
        - propagating classifications around Glossary synonyms - BOTH could be used here.
        <p>
        There is an expectation that further enhancements will allow more granular control of tag propagation and will
        address how to resolve conflicts.
      enum:
      - NONE
      - ONE_TO_TWO
      - TWO_TO_ONE
      - BOTH
      title: PropagateTags
      type: string
    json_Relation:
      description: The enum of relations.
      enum:
      - SEE_ALSO
      - SYNONYMS
      - ANTONYMS
      - PREFERRED_TO_TERMS
      - PREFERRED_TERMS
      - REPLACEMENT_TERMS
      - REPLACED_BY
      - TRANSLATION_TERMS
      - TRANSLATED_TERMS
      - ISA
      - CLASSIFIES
      - VALID_VALUES
      - VALID_VALUES_FOR
      title: Relation
      type: string
    json_RelationshipCategory:
      description: |-
        The Relationship category determines the style of relationship around containment and lifecycle.
        UML terminology is used for the values.
        <p>
        ASSOCIATION is a relationship with no containment. <br>
        COMPOSITION and AGGREGATION are containment relationships.
        <p>
        The difference being in the lifecycles of the container and its children. In the COMPOSITION case,
        the children cannot exist without the container. For AGGREGATION, the life cycles
        of the container and children are totally independant.
      enum:
      - ASSOCIATION
      - AGGREGATION
      - COMPOSITION
      title: RelationshipCategory
      type: string
    json_RoundingMode:
      description: The enum of rounding mode.
      enum:
      - UP
      - DOWN
      - CEILING
      - FLOOR
      - HALF_UP
      - HALF_DOWN
      - HALF_EVEN
      - UNNECESSARY
      title: RoundingMode
      type: string
    json_SavedSearchType:
      description: The enum of saved search type.
      enum:
      - BASIC
      - ADVANCED
      title: SavedSearchType
      type: string
    json_SearchFilter:
      description: Generic filter, to specify search criteria using name/value pairs.
      properties:
        getCount:
          description: Determines if get the count.
          type: boolean
        maxRows:
          description: The maximum of rows.
          format: int64
          type: integer
        params:
          additionalProperties:
            items:
              type: string
            type: array
          description: The parameters of the search filter.
          type: object
        sortBy:
          description: The sorted by field.
          type: string
        sortType:
          $ref: '#/components/schemas/json_SortType'
        startIndex:
          description: The start index of the search.
          format: int64
          type: integer
      title: SearchFilter
      type: object
    json_SearchParameters:
      description: The parameters used for search.
      properties:
        attributes:
          description: Attribute values included in the results
          items:
            type: string
          type: array
        classification:
          description: The classification to search.
          type: string
        entityFilters:
          $ref: '#/components/schemas/json_FilterCriteria'
        excludeDeletedEntities:
          description: Determines if exclude deleted entities.
          type: boolean
        includeClassificationAttributes:
          description: Determines if include classification attributes.
          type: boolean
        includeSubClassifications:
          description: Determines if include sub classifications.
          type: boolean
        includeSubTypes:
          description: Determines if include sub types.
          type: boolean
        limit:
          description: The limit of the search result.
          format: int32
          type: integer
        offset:
          description: The offset of the search.
          format: int32
          type: integer
        query:
          description: The search query.
          type: string
        tagFilters:
          $ref: '#/components/schemas/json_FilterCriteria'
        termName:
          description: The name of the term for search.
          type: string
        typeName:
          description: The name of the type for search.
          type: string
      title: SearchParameters
      type: object
    json_SortType:
      description: to specify whether the result should be sorted? If yes, whether
        asc or desc.
      enum:
      - NONE
      - ASC
      - DESC
      title: SortType
      type: string
    json_Status:
      description: Status of the entity - can be active or deleted. Deleted entities
        are not removed from Atlas store.
      enum:
      - ACTIVE
      - DELETED
      title: Status
      type: string
    json_Status_AtlasRelationship:
      description: The enum of relationship status.
      enum:
      - ACTIVE
      - DELETED
      title: Status
      type: string
    json_TimeBoundary:
      description: Captures time-boundary details
      properties:
        endTime:
          description: The end of the time boundary.
          type: string
        startTime:
          description: The start of the time boundary.
          type: string
        timeZone:
          description: The timezone of the time boundary.
          type: string
      title: TimeBoundary
      type: object
    json_TimeZone:
      description: The timezone information.
      example:
        DSTSavings: 7
        displayName: displayName
        rawOffset: 9
        availableIDs:
        - availableIDs
        - availableIDs
        ID: ID
      properties:
        DSTSavings:
          description: The value of the daylight saving time.
          format: int32
          type: integer
        ID:
          description: The ID of the timezone.
          type: string
        availableIDs:
          description: An array of available IDs.
          items:
            type: string
          type: array
        default:
          $ref: '#/components/schemas/json_TimeZone'
        displayName:
          description: The display name of the timezone.
          type: string
        rawOffset:
          description: The raw offset of the timezone.
          format: int32
          type: integer
      title: TimeZone
      type: object
    json_TypeCategory:
      description: The enum of type category.
      enum:
      - PRIMITIVE
      - OBJECT_ID_TYPE
      - ENUM
      - STRUCT
      - CLASSIFICATION
      - ENTITY
      - ARRAY
      - MAP
      - RELATIONSHIP
      - TERM_TEMPLATE
      title: TypeCategory
      type: string
    json_AzureCatalogUser:
      description: Azure catalog user.
      properties:
        userId:
          description: User ID of the Azure catalog user.
          type: string
      title: AzureCatalogUser
      type: object
    json_CatalogCreationRequest:
      description: Request for catalog creation.
      properties:
        catalogName:
          description: Name of the catalog.
          type: string
        catalogId:
          description: ID of the catalog.
          type: string
        creatorUserId:
          description: User ID or the creator.
          type: string
        eventHubConnectionString:
          description: The connection string of the Event Hubs.
          type: string
      title: CatalogCreationRequest
      type: object
    json_CatalogDeletionRequest:
      description: Request for catalog deletion.
      properties:
        catalogName:
          description: Name of the catalog.
          type: string
      title: CatalogDeletionRequest
      type: object
    json_DataScanPermissionCheckRequest:
      description: Request for data scan permission check.
      properties:
        catalogName:
          description: Name of the catalog.
          type: string
        userId:
          description: User ID of the catalog.
          type: string
      title: DataScanPermissionCheckRequest
      type: object
    json_DataScanPermissionCheckResponse:
      description: Response for data scan permission check.
      properties:
        result:
          description: The result of the response.
          type: string
      title: DataScanPermissionCheckResponse
      type: object
    json_SuggestResult:
      description: The result item of the search suggest.
      example:
        value:
        - owner: owner
          '@search.text': '@search.text'
          qualifiedName: qualifiedName
          entityType: entityType
          description: description
          label:
          - label
          - label
          classification:
          - classification
          - classification
          assetType:
          - assetType
          - assetType
          contact:
          - contactType: contactType
            id: id
            info: info
          - contactType: contactType
            id: id
            info: info
          name: name
          '@search.score': 0.8008282
          term:
          - name: name
            glossaryName: glossaryName
          - name: name
            glossaryName: glossaryName
          id: id
        - owner: owner
          '@search.text': '@search.text'
          qualifiedName: qualifiedName
          entityType: entityType
          description: description
          label:
          - label
          - label
          classification:
          - classification
          - classification
          assetType:
          - assetType
          - assetType
          contact:
          - contactType: contactType
            id: id
            info: info
          - contactType: contactType
            id: id
            info: info
          name: name
          '@search.score': 0.8008282
          term:
          - name: name
            glossaryName: glossaryName
          - name: name
            glossaryName: glossaryName
          id: id
      properties:
        value:
          items:
            $ref: '#/components/schemas/json_SuggestResultValue'
          type: array
      title: SuggestResult
      type: object
    json_SuggestResultValue:
      description: The value item of the search suggest.
      example:
        owner: owner
        '@search.text': '@search.text'
        qualifiedName: qualifiedName
        entityType: entityType
        description: description
        label:
        - label
        - label
        classification:
        - classification
        - classification
        assetType:
        - assetType
        - assetType
        contact:
        - contactType: contactType
          id: id
          info: info
        - contactType: contactType
          id: id
          info: info
        name: name
        '@search.score': 0.8008282
        term:
        - name: name
          glossaryName: glossaryName
        - name: name
          glossaryName: glossaryName
        id: id
      properties:
        '@search.score':
          description: The search score calculated by the search engine. The results
            are ordered by search score by default.
          format: float
          type: number
        '@search.text':
          description: The target text that contains the keyword as prefix. The keyword
            is wrapped with emphasis mark.
          type: string
        description:
          description: The description of the record.
          type: string
        id:
          description: The GUID of the record.
          type: string
        name:
          description: The name of the record.
          type: string
        owner:
          description: The owner of the record. This is an Atlas native attribute.
          type: string
        qualifiedName:
          description: The qualified name of the record.
          type: string
        entityType:
          description: The type name of the record.
          type: string
        classification:
          description: The classifications of the record.
          items:
            type: string
          type: array
        label:
          description: The labels of the record.
          items:
            type: string
          type: array
        term:
          description: The terms assigned to the record.
          items:
            $ref: '#/components/schemas/json_termSearchResultValue'
          type: array
        contact:
          description: The contacts of the record.
          items:
            $ref: '#/components/schemas/json_contactSearchResultValue'
          type: array
        assetType:
          description: The asset types of the record.
          items:
            type: string
          type: array
      title: SuggestResultValue
      type: object
    json_AdvancedSearchResult:
      description: The result of the advanced search result.
      example:
        '@search.count': 0
        '@search.facets':
          classificationCategory:
          - count: 6
            value: value
          - count: 6
            value: value
          contactId:
          - count: 6
            value: value
          - count: 6
            value: value
          fileExtension:
          - count: 6
            value: value
          - count: 6
            value: value
          term:
          - count: 6
            value: value
          - count: 6
            value: value
          label:
          - count: 6
            value: value
          - count: 6
            value: value
          classification:
          - count: 6
            value: value
          - count: 6
            value: value
          assetType:
          - count: 6
            value: value
          - count: 6
            value: value
        value:
        - owner: owner
          '@search.text': '@search.text'
          qualifiedName: qualifiedName
          entityType: entityType
          description: description
          label:
          - label
          - label
          classification:
          - classification
          - classification
          assetType:
          - assetType
          - assetType
          '@search.highlights':
            qualifiedName:
            - qualifiedName
            - qualifiedName
            entityType:
            - entityType
            - entityType
            name:
            - name
            - name
            description:
            - description
            - description
            id:
            - id
            - id
          contact:
          - contactType: contactType
            id: id
            info: info
          - contactType: contactType
            id: id
            info: info
          name: name
          '@search.score': 1.4658129
          term:
          - name: name
            glossaryName: glossaryName
          - name: name
            glossaryName: glossaryName
          id: id
        - owner: owner
          '@search.text': '@search.text'
          qualifiedName: qualifiedName
          entityType: entityType
          description: description
          label:
          - label
          - label
          classification:
          - classification
          - classification
          assetType:
          - assetType
          - assetType
          '@search.highlights':
            qualifiedName:
            - qualifiedName
            - qualifiedName
            entityType:
            - entityType
            - entityType
            name:
            - name
            - name
            description:
            - description
            - description
            id:
            - id
            - id
          contact:
          - contactType: contactType
            id: id
            info: info
          - contactType: contactType
            id: id
            info: info
          name: name
          '@search.score': 1.4658129
          term:
          - name: name
            glossaryName: glossaryName
          - name: name
            glossaryName: glossaryName
          id: id
      properties:
        '@search.count':
          description: The total number of search results (not the number of documents
            in a single page).
          format: int32
          type: integer
        '@search.facets':
          $ref: '#/components/schemas/json_SearchFacetResultValue'
        value:
          items:
            $ref: '#/components/schemas/json_SearchResultValue'
          type: array
      title: AdvancedSearchResult
      type: object
    json_SearchFacetResultValue:
      description: A facet list that consists of index fields assetType ,classification,
        classificationCategory, contactId, fileExtension, label, and label. When the
        facet is specified in the request, the value of the facet is returned as an
        element of @search.facets.
      example:
        classificationCategory:
        - count: 6
          value: value
        - count: 6
          value: value
        contactId:
        - count: 6
          value: value
        - count: 6
          value: value
        fileExtension:
        - count: 6
          value: value
        - count: 6
          value: value
        term:
        - count: 6
          value: value
        - count: 6
          value: value
        label:
        - count: 6
          value: value
        - count: 6
          value: value
        classification:
        - count: 6
          value: value
        - count: 6
          value: value
        assetType:
        - count: 6
          value: value
        - count: 6
          value: value
      properties:
        assetType:
          items:
            $ref: '#/components/schemas/json_SearchFacetItemValue'
          type: array
        classification:
          items:
            $ref: '#/components/schemas/json_SearchFacetItemValue'
          type: array
        classificationCategory:
          items:
            $ref: '#/components/schemas/json_SearchFacetItemValue'
          type: array
        contactId:
          items:
            $ref: '#/components/schemas/json_SearchFacetItemValue'
          type: array
        fileExtension:
          items:
            $ref: '#/components/schemas/json_SearchFacetItemValue'
          type: array
        label:
          items:
            $ref: '#/components/schemas/json_SearchFacetItemValue'
          type: array
        term:
          items:
            $ref: '#/components/schemas/json_SearchFacetItemValue'
          type: array
      title: Context
      type: object
    json_SearchFacetItemValue:
      description: The content of a search facet result item.
      example:
        count: 6
        value: value
      properties:
        count:
          description: The count of the facet item.
          format: int32
          type: integer
        value:
          description: The name of the facet item.
          type: string
      title: SearchFacetItemValue
      type: object
    json_SearchResultValue:
      description: The value item of the search result.
      example:
        owner: owner
        '@search.text': '@search.text'
        qualifiedName: qualifiedName
        entityType: entityType
        description: description
        label:
        - label
        - label
        classification:
        - classification
        - classification
        assetType:
        - assetType
        - assetType
        '@search.highlights':
          qualifiedName:
          - qualifiedName
          - qualifiedName
          entityType:
          - entityType
          - entityType
          name:
          - name
          - name
          description:
          - description
          - description
          id:
          - id
          - id
        contact:
        - contactType: contactType
          id: id
          info: info
        - contactType: contactType
          id: id
          info: info
        name: name
        '@search.score': 1.4658129
        term:
        - name: name
          glossaryName: glossaryName
        - name: name
          glossaryName: glossaryName
        id: id
      properties:
        '@search.score':
          description: The search score calculated by the search engine. The results
            are ordered by search score by default.
          format: float
          type: number
        '@search.highlights':
          $ref: '#/components/schemas/json_SearchHighlights'
        '@search.text':
          description: The target text that contains the keyword as prefix. The keyword
            is wrapped with emphasis mark.
          type: string
        description:
          description: The description of the record.
          type: string
        id:
          description: The GUID of the record.
          type: string
        name:
          description: The name of the record.
          type: string
        owner:
          description: The owner of the record. This is an Atlas native attribute.
          type: string
        qualifiedName:
          description: The qualified name of the record.
          type: string
        entityType:
          description: The type name of the record.
          type: string
        classification:
          description: The classifications of the record.
          items:
            type: string
          type: array
        label:
          description: The labels of the record.
          items:
            type: string
          type: array
        term:
          description: The terms assigned to the record.
          items:
            $ref: '#/components/schemas/json_termSearchResultValue'
          type: array
        contact:
          description: The contacts of the record.
          items:
            $ref: '#/components/schemas/json_contactSearchResultValue'
          type: array
        assetType:
          description: The asset types of the record.
          items:
            type: string
          type: array
      title: SearchResultValue
      type: object
    json_SearchHighlights:
      description: A highlight list that consists of index fields id ,qualifiedName,
        name, description, entityType. When the keyword appears in those fields, the
        value of the field, attached with emphasis mark, is returned as an element
        of @search.highlights.
      example:
        qualifiedName:
        - qualifiedName
        - qualifiedName
        entityType:
        - entityType
        - entityType
        name:
        - name
        - name
        description:
        - description
        - description
        id:
        - id
        - id
      properties:
        id:
          items:
            type: string
          type: array
        qualifiedName:
          items:
            type: string
          type: array
        name:
          items:
            type: string
          type: array
        description:
          items:
            type: string
          type: array
        entityType:
          items:
            type: string
          type: array
      title: SearchHighlights
      type: object
    json_termSearchResultValue:
      description: The context.
      example:
        name: name
        glossaryName: glossaryName
      properties:
        name:
          description: The name of the term.
          type: string
        glossaryName:
          description: The name of the glossary which contains the term.
          type: string
      title: Context
      type: object
    json_contactSearchResultValue:
      description: The contact in the search and suggest result.
      example:
        contactType: contactType
        id: id
        info: info
      properties:
        id:
          description: The GUID of the contact.
          type: string
        info:
          description: The description of the contact.
          type: string
        contactType:
          description: The type of the contact. It can be Expert or Owner for an entity.
            It can be Expert or Steward for a glossary term.
          type: string
      title: contact
      type: object
    json_AutocompleteResult:
      description: The result of the autocomplete request.
      example:
        value:
        - text: text
          queryPlusText: queryPlusText
        - text: text
          queryPlusText: queryPlusText
      properties:
        value:
          items:
            $ref: '#/components/schemas/json_AutocompleteResultValue'
          type: array
      title: AutocompleteResult
      type: object
    json_AutocompleteResultValue:
      description: The value item of the autocomplete suggest.
      example:
        text: text
        queryPlusText: queryPlusText
      properties:
        text:
          description: The completed term or phrase.
          type: string
        queryPlusText:
          description: The completed search query text.
          type: string
      title: AutocompleteResultValue
      type: object
    json_Context:
      description: The context.
      properties:
        value:
          description: The value of the context.
          type: string
      title: Context
      type: object
    json_Error:
      description: The error response.
      properties:
        errorMessage:
          description: The error message.
          type: string
      title: Error
      type: object
    json_AtlasError:
      description: The atlas error response.
      properties:
        errorCode:
          description: Error code
          type: string
        errorMessage:
          description: Error message
          type: string
      title: AtlasError
      type: object
    json_SearchRequest:
      description: The search query of advanced search request.
      properties:
        keywords:
          description: The keywords applied to all searchable fields.
          type: string
        offset:
          description: The offset. The default value is 0.
          format: int32
          type: integer
        limit:
          description: The limit of the number of the search result. default value
            is 50; maximum value is 1000.
          format: int32
          type: integer
        filter:
          description: The filter for the search. See examples for the usage of supported
            filters.
          properties: {}
          type: object
      title: SearchRequest
      type: object
    json_SuggestRequest:
      description: The query of suggest request.
      properties:
        keywords:
          description: The keywords applied to all fields that support suggest operation.
            It must be at least 1 character, and no more than 100 characters. In the
            index schema we defined a default suggester which lists all the supported
            fields and specifies a search mode.
          type: string
        limit:
          description: The number of suggestions we hope to return. The default value
            is 5. The value must be a number between 1 and 100.
          format: int32
          type: integer
        filter:
          description: The filter for the search.
          properties: {}
          type: object
      title: SuggestRequest
      type: object
    json_HookNotificationType:
      description: Enum of hook notification type. Different behavior will be invoked
        by the value.
      enum:
      - TYPE_CREATE
      - TYPE_UPDATE
      - ENTITY_CREATE
      - ENTITY_PARTIAL_UPDATE
      - ENTITY_FULL_UPDATE
      - ENTITY_DELETE
      - ENTITY_CREATE_V2
      - ENTITY_PARTIAL_UPDATE_V2
      - ENTITY_FULL_UPDATE_V2
      - ENTITY_DELETE_V2
      title: HookNotificationType
      type: string
    json_HookNotification:
      description: The base class for hook notification.
      properties:
        type:
          $ref: '#/components/schemas/json_HookNotificationType'
        user:
          default: UNKNOWN
          description: The user of the notification. Default to be "UNKNOWN".
          type: string
      title: HookNotification
      type: object
    json_EntityCreateRequestV2:
      description: The class for hook notification for type ENTITY_CREATE_V2.
      properties:
        type:
          $ref: '#/components/schemas/json_HookNotificationType'
        user:
          default: UNKNOWN
          description: The user of the notification. Default to be "UNKNOWN".
          type: string
        entities:
          $ref: '#/components/schemas/json_AtlasEntitiesWithExtInfo'
      title: EntityCreateRequestV2
      type: object
    json_EntityUpdateRequestV2:
      description: The class for hook notification for type ENTITY_FULL_UPDATE_V2.
      properties:
        type:
          $ref: '#/components/schemas/json_HookNotificationType'
        user:
          default: UNKNOWN
          description: The user of the notification. Default to be "UNKNOWN".
          type: string
        entities:
          $ref: '#/components/schemas/json_AtlasEntitiesWithExtInfo'
      title: EntityUpdateRequestV2
      type: object
    json_EntityPartialUpdateRequestV2:
      description: The class for hook notification for type ENTITY_PARTIAL_UPDATE_V2.
      properties:
        type:
          $ref: '#/components/schemas/json_HookNotificationType'
        user:
          default: UNKNOWN
          description: The user of the notification. Default to be "UNKNOWN".
          type: string
        entityId:
          $ref: '#/components/schemas/json_AtlasObjectId'
        entity:
          $ref: '#/components/schemas/json_AtlasEntitiesWithExtInfo'
      title: EntityPartialUpdateRequestV2
      type: object
    json_EntityDeleteRequestV2:
      description: The class for hook notification for type ENTITY_DELETE_V2.
      properties:
        type:
          $ref: '#/components/schemas/json_HookNotificationType'
        user:
          default: UNKNOWN
          description: The user of the notification. Default to be "UNKNOWN".
          type: string
        entities:
          items:
            $ref: '#/components/schemas/json_AtlasObjectId'
          type: array
      title: EntityDeleteRequestV2
      type: object
    json_RoleAssignmentEntry:
      description: A role assignment.
      properties:
        principalId:
          description: The object ID of the AAD user.
          type: string
        role:
          description: The name of the role.
          type: string
      title: RoleAssignmentEntry
      type: object
    json_UpdateRoleAssignmentRequest:
      description: The request for role assignment update operations.
      properties:
        roleAssignmentList:
          items:
            $ref: '#/components/schemas/json_RoleAssignmentEntry'
          type: array
      title: UpdateRoleAssignmentRequest
      type: object
    json_ListRoleAssignmentResponse:
      description: The response of listing role assignments.
      properties:
        roleAssignmentList:
          items:
            $ref: '#/components/schemas/json_RoleAssignmentEntry'
          type: array
      title: ListRoleAssignmentResponse
      type: object
    json_ImportCSVOperation:
      description: The status of import csv operation
      example:
        createTime: 0.8008281904610115
        id: id
        error:
          errorMessage: errorMessage
          errorCode: 5.637376656633329
        properties:
          importedTerms: 1.4658129805029452
          totalTermsDetect: 5.962133916683182
        lastUpdateTime: 6.027456183070403
      properties:
        id:
          description: guid string
          type: string
        status:
          $ref: '#/components/schemas/json_ImportCSVOperationStatus'
        createTime:
          description: The created time of the record.
          type: number
        lastUpdateTime:
          description: The last updated time of the record.
          type: number
        properties:
          $ref: '#/components/schemas/json_ImportCSVOperation_properties'
        error:
          $ref: '#/components/schemas/json_ImportCSVOperation_error'
      title: Status of import csv operation
      type: object
    json_ImportCSVOperationStatus:
      description: Enum of the status of import csv operation.
      enum:
      - INIT
      - SUCCEED
      - FAILED
      - RUNNING
      title: ImportCSVOperationStatus
      type: string
    json_LastModifiedTS:
      description: ETag for concurrency control.
      title: lastModifiedTS
      type: string
    xml_ns0_PList:
      allOf:
      - $ref: '#/components/schemas/xml_ns0_PList_allOf'
      description: Paginated-list, for returning search results.
      title: PList
    xml_ns0_searchFilter:
      allOf:
      - $ref: '#/components/schemas/xml_ns0_searchFilter_allOf'
      description: Generic filter, to specify search criteria using name/value pairs.
      title: searchFilter
    xml_ns0_sortType:
      description: to specify whether the result should be sorted? If yes, whether
        asc or desc.
      enum:
      - NONE
      - ASC
      - DESC
      title: sortType
      type: string
    xml_ns0_timeBoundary:
      allOf:
      - $ref: '#/components/schemas/xml_ns0_timeBoundary_allOf'
      description: Captures time-boundary details
      title: timeBoundary
    json_AtlasClassification_allOf:
      properties:
        entityGuid:
          description: The GUID of the entity.
          type: string
        entityStatus:
          $ref: '#/components/schemas/json_Status'
        propagate:
          description: Determines if the classification will be propagated.
          type: boolean
        removePropagationsOnEntityDelete:
          description: Determines if propagations will be removed on entity deletion.
          type: boolean
        validityPeriods:
          description: An array of time boundaries indicating validity periods.
          items:
            $ref: '#/components/schemas/json_TimeBoundary'
          type: array
        source:
          description: indicate the source who create the classification detail
          type: string
        sourceDetails:
          additionalProperties:
            properties: {}
            type: object
          description: more detail on source information
          type: object
      type: object
    json_AtlasClassificationDef_allOf:
      properties:
        entityTypes:
          description: |-
            Specifying a list of entityType names in the classificationDef, ensures that classifications can
            only be applied to those entityTypes.
            <ul>
            <li>Any subtypes of the entity types inherit the restriction</li>
            <li>Any classificationDef subtypes inherit the parents entityTypes restrictions</li>
            <li>Any classificationDef subtypes can further restrict the parents entityTypes restrictions by specifying a subset of the entityTypes</li>
            <li>An empty entityTypes list when there are no parent restrictions means there are no restrictions</li>
            <li>An empty entityTypes list when there are parent restrictions means that the subtype picks up the parents restrictions</li>
            <li>If a list of entityTypes are supplied, where one inherits from another, this will be rejected. This should encourage cleaner classificationsDefs</li>
            </ul>
          items:
            type: string
          type: array
        subTypes:
          description: An array of sub types.
          items:
            type: string
          type: array
        superTypes:
          description: An array of super types.
          items:
            type: string
          type: array
      type: object
    json_AtlasEntitiesWithExtInfo_allOf:
      properties:
        entities:
          description: An array of entities.
          items:
            $ref: '#/components/schemas/json_AtlasEntity'
          type: array
      type: object
    json_AtlasEntity_allOf:
      properties:
        classifications:
          description: An array of classifications.
          items:
            $ref: '#/components/schemas/json_AtlasClassification'
          type: array
        createTime:
          description: The created time of the record.
          type: number
        createdBy:
          description: The user who created the record.
          type: string
        guid:
          description: The GUID of the entity.
          type: string
        homeId:
          description: The home ID of the entity.
          type: string
        meanings:
          description: An array of term assignment headers indicating the meanings
            of the entity.
          items:
            $ref: '#/components/schemas/json_AtlasTermAssignmentHeader'
          type: array
        provenanceType:
          description: Used to record the provenance of an instance of an entity or
            relationship.
          type: number
        proxy:
          description: Determines if there's a proxy.
          type: boolean
        relationshipAttributes:
          additionalProperties:
            properties: {}
            type: object
          description: The attributes of relationship.
          type: object
        status:
          $ref: '#/components/schemas/json_Status'
        updateTime:
          description: The update time of the record.
          type: number
        updatedBy:
          description: The user who updated the record.
          type: string
        version:
          description: The version of the entity.
          type: number
        source:
          description: indicate the source who create the classification detail
          type: string
        sourceDetails:
          additionalProperties:
            properties: {}
            type: object
          description: more detail on source information
          type: object
        contacts:
          additionalProperties:
            $ref: '#/components/schemas/json_ContactBasic'
          description: The dictionary of contacts for terms. Key could be Expert or
            Owner.
          type: object
      type: object
    json_AtlasEntityDef_allOf:
      properties:
        subTypes:
          description: An array of sub types.
          items:
            type: string
          type: array
        superTypes:
          description: An array of super types.
          items:
            type: string
          type: array
      type: object
    json_AtlasEntityHeader_allOf:
      properties:
        classificationNames:
          description: An array of classification names.
          items:
            type: string
          type: array
        classifications:
          description: An array of classifications.
          items:
            $ref: '#/components/schemas/json_AtlasClassification'
          type: array
        displayText:
          description: The display text.
          type: string
        guid:
          description: The GUID of the record.
          type: string
        meaningNames:
          description: An array of meanings.
          items:
            type: string
          type: array
        meanings:
          description: An array of term assignment headers.
          items:
            $ref: '#/components/schemas/json_AtlasTermAssignmentHeader'
          type: array
        status:
          $ref: '#/components/schemas/json_Status'
      type: object
    json_AtlasEntityWithExtInfo_allOf:
      properties:
        entity:
          $ref: '#/components/schemas/json_AtlasEntity'
      type: object
    json_AtlasEnumDef_allOf:
      properties:
        defaultValue:
          description: The default value.
          type: string
        elementDefs:
          description: An array of enum element definitions.
          items:
            $ref: '#/components/schemas/json_AtlasEnumElementDef'
          type: array
      type: object
    json_AtlasGlossary_allOf:
      properties:
        categories:
          description: An array of categories.
          items:
            $ref: '#/components/schemas/json_AtlasRelatedCategoryHeader'
          type: array
        language:
          description: The language of the glossary.
          type: string
        terms:
          description: An array of related term headers.
          items:
            $ref: '#/components/schemas/json_AtlasRelatedTermHeader'
          type: array
        usage:
          description: The usage of the glossary.
          type: string
      type: object
    json_AtlasGlossaryBaseObject_allOf:
      properties:
        classifications:
          description: An array of classifications.
          items:
            $ref: '#/components/schemas/json_AtlasClassification'
          type: array
        longDescription:
          description: The long version description.
          type: string
        name:
          description: The name of the glossary object.
          type: string
        qualifiedName:
          description: The qualified name of the glossary object.
          type: string
        shortDescription:
          description: The short version of description.
          type: string
        lastModifiedTS:
          description: ETag for concurrency control.
          title: lastModifiedTS
          type: string
      type: object
    json_AtlasGlossaryCategory_allOf:
      properties:
        anchor:
          $ref: '#/components/schemas/json_AtlasGlossaryHeader'
        childrenCategories:
          description: An array of children categories.
          items:
            $ref: '#/components/schemas/json_AtlasRelatedCategoryHeader'
          type: array
        parentCategory:
          $ref: '#/components/schemas/json_AtlasRelatedCategoryHeader'
        terms:
          description: An array of related term headers.
          items:
            $ref: '#/components/schemas/json_AtlasRelatedTermHeader'
          type: array
      type: object
    json_AtlasGlossaryExtInfo_allOf:
      properties:
        categoryInfo:
          additionalProperties:
            $ref: '#/components/schemas/json_AtlasGlossaryCategory'
          description: The glossary category information.
          type: object
        termInfo:
          additionalProperties:
            $ref: '#/components/schemas/json_AtlasGlossaryTerm'
          description: The glossary term information.
          type: object
      type: object
    json_AtlasGlossaryTerm_allOf:
      properties:
        abbreviation:
          description: The abbreviation of the term.
          type: string
        anchor:
          $ref: '#/components/schemas/json_AtlasGlossaryHeader'
        antonyms:
          description: An array of related term headers as antonyms.
          items:
            $ref: '#/components/schemas/json_AtlasRelatedTermHeader'
          type: array
        createTime:
          description: The created time of the record.
          type: number
        createdBy:
          description: The user who created the record.
          type: string
        updateTime:
          description: The update time of the record.
          type: number
        updatedBy:
          description: The user who updated the record.
          type: string
        status:
          $ref: '#/components/schemas/json_TermStatus'
        resources:
          description: An array of resource link for term
          items:
            $ref: '#/components/schemas/json_ResourceLink'
          type: array
        contacts:
          additionalProperties:
            $ref: '#/components/schemas/json_ContactBasic'
          description: The dictionary of contacts for terms. Key could be Expert or
            Steward.
          type: object
        attributes:
          additionalProperties:
            additionalProperties:
              description: The value of custom term attribute
              properties: {}
              type: object
            description: The term attribute name and attribute value, which is map<string,object>
            type: object
          description: |-
            The custom attributes of the term, which is map<string,map<string,object>>.
            The key of the first layer map is term template name.
          title: attributes
          type: object
        assignedEntities:
          description: An array of related object IDs.
          items:
            $ref: '#/components/schemas/json_AtlasRelatedObjectId'
          type: array
        categories:
          description: An array of term categorization headers.
          items:
            $ref: '#/components/schemas/json_AtlasTermCategorizationHeader'
          type: array
        classifies:
          description: An array of related term headers.
          items:
            $ref: '#/components/schemas/json_AtlasRelatedTermHeader'
          type: array
        examples:
          description: An array of examples.
          items:
            type: string
          type: array
        isA:
          description: An array of related term headers indicating the is-a relationship.
          items:
            $ref: '#/components/schemas/json_AtlasRelatedTermHeader'
          type: array
        preferredTerms:
          description: An array of preferred related term headers.
          items:
            $ref: '#/components/schemas/json_AtlasRelatedTermHeader'
          type: array
        preferredToTerms:
          description: An array of related term headers that are preferred to.
          items:
            $ref: '#/components/schemas/json_AtlasRelatedTermHeader'
          type: array
        replacedBy:
          description: An array of related term headers that are replaced by.
          items:
            $ref: '#/components/schemas/json_AtlasRelatedTermHeader'
          type: array
        replacementTerms:
          description: An array of related term headers for replacement.
          items:
            $ref: '#/components/schemas/json_AtlasRelatedTermHeader'
          type: array
        seeAlso:
          description: An array of related term headers for see also.
          items:
            $ref: '#/components/schemas/json_AtlasRelatedTermHeader'
          type: array
        synonyms:
          description: An array of related term headers as synonyms.
          items:
            $ref: '#/components/schemas/json_AtlasRelatedTermHeader'
          type: array
        translatedTerms:
          description: An array of translated related term headers.
          items:
            $ref: '#/components/schemas/json_AtlasRelatedTermHeader'
          type: array
        translationTerms:
          description: An array of related term headers for translation.
          items:
            $ref: '#/components/schemas/json_AtlasRelatedTermHeader'
          type: array
        usage:
          description: The usage of the term.
          type: string
        validValues:
          description: An array of related term headers as valid values.
          items:
            $ref: '#/components/schemas/json_AtlasRelatedTermHeader'
          type: array
        validValuesFor:
          description: An array of related term headers as valid values for other
            records.
          items:
            $ref: '#/components/schemas/json_AtlasRelatedTermHeader'
          type: array
      type: object
    json_AtlasRelatedObjectId_allOf:
      properties:
        displayText:
          description: The display text.
          type: string
        entityStatus:
          $ref: '#/components/schemas/json_Status'
        relationshipAttributes:
          $ref: '#/components/schemas/json_AtlasStruct'
        relationshipGuid:
          description: The GUID of the relationship.
          type: string
        relationshipStatus:
          $ref: '#/components/schemas/json_Status_AtlasRelationship'
      type: object
    json_AtlasRelationship_allOf:
      properties:
        blockedPropagatedClassifications:
          description: An array of blocked propagated classifications.
          items:
            $ref: '#/components/schemas/json_AtlasClassification'
          type: array
        createTime:
          description: The created time of the record.
          type: number
        createdBy:
          description: The user who created the record.
          type: string
        end1:
          $ref: '#/components/schemas/json_AtlasObjectId'
        end2:
          $ref: '#/components/schemas/json_AtlasObjectId'
        guid:
          description: The GUID of the relationship.
          type: string
        homeId:
          description: The home ID of the relationship.
          type: string
        label:
          description: The label of the relationship.
          type: string
        propagateTags:
          $ref: '#/components/schemas/json_PropagateTags'
        propagatedClassifications:
          description: An array of propagated classifications.
          items:
            $ref: '#/components/schemas/json_AtlasClassification'
          type: array
        provenanceType:
          description: Used to record the provenance of an instance of an entity or
            relationship
          type: number
        status:
          $ref: '#/components/schemas/json_Status_AtlasRelationship'
        updateTime:
          description: The update time of the record.
          type: number
        updatedBy:
          description: The user who updated the record.
          type: string
        version:
          description: The version of the relationship.
          type: number
      type: object
    json_AtlasRelationshipDef_allOf:
      properties:
        endDef1:
          $ref: '#/components/schemas/json_AtlasRelationshipEndDef'
        endDef2:
          $ref: '#/components/schemas/json_AtlasRelationshipEndDef'
        propagateTags:
          $ref: '#/components/schemas/json_PropagateTags'
        relationshipCategory:
          $ref: '#/components/schemas/json_RelationshipCategory'
        relationshipLabel:
          description: The label of the relationship.
          type: string
      type: object
    json_AtlasStructDef_allOf:
      properties:
        attributeDefs:
          description: An array of attribute definitions.
          items:
            $ref: '#/components/schemas/json_AtlasAttributeDef'
          type: array
      type: object
    json_TypeStatistics_typeStatistics:
      example:
        count: 0
      properties:
        count:
          description: The entity count of this type.
          format: int32
          type: integer
      type: object
    json_AtlasUserSavedSearch_allOf:
      properties:
        name:
          description: The name of the saved search.
          type: string
        ownerName:
          description: The owner name of the saved search.
          type: string
        searchParameters:
          $ref: '#/components/schemas/json_SearchParameters'
        searchType:
          $ref: '#/components/schemas/json_SavedSearchType'
        uiParameters:
          description: The UI parameters.
          type: string
      type: object
    json_ImportCSVOperation_properties:
      example:
        importedTerms: 1.4658129805029452
        totalTermsDetect: 5.962133916683182
      properties:
        importedTerms:
          description: Term numbers that already imported successfully
          type: number
        totalTermsDetect:
          description: Total term numbers that detected in csv
          type: number
      type: object
    json_ImportCSVOperation_error:
      example:
        errorMessage: errorMessage
        errorCode: 5.637376656633329
      properties:
        errorCode:
          description: Error code from async import job if fail
          type: number
        errorMessage:
          description: Error message from async import job if fail
          type: string
      type: object
    xml_ns0_PList_allOf:
      properties:
        list:
          description: An array of objects.
          items:
            properties: {}
            type: object
          type: array
          xml:
            namespace: ""
        pageSize:
          description: The size of the page.
          format: int32
          type: integer
          xml:
            namespace: ""
        sortBy:
          description: The sorted by field.
          type: string
          xml:
            namespace: ""
        sortType:
          $ref: '#/components/schemas/xml_ns0_sortType'
        startIndex:
          description: The start index of the page.
          format: int64
          type: integer
          xml:
            namespace: ""
        totalCount:
          description: The total count of items.
          format: int64
          type: integer
          xml:
            namespace: ""
      type: object
    xml_ns0_searchFilter_allOf:
      properties:
        getCount:
          description: Determines if get the count.
          type: boolean
          xml:
            namespace: ""
        maxRows:
          description: The maximum of rows.
          format: int64
          type: integer
          xml:
            namespace: ""
        params:
          description: The parameter of the search.
          properties: {}
          type: object
          xml:
            namespace: ""
        sortBy:
          description: The sorted by field.
          type: string
          xml:
            namespace: ""
        sortType:
          $ref: '#/components/schemas/xml_ns0_sortType'
        startIndex:
          description: The start index of the search.
          format: int64
          type: integer
          xml:
            namespace: ""
      type: object
    xml_ns0_timeBoundary_allOf:
      properties:
        endTime:
          description: The end of the time boundary.
          type: string
          xml:
            namespace: ""
        startTime:
          description: The start of the time boundary.
          type: string
          xml:
            namespace: ""
        timeZone:
          description: The timezone of the time boundary.
          type: string
          xml:
            namespace: ""
      type: object
  securitySchemes:
    azure_auth:
      description: Azure Active Directory OAuth2 Flow.
      flows:
        implicit:
          authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
          scopes:
            user_impersonation: impersonate your user account
      type: oauth2
x-original-swagger-version: "2.0"

