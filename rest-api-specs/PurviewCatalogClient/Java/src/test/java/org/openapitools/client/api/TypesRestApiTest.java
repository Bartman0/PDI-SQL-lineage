/*
 * Purview Catalog Service REST API Document
 * Purview Catalog Service is a fully managed cloud service whose users can discover the data sources they need and understand the data sources they find. At the same time, Data Catalog helps organizations get more value from their existing investments. This swagger defines REST API of the Hot Tier of Data Catalog Gen 2.
 *
 * The version of the OpenAPI document: 2020-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.JsonAtlasBaseTypeDef;
import org.openapitools.client.model.JsonAtlasClassificationDef;
import org.openapitools.client.model.JsonAtlasEntityDef;
import org.openapitools.client.model.JsonAtlasEnumDef;
import org.openapitools.client.model.JsonAtlasRelationshipDef;
import org.openapitools.client.model.JsonAtlasStructDef;
import org.openapitools.client.model.JsonAtlasTypeDefHeader;
import org.openapitools.client.model.JsonAtlasTypesDef;
import org.openapitools.client.model.JsonTermTemplateDef;
import org.openapitools.client.model.JsonTypeStatistics;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TypesRestApi
 */
@Ignore
public class TypesRestApiTest {

    private final TypesRestApi api = new TypesRestApi();

    
    /**
     * 
     *
     * Creates all atlas type definitions in bulk, only new definitions will be created. Any changes to the existing definitions will be discarded.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void typesRESTCreateAtlasTypeDefsTest() throws ApiException {
        JsonAtlasTypesDef typesDef = null;
        JsonAtlasTypesDef response = api.typesRESTCreateAtlasTypeDefs(typesDef);

        // TODO: test validations
    }
    
    /**
     * Delete API for type identified by its name.
     *
     * Delete API for type identified by its name.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void typesRESTDeleteAtlasTypeByNameTest() throws ApiException {
        String name = null;
        api.typesRESTDeleteAtlasTypeByName(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Deletes API for all types in bulk.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void typesRESTDeleteAtlasTypeDefsTest() throws ApiException {
        JsonAtlasTypesDef typesDef = null;
        api.typesRESTDeleteAtlasTypeDefs(typesDef);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets all type definitions in Atlas in bulk.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void typesRESTGetAllTypeDefsTest() throws ApiException {
        Boolean includeTermTemplate = null;
        String type = null;
        JsonAtlasTypesDef response = api.typesRESTGetAllTypeDefs(includeTermTemplate, type);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets the classification definition for the given GUID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void typesRESTGetClassificationDefByGuidTest() throws ApiException {
        String guid = null;
        JsonAtlasClassificationDef response = api.typesRESTGetClassificationDefByGuid(guid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets the classification definition by its name (unique).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void typesRESTGetClassificationDefByNameTest() throws ApiException {
        String name = null;
        JsonAtlasClassificationDef response = api.typesRESTGetClassificationDefByName(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets the Entity definition for the given GUID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void typesRESTGetEntityDefByGuidTest() throws ApiException {
        String guid = null;
        JsonAtlasEntityDef response = api.typesRESTGetEntityDefByGuid(guid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets the entity definition by its name (unique).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void typesRESTGetEntityDefByNameTest() throws ApiException {
        String name = null;
        JsonAtlasEntityDef response = api.typesRESTGetEntityDefByName(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets the enum definition for the given GUID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void typesRESTGetEnumDefByGuidTest() throws ApiException {
        String guid = null;
        JsonAtlasEnumDef response = api.typesRESTGetEnumDefByGuid(guid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets the enum definition by its name (unique).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void typesRESTGetEnumDefByNameTest() throws ApiException {
        String name = null;
        JsonAtlasEnumDef response = api.typesRESTGetEnumDefByName(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets the relationship definition for the given GUID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void typesRESTGetRelationshipDefByGuidTest() throws ApiException {
        String guid = null;
        JsonAtlasRelationshipDef response = api.typesRESTGetRelationshipDefByGuid(guid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets the relationship definition by its name (unique).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void typesRESTGetRelationshipDefByNameTest() throws ApiException {
        String name = null;
        JsonAtlasRelationshipDef response = api.typesRESTGetRelationshipDefByName(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets the struct definition for the given GUID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void typesRESTGetStructDefByGuidTest() throws ApiException {
        String guid = null;
        JsonAtlasStructDef response = api.typesRESTGetStructDefByGuid(guid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets the struct definition by its name (unique).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void typesRESTGetStructDefByNameTest() throws ApiException {
        String name = null;
        JsonAtlasStructDef response = api.typesRESTGetStructDefByName(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets the term template definition for the given GUID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void typesRESTGetTermTemplateDefByGuidTest() throws ApiException {
        String guid = null;
        JsonTermTemplateDef response = api.typesRESTGetTermTemplateDefByGuid(guid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets the term template definition by its name (unique).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void typesRESTGetTermTemplateDefByNameTest() throws ApiException {
        String name = null;
        JsonTermTemplateDef response = api.typesRESTGetTermTemplateDefByName(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets the type definition for the given GUID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void typesRESTGetTypeDefByGuidTest() throws ApiException {
        String guid = null;
        JsonAtlasBaseTypeDef response = api.typesRESTGetTypeDefByGuid(guid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets the type definition by its name (unique).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void typesRESTGetTypeDefByNameTest() throws ApiException {
        String name = null;
        JsonAtlasBaseTypeDef response = api.typesRESTGetTypeDefByName(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Lists all type definitions returned as a list of minimal information header.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void typesRESTGetTypeDefHeadersTest() throws ApiException {
        Boolean includeTermTemplate = null;
        String type = null;
        List<JsonAtlasTypeDefHeader> response = api.typesRESTGetTypeDefHeaders(includeTermTemplate, type);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets type statistics.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void typesRESTGetTypeStatisticsTest() throws ApiException {
        JsonTypeStatistics response = api.typesRESTGetTypeStatistics();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Updates all types in bulk, changes detected in the type definitions would be persisted.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void typesRESTUpdateAtlasTypeDefsTest() throws ApiException {
        JsonAtlasTypesDef typesDef = null;
        JsonAtlasTypesDef response = api.typesRESTUpdateAtlasTypeDefs(typesDef);

        // TODO: test validations
    }
    
}
