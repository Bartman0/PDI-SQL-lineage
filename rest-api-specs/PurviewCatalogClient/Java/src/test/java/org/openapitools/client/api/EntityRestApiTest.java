/*
 * Purview Catalog Service REST API Document
 * Purview Catalog Service is a fully managed cloud service whose users can discover the data sources they need and understand the data sources they find. At the same time, Data Catalog helps organizations get more value from their existing investments. This swagger defines REST API of the Hot Tier of Data Catalog Gen 2.
 *
 * The version of the OpenAPI document: 2020-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.JsonAtlasClassification;
import org.openapitools.client.model.JsonAtlasClassifications;
import org.openapitools.client.model.JsonAtlasEntitiesWithExtInfo;
import org.openapitools.client.model.JsonAtlasEntityHeader;
import org.openapitools.client.model.JsonAtlasEntityHeaders;
import org.openapitools.client.model.JsonAtlasEntityWithExtInfo;
import org.openapitools.client.model.JsonClassificationAssociateRequest;
import org.openapitools.client.model.JsonEntityMutationResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EntityRestApi
 */
@Ignore
public class EntityRestApiTest {

    private final EntityRestApi api = new EntityRestApi();

    
    /**
     * 
     *
     * Associates a classification to multiple entities in bulk.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entityRESTAddClassificationTest() throws ApiException {
        JsonClassificationAssociateRequest request = null;
        api.entityRESTAddClassification(request);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Adds classifications to an existing entity represented by a GUID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entityRESTAddClassificationsTest() throws ApiException {
        String guid = null;
        List<JsonAtlasClassification> classifications = null;
        api.entityRESTAddClassifications(guid, classifications);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Adds classification to the entity identified by its type and unique attributes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entityRESTAddClassificationsByUniqueAttributeTest() throws ApiException {
        String typeName = null;
        List<JsonAtlasClassification> atlasClassificationArray = null;
        String attrColonQualifiedName = null;
        api.entityRESTAddClassificationsByUniqueAttribute(typeName, atlasClassificationArray, attrColonQualifiedName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Deletes a list of entities in bulk identified by their GUIDs or unique attributes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entityRESTBulkDeleteTest() throws ApiException {
        List<String> guid = null;
        JsonEntityMutationResponse response = api.entityRESTBulkDelete(guid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Creates or updates an entity in Atlas. Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName. Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entityRESTCreateOrUpdateTest() throws ApiException {
        JsonAtlasEntityWithExtInfo entity = null;
        JsonEntityMutationResponse response = api.entityRESTCreateOrUpdate(entity);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Creates or updates entities in Atlas in bulk. Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName. Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entityRESTCreateOrUpdateBulkTest() throws ApiException {
        JsonAtlasEntitiesWithExtInfo entities = null;
        JsonEntityMutationResponse response = api.entityRESTCreateOrUpdateBulk(entities);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Deletes an entity identified by its GUID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entityRESTDeleteByGuidTest() throws ApiException {
        String guid = null;
        JsonEntityMutationResponse response = api.entityRESTDeleteByGuid(guid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Deletes an entity identified by its type and unique attributes. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format: attr:&lt;attrName&gt;&#x3D;&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look something like this: DELETE /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute&#x3D;someValue.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entityRESTDeleteByUniqueAttributeTest() throws ApiException {
        String typeName = null;
        String attrColonQualifiedName = null;
        JsonEntityMutationResponse response = api.entityRESTDeleteByUniqueAttribute(typeName, attrColonQualifiedName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Deletes a given classification from an existing entity represented by a GUID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entityRESTDeleteClassificationTest() throws ApiException {
        String guid = null;
        String classificationName = null;
        api.entityRESTDeleteClassification(guid, classificationName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Deletes a given classification from an entity identified by its type and unique attributes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entityRESTDeleteClassificationByUniqueAttributeTest() throws ApiException {
        String typeName = null;
        String classificationName = null;
        String attrColonQualifiedName = null;
        api.entityRESTDeleteClassificationByUniqueAttribute(typeName, classificationName, attrColonQualifiedName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Lists entities in bulk identified by its GUIDs.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entityRESTGetByGuidsTest() throws ApiException {
        List<String> guid = null;
        Boolean minExtInfo = null;
        Boolean ignoreRelationships = null;
        JsonAtlasEntitiesWithExtInfo response = api.entityRESTGetByGuids(guid, minExtInfo, ignoreRelationships);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets complete definition of an entity given its GUID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entityRESTGetByIdTest() throws ApiException {
        String guid = null;
        Boolean minExtInfo = null;
        Boolean ignoreRelationships = null;
        JsonAtlasEntityWithExtInfo response = api.entityRESTGetById(guid, minExtInfo, ignoreRelationships);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets complete definition of an entity given its type and unique attribute. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format: attr:&lt;attrName&gt;&#x3D;&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look something like this: GET /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute&#x3D;someValue.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entityRESTGetByUniqueAttributesTest() throws ApiException {
        String typeName = null;
        Boolean minExtInfo = null;
        Boolean ignoreRelationships = null;
        String attrColonQualifiedName = null;
        JsonAtlasEntityWithExtInfo response = api.entityRESTGetByUniqueAttributes(typeName, minExtInfo, ignoreRelationships, attrColonQualifiedName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Lists classifications for a given entity represented by a GUID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entityRESTGetClassificationTest() throws ApiException {
        String guid = null;
        String classificationName = null;
        JsonAtlasClassification response = api.entityRESTGetClassification(guid, classificationName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Lists classifications for a given entity represented by a GUID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entityRESTGetClassificationsTest() throws ApiException {
        String guid = null;
        JsonAtlasClassifications response = api.entityRESTGetClassifications(guid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Bulk API to retrieve list of entities identified by its unique attributes.  In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format  typeName&#x3D;&lt;typeName&gt;&amp;attr_1:&lt;attrName&gt;&#x3D;&lt;attrValue&gt;&amp;attr_2:&lt;attrName&gt;&#x3D;&lt;attrValue&gt;&amp;attr_3:&lt;attrName&gt;&#x3D;&lt;attrValue&gt;  NOTE: The attrName should be an unique attribute for the given entity-type  The REST request would look something like this  GET /v2/entity/bulk/uniqueAttribute/type/hive_db?attr_0:qualifiedName&#x3D;db1@cl1&amp;attr_2:qualifiedName&#x3D;db2@cl1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entityRESTGetEntitiesByUniqueAttributesTest() throws ApiException {
        String typeName = null;
        Boolean minExtInfo = null;
        Boolean ignoreRelationships = null;
        String attrNColonQualifiedName = null;
        JsonAtlasEntitiesWithExtInfo response = api.entityRESTGetEntitiesByUniqueAttributes(typeName, minExtInfo, ignoreRelationships, attrNColonQualifiedName);

        // TODO: test validations
    }
    
    /**
     * Get entity header given its GUID.
     *
     * Get entity header given its GUID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entityRESTGetHeaderByIdTest() throws ApiException {
        String guid = null;
        JsonAtlasEntityHeader response = api.entityRESTGetHeaderById(guid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Updates entity partially - creates or updates entity attribute identified by its GUID. Supports only primitive attribute type and entity references. It does not support updation of complex types like arrays, and maps. Null updates are not possible.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entityRESTPartialUpdateEntityAttrByGuidTest() throws ApiException {
        String guid = null;
        String name = null;
        Object body = null;
        JsonEntityMutationResponse response = api.entityRESTPartialUpdateEntityAttrByGuid(guid, name, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Updates entity partially - Allows a subset of attributes to be updated on an entity which is identified by its type and unique attribute  eg: Referenceable.qualifiedName. Null updates are not possible. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format: attr:&lt;attrName&gt;&#x3D;&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look something like this: PUT /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute&#x3D;someValue.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entityRESTPartialUpdateEntityByUniqueAttrsTest() throws ApiException {
        String typeName = null;
        JsonAtlasEntityWithExtInfo atlasEntityWithExtInfo = null;
        String attrColonQualifiedName = null;
        JsonEntityMutationResponse response = api.entityRESTPartialUpdateEntityByUniqueAttrs(typeName, atlasEntityWithExtInfo, attrColonQualifiedName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * set classifications on entities in bulk.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entityRESTSetClassificationsTest() throws ApiException {
        JsonAtlasEntityHeaders entityHeaders = null;
        List<String> response = api.entityRESTSetClassifications(entityHeaders);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Updates classifications to an existing entity represented by a guid.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entityRESTUpdateClassificationsTest() throws ApiException {
        String guid = null;
        List<JsonAtlasClassification> classifications = null;
        api.entityRESTUpdateClassifications(guid, classifications);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Updates classification on an entity identified by its type and unique attributes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entityRESTUpdateClassificationsByUniqueAttributeTest() throws ApiException {
        String typeName = null;
        List<JsonAtlasClassification> atlasClassificationArray = null;
        String attrColonQualifiedName = null;
        api.entityRESTUpdateClassificationsByUniqueAttribute(typeName, atlasClassificationArray, attrColonQualifiedName);

        // TODO: test validations
    }
    
}
