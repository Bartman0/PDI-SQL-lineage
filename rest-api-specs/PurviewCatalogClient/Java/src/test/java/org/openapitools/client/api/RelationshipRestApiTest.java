/*
 * Purview Catalog Service REST API Document
 * Purview Catalog Service is a fully managed cloud service whose users can discover the data sources they need and understand the data sources they find. At the same time, Data Catalog helps organizations get more value from their existing investments. This swagger defines REST API of the Hot Tier of Data Catalog Gen 2.
 *
 * The version of the OpenAPI document: 2020-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.JsonAtlasRelationship;
import org.openapitools.client.model.JsonAtlasRelationshipWithExtInfo;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RelationshipRestApi
 */
@Ignore
public class RelationshipRestApiTest {

    private final RelationshipRestApi api = new RelationshipRestApi();

    
    /**
     * 
     *
     * Creates a new relationship between entities.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void relationshipRESTCreateTest() throws ApiException {
        JsonAtlasRelationship relationship = null;
        JsonAtlasRelationship response = api.relationshipRESTCreate(relationship);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Deletes a relationship between entities by its GUID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void relationshipRESTDeleteByIdTest() throws ApiException {
        String guid = null;
        api.relationshipRESTDeleteById(guid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets relationship information between entities by its GUID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void relationshipRESTGetById2Test() throws ApiException {
        String guid = null;
        Boolean extendedInfo = null;
        JsonAtlasRelationshipWithExtInfo response = api.relationshipRESTGetById2(guid, extendedInfo);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Updates an existing relationship between entities.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void relationshipRESTUpdateTest() throws ApiException {
        JsonAtlasRelationship relationship = null;
        JsonAtlasRelationship response = api.relationshipRESTUpdate(relationship);

        // TODO: test validations
    }
    
}
