/*
 * Purview Catalog Service REST API Document
 * Purview Catalog Service is a fully managed cloud service whose users can discover the data sources they need and understand the data sources they find. At the same time, Data Catalog helps organizations get more value from their existing investments. This swagger defines REST API of the Hot Tier of Data Catalog Gen 2.
 *
 * The version of the OpenAPI document: 2020-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.JsonAtlasBaseTypeDef;
import org.openapitools.client.model.JsonAtlasClassificationDef;
import org.openapitools.client.model.JsonAtlasEntityDef;
import org.openapitools.client.model.JsonAtlasEnumDef;
import org.openapitools.client.model.JsonAtlasRelationshipDef;
import org.openapitools.client.model.JsonAtlasStructDef;
import org.openapitools.client.model.JsonAtlasTypeDefHeader;
import org.openapitools.client.model.JsonAtlasTypesDef;
import org.openapitools.client.model.JsonTermTemplateDef;
import org.openapitools.client.model.JsonTypeStatistics;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TypesRestApi {
    private ApiClient localVarApiClient;

    public TypesRestApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TypesRestApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for typesRESTCreateAtlasTypeDefs
     * @param typesDef A composite wrapper object with corresponding lists of the type definition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful update of requested type definitions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> On validation failure for any type definitions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTCreateAtlasTypeDefsCall(JsonAtlasTypesDef typesDef, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = typesDef;

        // create path and map variables
        String localVarPath = "/atlas/v2/types/typedefs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call typesRESTCreateAtlasTypeDefsValidateBeforeCall(JsonAtlasTypesDef typesDef, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'typesDef' is set
        if (typesDef == null) {
            throw new ApiException("Missing the required parameter 'typesDef' when calling typesRESTCreateAtlasTypeDefs(Async)");
        }
        

        okhttp3.Call localVarCall = typesRESTCreateAtlasTypeDefsCall(typesDef, _callback);
        return localVarCall;

    }

    /**
     * 
     * Creates all atlas type definitions in bulk, only new definitions will be created. Any changes to the existing definitions will be discarded.
     * @param typesDef A composite wrapper object with corresponding lists of the type definition. (required)
     * @return JsonAtlasTypesDef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful update of requested type definitions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> On validation failure for any type definitions. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasTypesDef typesRESTCreateAtlasTypeDefs(JsonAtlasTypesDef typesDef) throws ApiException {
        ApiResponse<JsonAtlasTypesDef> localVarResp = typesRESTCreateAtlasTypeDefsWithHttpInfo(typesDef);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates all atlas type definitions in bulk, only new definitions will be created. Any changes to the existing definitions will be discarded.
     * @param typesDef A composite wrapper object with corresponding lists of the type definition. (required)
     * @return ApiResponse&lt;JsonAtlasTypesDef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful update of requested type definitions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> On validation failure for any type definitions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasTypesDef> typesRESTCreateAtlasTypeDefsWithHttpInfo(JsonAtlasTypesDef typesDef) throws ApiException {
        okhttp3.Call localVarCall = typesRESTCreateAtlasTypeDefsValidateBeforeCall(typesDef, null);
        Type localVarReturnType = new TypeToken<JsonAtlasTypesDef>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates all atlas type definitions in bulk, only new definitions will be created. Any changes to the existing definitions will be discarded.
     * @param typesDef A composite wrapper object with corresponding lists of the type definition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful update of requested type definitions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> On validation failure for any type definitions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTCreateAtlasTypeDefsAsync(JsonAtlasTypesDef typesDef, final ApiCallback<JsonAtlasTypesDef> _callback) throws ApiException {

        okhttp3.Call localVarCall = typesRESTCreateAtlasTypeDefsValidateBeforeCall(typesDef, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasTypesDef>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for typesRESTDeleteAtlasTypeByName
     * @param name The name of the type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> On successful deletion of the requested type definitions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> On validation failure for any type definitions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTDeleteAtlasTypeByNameCall(String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/types/typedef/name/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call typesRESTDeleteAtlasTypeByNameValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling typesRESTDeleteAtlasTypeByName(Async)");
        }
        

        okhttp3.Call localVarCall = typesRESTDeleteAtlasTypeByNameCall(name, _callback);
        return localVarCall;

    }

    /**
     * Delete API for type identified by its name.
     * Delete API for type identified by its name.
     * @param name The name of the type. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> On successful deletion of the requested type definitions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> On validation failure for any type definitions </td><td>  -  </td></tr>
     </table>
     */
    public void typesRESTDeleteAtlasTypeByName(String name) throws ApiException {
        typesRESTDeleteAtlasTypeByNameWithHttpInfo(name);
    }

    /**
     * Delete API for type identified by its name.
     * Delete API for type identified by its name.
     * @param name The name of the type. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> On successful deletion of the requested type definitions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> On validation failure for any type definitions </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> typesRESTDeleteAtlasTypeByNameWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = typesRESTDeleteAtlasTypeByNameValidateBeforeCall(name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete API for type identified by its name. (asynchronously)
     * Delete API for type identified by its name.
     * @param name The name of the type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> On successful deletion of the requested type definitions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> On validation failure for any type definitions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTDeleteAtlasTypeByNameAsync(String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = typesRESTDeleteAtlasTypeByNameValidateBeforeCall(name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for typesRESTDeleteAtlasTypeDefs
     * @param typesDef A composite object that captures all types to be deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK. On successful deletion of the requested type definitions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> On validation failure for any type definitions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTDeleteAtlasTypeDefsCall(JsonAtlasTypesDef typesDef, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = typesDef;

        // create path and map variables
        String localVarPath = "/atlas/v2/types/typedefs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call typesRESTDeleteAtlasTypeDefsValidateBeforeCall(JsonAtlasTypesDef typesDef, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'typesDef' is set
        if (typesDef == null) {
            throw new ApiException("Missing the required parameter 'typesDef' when calling typesRESTDeleteAtlasTypeDefs(Async)");
        }
        

        okhttp3.Call localVarCall = typesRESTDeleteAtlasTypeDefsCall(typesDef, _callback);
        return localVarCall;

    }

    /**
     * 
     * Deletes API for all types in bulk.
     * @param typesDef A composite object that captures all types to be deleted (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK. On successful deletion of the requested type definitions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> On validation failure for any type definitions. </td><td>  -  </td></tr>
     </table>
     */
    public void typesRESTDeleteAtlasTypeDefs(JsonAtlasTypesDef typesDef) throws ApiException {
        typesRESTDeleteAtlasTypeDefsWithHttpInfo(typesDef);
    }

    /**
     * 
     * Deletes API for all types in bulk.
     * @param typesDef A composite object that captures all types to be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK. On successful deletion of the requested type definitions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> On validation failure for any type definitions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> typesRESTDeleteAtlasTypeDefsWithHttpInfo(JsonAtlasTypesDef typesDef) throws ApiException {
        okhttp3.Call localVarCall = typesRESTDeleteAtlasTypeDefsValidateBeforeCall(typesDef, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes API for all types in bulk.
     * @param typesDef A composite object that captures all types to be deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK. On successful deletion of the requested type definitions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> On validation failure for any type definitions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTDeleteAtlasTypeDefsAsync(JsonAtlasTypesDef typesDef, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = typesRESTDeleteAtlasTypeDefsValidateBeforeCall(typesDef, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for typesRESTGetAllTypeDefs
     * @param includeTermTemplate Whether include termtemplatedef when return all typedefs. This is always true when search filter type&#x3D;term_template (optional, default to false)
     * @param type Typedef name as search filter when get typedefs. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. AtlasTypesDef with type definitions matching the search criteria or else returns empty list of type definitions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetAllTypeDefsCall(Boolean includeTermTemplate, String type, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/types/typedefs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeTermTemplate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTermTemplate", includeTermTemplate));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call typesRESTGetAllTypeDefsValidateBeforeCall(Boolean includeTermTemplate, String type, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = typesRESTGetAllTypeDefsCall(includeTermTemplate, type, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets all type definitions in Atlas in bulk.
     * @param includeTermTemplate Whether include termtemplatedef when return all typedefs. This is always true when search filter type&#x3D;term_template (optional, default to false)
     * @param type Typedef name as search filter when get typedefs. (optional, default to false)
     * @return JsonAtlasTypesDef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. AtlasTypesDef with type definitions matching the search criteria or else returns empty list of type definitions. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasTypesDef typesRESTGetAllTypeDefs(Boolean includeTermTemplate, String type) throws ApiException {
        ApiResponse<JsonAtlasTypesDef> localVarResp = typesRESTGetAllTypeDefsWithHttpInfo(includeTermTemplate, type);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all type definitions in Atlas in bulk.
     * @param includeTermTemplate Whether include termtemplatedef when return all typedefs. This is always true when search filter type&#x3D;term_template (optional, default to false)
     * @param type Typedef name as search filter when get typedefs. (optional, default to false)
     * @return ApiResponse&lt;JsonAtlasTypesDef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. AtlasTypesDef with type definitions matching the search criteria or else returns empty list of type definitions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasTypesDef> typesRESTGetAllTypeDefsWithHttpInfo(Boolean includeTermTemplate, String type) throws ApiException {
        okhttp3.Call localVarCall = typesRESTGetAllTypeDefsValidateBeforeCall(includeTermTemplate, type, null);
        Type localVarReturnType = new TypeToken<JsonAtlasTypesDef>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all type definitions in Atlas in bulk.
     * @param includeTermTemplate Whether include termtemplatedef when return all typedefs. This is always true when search filter type&#x3D;term_template (optional, default to false)
     * @param type Typedef name as search filter when get typedefs. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. AtlasTypesDef with type definitions matching the search criteria or else returns empty list of type definitions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetAllTypeDefsAsync(Boolean includeTermTemplate, String type, final ApiCallback<JsonAtlasTypesDef> _callback) throws ApiException {

        okhttp3.Call localVarCall = typesRESTGetAllTypeDefsValidateBeforeCall(includeTermTemplate, type, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasTypesDef>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for typesRESTGetClassificationDefByGuid
     * @param guid The globally unique identifier of the classification. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the classification definition by its GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given GUID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetClassificationDefByGuidCall(String guid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/types/classificationdef/guid/{guid}"
            .replaceAll("\\{" + "guid" + "\\}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call typesRESTGetClassificationDefByGuidValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling typesRESTGetClassificationDefByGuid(Async)");
        }
        

        okhttp3.Call localVarCall = typesRESTGetClassificationDefByGuidCall(guid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets the classification definition for the given GUID.
     * @param guid The globally unique identifier of the classification. (required)
     * @return JsonAtlasClassificationDef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the classification definition by its GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given GUID. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasClassificationDef typesRESTGetClassificationDefByGuid(String guid) throws ApiException {
        ApiResponse<JsonAtlasClassificationDef> localVarResp = typesRESTGetClassificationDefByGuidWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the classification definition for the given GUID.
     * @param guid The globally unique identifier of the classification. (required)
     * @return ApiResponse&lt;JsonAtlasClassificationDef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the classification definition by its GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given GUID. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasClassificationDef> typesRESTGetClassificationDefByGuidWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = typesRESTGetClassificationDefByGuidValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<JsonAtlasClassificationDef>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the classification definition for the given GUID.
     * @param guid The globally unique identifier of the classification. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the classification definition by its GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given GUID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetClassificationDefByGuidAsync(String guid, final ApiCallback<JsonAtlasClassificationDef> _callback) throws ApiException {

        okhttp3.Call localVarCall = typesRESTGetClassificationDefByGuidValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasClassificationDef>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for typesRESTGetClassificationDefByName
     * @param name The name of the classification. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the classification definition by its name. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given name. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetClassificationDefByNameCall(String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/types/classificationdef/name/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call typesRESTGetClassificationDefByNameValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling typesRESTGetClassificationDefByName(Async)");
        }
        

        okhttp3.Call localVarCall = typesRESTGetClassificationDefByNameCall(name, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets the classification definition by its name (unique).
     * @param name The name of the classification. (required)
     * @return JsonAtlasClassificationDef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the classification definition by its name. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given name. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasClassificationDef typesRESTGetClassificationDefByName(String name) throws ApiException {
        ApiResponse<JsonAtlasClassificationDef> localVarResp = typesRESTGetClassificationDefByNameWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the classification definition by its name (unique).
     * @param name The name of the classification. (required)
     * @return ApiResponse&lt;JsonAtlasClassificationDef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the classification definition by its name. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given name. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasClassificationDef> typesRESTGetClassificationDefByNameWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = typesRESTGetClassificationDefByNameValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<JsonAtlasClassificationDef>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the classification definition by its name (unique).
     * @param name The name of the classification. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the classification definition by its name. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given name. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetClassificationDefByNameAsync(String name, final ApiCallback<JsonAtlasClassificationDef> _callback) throws ApiException {

        okhttp3.Call localVarCall = typesRESTGetClassificationDefByNameValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasClassificationDef>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for typesRESTGetEntityDefByGuid
     * @param guid The globally unique identifier of the entity. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the entity definition by its GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On Failed lookup for the given GUID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetEntityDefByGuidCall(String guid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/types/entitydef/guid/{guid}"
            .replaceAll("\\{" + "guid" + "\\}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call typesRESTGetEntityDefByGuidValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling typesRESTGetEntityDefByGuid(Async)");
        }
        

        okhttp3.Call localVarCall = typesRESTGetEntityDefByGuidCall(guid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets the Entity definition for the given GUID.
     * @param guid The globally unique identifier of the entity. (required)
     * @return JsonAtlasEntityDef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the entity definition by its GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On Failed lookup for the given GUID. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasEntityDef typesRESTGetEntityDefByGuid(String guid) throws ApiException {
        ApiResponse<JsonAtlasEntityDef> localVarResp = typesRESTGetEntityDefByGuidWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the Entity definition for the given GUID.
     * @param guid The globally unique identifier of the entity. (required)
     * @return ApiResponse&lt;JsonAtlasEntityDef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the entity definition by its GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On Failed lookup for the given GUID. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasEntityDef> typesRESTGetEntityDefByGuidWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = typesRESTGetEntityDefByGuidValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<JsonAtlasEntityDef>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the Entity definition for the given GUID.
     * @param guid The globally unique identifier of the entity. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the entity definition by its GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On Failed lookup for the given GUID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetEntityDefByGuidAsync(String guid, final ApiCallback<JsonAtlasEntityDef> _callback) throws ApiException {

        okhttp3.Call localVarCall = typesRESTGetEntityDefByGuidValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasEntityDef>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for typesRESTGetEntityDefByName
     * @param name The name of the entity. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the entity definition by its name. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given name. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetEntityDefByNameCall(String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/types/entitydef/name/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call typesRESTGetEntityDefByNameValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling typesRESTGetEntityDefByName(Async)");
        }
        

        okhttp3.Call localVarCall = typesRESTGetEntityDefByNameCall(name, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets the entity definition by its name (unique).
     * @param name The name of the entity. (required)
     * @return JsonAtlasEntityDef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the entity definition by its name. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given name. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasEntityDef typesRESTGetEntityDefByName(String name) throws ApiException {
        ApiResponse<JsonAtlasEntityDef> localVarResp = typesRESTGetEntityDefByNameWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the entity definition by its name (unique).
     * @param name The name of the entity. (required)
     * @return ApiResponse&lt;JsonAtlasEntityDef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the entity definition by its name. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given name. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasEntityDef> typesRESTGetEntityDefByNameWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = typesRESTGetEntityDefByNameValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<JsonAtlasEntityDef>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the entity definition by its name (unique).
     * @param name The name of the entity. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the entity definition by its name. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given name. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetEntityDefByNameAsync(String name, final ApiCallback<JsonAtlasEntityDef> _callback) throws ApiException {

        okhttp3.Call localVarCall = typesRESTGetEntityDefByNameValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasEntityDef>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for typesRESTGetEnumDefByGuid
     * @param guid The globally unique identifier of the enum. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the enum definition by its GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given GUID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetEnumDefByGuidCall(String guid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/types/enumdef/guid/{guid}"
            .replaceAll("\\{" + "guid" + "\\}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call typesRESTGetEnumDefByGuidValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling typesRESTGetEnumDefByGuid(Async)");
        }
        

        okhttp3.Call localVarCall = typesRESTGetEnumDefByGuidCall(guid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets the enum definition for the given GUID.
     * @param guid The globally unique identifier of the enum. (required)
     * @return JsonAtlasEnumDef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the enum definition by its GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given GUID. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasEnumDef typesRESTGetEnumDefByGuid(String guid) throws ApiException {
        ApiResponse<JsonAtlasEnumDef> localVarResp = typesRESTGetEnumDefByGuidWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the enum definition for the given GUID.
     * @param guid The globally unique identifier of the enum. (required)
     * @return ApiResponse&lt;JsonAtlasEnumDef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the enum definition by its GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given GUID. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasEnumDef> typesRESTGetEnumDefByGuidWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = typesRESTGetEnumDefByGuidValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<JsonAtlasEnumDef>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the enum definition for the given GUID.
     * @param guid The globally unique identifier of the enum. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the enum definition by its GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given GUID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetEnumDefByGuidAsync(String guid, final ApiCallback<JsonAtlasEnumDef> _callback) throws ApiException {

        okhttp3.Call localVarCall = typesRESTGetEnumDefByGuidValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasEnumDef>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for typesRESTGetEnumDefByName
     * @param name The name of the enum. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the enum definition by its name. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given name. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetEnumDefByNameCall(String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/types/enumdef/name/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call typesRESTGetEnumDefByNameValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling typesRESTGetEnumDefByName(Async)");
        }
        

        okhttp3.Call localVarCall = typesRESTGetEnumDefByNameCall(name, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets the enum definition by its name (unique).
     * @param name The name of the enum. (required)
     * @return JsonAtlasEnumDef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the enum definition by its name. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given name. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasEnumDef typesRESTGetEnumDefByName(String name) throws ApiException {
        ApiResponse<JsonAtlasEnumDef> localVarResp = typesRESTGetEnumDefByNameWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the enum definition by its name (unique).
     * @param name The name of the enum. (required)
     * @return ApiResponse&lt;JsonAtlasEnumDef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the enum definition by its name. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given name. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasEnumDef> typesRESTGetEnumDefByNameWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = typesRESTGetEnumDefByNameValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<JsonAtlasEnumDef>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the enum definition by its name (unique).
     * @param name The name of the enum. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the enum definition by its name. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given name. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetEnumDefByNameAsync(String name, final ApiCallback<JsonAtlasEnumDef> _callback) throws ApiException {

        okhttp3.Call localVarCall = typesRESTGetEnumDefByNameValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasEnumDef>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for typesRESTGetRelationshipDefByGuid
     * @param guid The globally unique identifier of the relationship. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the relationship definition by its GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given GUID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetRelationshipDefByGuidCall(String guid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/types/relationshipdef/guid/{guid}"
            .replaceAll("\\{" + "guid" + "\\}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call typesRESTGetRelationshipDefByGuidValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling typesRESTGetRelationshipDefByGuid(Async)");
        }
        

        okhttp3.Call localVarCall = typesRESTGetRelationshipDefByGuidCall(guid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets the relationship definition for the given GUID.
     * @param guid The globally unique identifier of the relationship. (required)
     * @return JsonAtlasRelationshipDef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the relationship definition by its GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given GUID. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasRelationshipDef typesRESTGetRelationshipDefByGuid(String guid) throws ApiException {
        ApiResponse<JsonAtlasRelationshipDef> localVarResp = typesRESTGetRelationshipDefByGuidWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the relationship definition for the given GUID.
     * @param guid The globally unique identifier of the relationship. (required)
     * @return ApiResponse&lt;JsonAtlasRelationshipDef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the relationship definition by its GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given GUID. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasRelationshipDef> typesRESTGetRelationshipDefByGuidWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = typesRESTGetRelationshipDefByGuidValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<JsonAtlasRelationshipDef>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the relationship definition for the given GUID.
     * @param guid The globally unique identifier of the relationship. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the relationship definition by its GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given GUID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetRelationshipDefByGuidAsync(String guid, final ApiCallback<JsonAtlasRelationshipDef> _callback) throws ApiException {

        okhttp3.Call localVarCall = typesRESTGetRelationshipDefByGuidValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasRelationshipDef>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for typesRESTGetRelationshipDefByName
     * @param name The name of the relationship. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the relationship definition by its name. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given name. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetRelationshipDefByNameCall(String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/types/relationshipdef/name/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call typesRESTGetRelationshipDefByNameValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling typesRESTGetRelationshipDefByName(Async)");
        }
        

        okhttp3.Call localVarCall = typesRESTGetRelationshipDefByNameCall(name, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets the relationship definition by its name (unique).
     * @param name The name of the relationship. (required)
     * @return JsonAtlasRelationshipDef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the relationship definition by its name. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given name. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasRelationshipDef typesRESTGetRelationshipDefByName(String name) throws ApiException {
        ApiResponse<JsonAtlasRelationshipDef> localVarResp = typesRESTGetRelationshipDefByNameWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the relationship definition by its name (unique).
     * @param name The name of the relationship. (required)
     * @return ApiResponse&lt;JsonAtlasRelationshipDef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the relationship definition by its name. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given name. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasRelationshipDef> typesRESTGetRelationshipDefByNameWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = typesRESTGetRelationshipDefByNameValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<JsonAtlasRelationshipDef>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the relationship definition by its name (unique).
     * @param name The name of the relationship. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the relationship definition by its name. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given name. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetRelationshipDefByNameAsync(String name, final ApiCallback<JsonAtlasRelationshipDef> _callback) throws ApiException {

        okhttp3.Call localVarCall = typesRESTGetRelationshipDefByNameValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasRelationshipDef>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for typesRESTGetStructDefByGuid
     * @param guid The globally unique identifier of the struct. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the struct definition by its GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given GUID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetStructDefByGuidCall(String guid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/types/structdef/guid/{guid}"
            .replaceAll("\\{" + "guid" + "\\}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call typesRESTGetStructDefByGuidValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling typesRESTGetStructDefByGuid(Async)");
        }
        

        okhttp3.Call localVarCall = typesRESTGetStructDefByGuidCall(guid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets the struct definition for the given GUID.
     * @param guid The globally unique identifier of the struct. (required)
     * @return JsonAtlasStructDef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the struct definition by its GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given GUID. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasStructDef typesRESTGetStructDefByGuid(String guid) throws ApiException {
        ApiResponse<JsonAtlasStructDef> localVarResp = typesRESTGetStructDefByGuidWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the struct definition for the given GUID.
     * @param guid The globally unique identifier of the struct. (required)
     * @return ApiResponse&lt;JsonAtlasStructDef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the struct definition by its GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given GUID. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasStructDef> typesRESTGetStructDefByGuidWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = typesRESTGetStructDefByGuidValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<JsonAtlasStructDef>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the struct definition for the given GUID.
     * @param guid The globally unique identifier of the struct. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the struct definition by its GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given GUID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetStructDefByGuidAsync(String guid, final ApiCallback<JsonAtlasStructDef> _callback) throws ApiException {

        okhttp3.Call localVarCall = typesRESTGetStructDefByGuidValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasStructDef>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for typesRESTGetStructDefByName
     * @param name The name of the struct. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the struct definition by its name. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given name. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetStructDefByNameCall(String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/types/structdef/name/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call typesRESTGetStructDefByNameValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling typesRESTGetStructDefByName(Async)");
        }
        

        okhttp3.Call localVarCall = typesRESTGetStructDefByNameCall(name, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets the struct definition by its name (unique).
     * @param name The name of the struct. (required)
     * @return JsonAtlasStructDef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the struct definition by its name. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given name. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasStructDef typesRESTGetStructDefByName(String name) throws ApiException {
        ApiResponse<JsonAtlasStructDef> localVarResp = typesRESTGetStructDefByNameWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the struct definition by its name (unique).
     * @param name The name of the struct. (required)
     * @return ApiResponse&lt;JsonAtlasStructDef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the struct definition by its name. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given name. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasStructDef> typesRESTGetStructDefByNameWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = typesRESTGetStructDefByNameValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<JsonAtlasStructDef>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the struct definition by its name (unique).
     * @param name The name of the struct. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the struct definition by its name. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given name. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetStructDefByNameAsync(String name, final ApiCallback<JsonAtlasStructDef> _callback) throws ApiException {

        okhttp3.Call localVarCall = typesRESTGetStructDefByNameValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasStructDef>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for typesRESTGetTermTemplateDefByGuid
     * @param guid The globally unique identifier of the term template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the term template definition by its GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given GUID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetTermTemplateDefByGuidCall(String guid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/types/termtemplatedef/guid/{guid}"
            .replaceAll("\\{" + "guid" + "\\}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call typesRESTGetTermTemplateDefByGuidValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling typesRESTGetTermTemplateDefByGuid(Async)");
        }
        

        okhttp3.Call localVarCall = typesRESTGetTermTemplateDefByGuidCall(guid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets the term template definition for the given GUID.
     * @param guid The globally unique identifier of the term template. (required)
     * @return JsonTermTemplateDef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the term template definition by its GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given GUID. </td><td>  -  </td></tr>
     </table>
     */
    public JsonTermTemplateDef typesRESTGetTermTemplateDefByGuid(String guid) throws ApiException {
        ApiResponse<JsonTermTemplateDef> localVarResp = typesRESTGetTermTemplateDefByGuidWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the term template definition for the given GUID.
     * @param guid The globally unique identifier of the term template. (required)
     * @return ApiResponse&lt;JsonTermTemplateDef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the term template definition by its GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given GUID. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonTermTemplateDef> typesRESTGetTermTemplateDefByGuidWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = typesRESTGetTermTemplateDefByGuidValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<JsonTermTemplateDef>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the term template definition for the given GUID.
     * @param guid The globally unique identifier of the term template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the term template definition by its GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given GUID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetTermTemplateDefByGuidAsync(String guid, final ApiCallback<JsonTermTemplateDef> _callback) throws ApiException {

        okhttp3.Call localVarCall = typesRESTGetTermTemplateDefByGuidValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<JsonTermTemplateDef>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for typesRESTGetTermTemplateDefByName
     * @param name The name of the term template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the term template definition by its name. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given name. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetTermTemplateDefByNameCall(String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/types/termtemplatedef/name/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call typesRESTGetTermTemplateDefByNameValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling typesRESTGetTermTemplateDefByName(Async)");
        }
        

        okhttp3.Call localVarCall = typesRESTGetTermTemplateDefByNameCall(name, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets the term template definition by its name (unique).
     * @param name The name of the term template. (required)
     * @return JsonTermTemplateDef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the term template definition by its name. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given name. </td><td>  -  </td></tr>
     </table>
     */
    public JsonTermTemplateDef typesRESTGetTermTemplateDefByName(String name) throws ApiException {
        ApiResponse<JsonTermTemplateDef> localVarResp = typesRESTGetTermTemplateDefByNameWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the term template definition by its name (unique).
     * @param name The name of the term template. (required)
     * @return ApiResponse&lt;JsonTermTemplateDef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the term template definition by its name. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given name. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonTermTemplateDef> typesRESTGetTermTemplateDefByNameWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = typesRESTGetTermTemplateDefByNameValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<JsonTermTemplateDef>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the term template definition by its name (unique).
     * @param name The name of the term template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the term template definition by its name. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given name. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetTermTemplateDefByNameAsync(String name, final ApiCallback<JsonTermTemplateDef> _callback) throws ApiException {

        okhttp3.Call localVarCall = typesRESTGetTermTemplateDefByNameValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<JsonTermTemplateDef>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for typesRESTGetTypeDefByGuid
     * @param guid The globally unique identifier of the type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the type definition by its GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given GUID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetTypeDefByGuidCall(String guid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/types/typedef/guid/{guid}"
            .replaceAll("\\{" + "guid" + "\\}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call typesRESTGetTypeDefByGuidValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling typesRESTGetTypeDefByGuid(Async)");
        }
        

        okhttp3.Call localVarCall = typesRESTGetTypeDefByGuidCall(guid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets the type definition for the given GUID.
     * @param guid The globally unique identifier of the type. (required)
     * @return JsonAtlasBaseTypeDef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the type definition by its GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given GUID. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasBaseTypeDef typesRESTGetTypeDefByGuid(String guid) throws ApiException {
        ApiResponse<JsonAtlasBaseTypeDef> localVarResp = typesRESTGetTypeDefByGuidWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the type definition for the given GUID.
     * @param guid The globally unique identifier of the type. (required)
     * @return ApiResponse&lt;JsonAtlasBaseTypeDef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the type definition by its GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given GUID. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasBaseTypeDef> typesRESTGetTypeDefByGuidWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = typesRESTGetTypeDefByGuidValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<JsonAtlasBaseTypeDef>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the type definition for the given GUID.
     * @param guid The globally unique identifier of the type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the type definition by its GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given GUID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetTypeDefByGuidAsync(String guid, final ApiCallback<JsonAtlasBaseTypeDef> _callback) throws ApiException {

        okhttp3.Call localVarCall = typesRESTGetTypeDefByGuidValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasBaseTypeDef>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for typesRESTGetTypeDefByName
     * @param name The name of the type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the type definition by its name. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given name. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetTypeDefByNameCall(String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/types/typedef/name/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call typesRESTGetTypeDefByNameValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling typesRESTGetTypeDefByName(Async)");
        }
        

        okhttp3.Call localVarCall = typesRESTGetTypeDefByNameCall(name, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets the type definition by its name (unique).
     * @param name The name of the type. (required)
     * @return JsonAtlasBaseTypeDef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the type definition by its name. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given name. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasBaseTypeDef typesRESTGetTypeDefByName(String name) throws ApiException {
        ApiResponse<JsonAtlasBaseTypeDef> localVarResp = typesRESTGetTypeDefByNameWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the type definition by its name (unique).
     * @param name The name of the type. (required)
     * @return ApiResponse&lt;JsonAtlasBaseTypeDef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the type definition by its name. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given name. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasBaseTypeDef> typesRESTGetTypeDefByNameWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = typesRESTGetTypeDefByNameValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<JsonAtlasBaseTypeDef>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the type definition by its name (unique).
     * @param name The name of the type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the the type definition by its name. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> On failed lookup for the given name. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetTypeDefByNameAsync(String name, final ApiCallback<JsonAtlasBaseTypeDef> _callback) throws ApiException {

        okhttp3.Call localVarCall = typesRESTGetTypeDefByNameValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasBaseTypeDef>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for typesRESTGetTypeDefHeaders
     * @param includeTermTemplate Whether include termtemplatedef when return all typedefs. This is always true when search filter type&#x3D;term_template (optional, default to false)
     * @param type Typedef name as search filter when get typedefs. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of AtlasTypeDefHeader matching the search criteria or an empty list if no match. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetTypeDefHeadersCall(Boolean includeTermTemplate, String type, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/types/typedefs/headers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeTermTemplate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTermTemplate", includeTermTemplate));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call typesRESTGetTypeDefHeadersValidateBeforeCall(Boolean includeTermTemplate, String type, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = typesRESTGetTypeDefHeadersCall(includeTermTemplate, type, _callback);
        return localVarCall;

    }

    /**
     * 
     * Lists all type definitions returned as a list of minimal information header.
     * @param includeTermTemplate Whether include termtemplatedef when return all typedefs. This is always true when search filter type&#x3D;term_template (optional, default to false)
     * @param type Typedef name as search filter when get typedefs. (optional, default to false)
     * @return List&lt;JsonAtlasTypeDefHeader&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of AtlasTypeDefHeader matching the search criteria or an empty list if no match. </td><td>  -  </td></tr>
     </table>
     */
    public List<JsonAtlasTypeDefHeader> typesRESTGetTypeDefHeaders(Boolean includeTermTemplate, String type) throws ApiException {
        ApiResponse<List<JsonAtlasTypeDefHeader>> localVarResp = typesRESTGetTypeDefHeadersWithHttpInfo(includeTermTemplate, type);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all type definitions returned as a list of minimal information header.
     * @param includeTermTemplate Whether include termtemplatedef when return all typedefs. This is always true when search filter type&#x3D;term_template (optional, default to false)
     * @param type Typedef name as search filter when get typedefs. (optional, default to false)
     * @return ApiResponse&lt;List&lt;JsonAtlasTypeDefHeader&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of AtlasTypeDefHeader matching the search criteria or an empty list if no match. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<JsonAtlasTypeDefHeader>> typesRESTGetTypeDefHeadersWithHttpInfo(Boolean includeTermTemplate, String type) throws ApiException {
        okhttp3.Call localVarCall = typesRESTGetTypeDefHeadersValidateBeforeCall(includeTermTemplate, type, null);
        Type localVarReturnType = new TypeToken<List<JsonAtlasTypeDefHeader>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all type definitions returned as a list of minimal information header.
     * @param includeTermTemplate Whether include termtemplatedef when return all typedefs. This is always true when search filter type&#x3D;term_template (optional, default to false)
     * @param type Typedef name as search filter when get typedefs. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of AtlasTypeDefHeader matching the search criteria or an empty list if no match. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetTypeDefHeadersAsync(Boolean includeTermTemplate, String type, final ApiCallback<List<JsonAtlasTypeDefHeader>> _callback) throws ApiException {

        okhttp3.Call localVarCall = typesRESTGetTypeDefHeadersValidateBeforeCall(includeTermTemplate, type, _callback);
        Type localVarReturnType = new TypeToken<List<JsonAtlasTypeDefHeader>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for typesRESTGetTypeStatistics
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful retrieve types and corresponding statistics. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetTypeStatisticsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/types/statistics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call typesRESTGetTypeStatisticsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = typesRESTGetTypeStatisticsCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Gets type statistics.
     * @return JsonTypeStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful retrieve types and corresponding statistics. </td><td>  -  </td></tr>
     </table>
     */
    public JsonTypeStatistics typesRESTGetTypeStatistics() throws ApiException {
        ApiResponse<JsonTypeStatistics> localVarResp = typesRESTGetTypeStatisticsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Gets type statistics.
     * @return ApiResponse&lt;JsonTypeStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful retrieve types and corresponding statistics. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonTypeStatistics> typesRESTGetTypeStatisticsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = typesRESTGetTypeStatisticsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<JsonTypeStatistics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets type statistics.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful retrieve types and corresponding statistics. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTGetTypeStatisticsAsync(final ApiCallback<JsonTypeStatistics> _callback) throws ApiException {

        okhttp3.Call localVarCall = typesRESTGetTypeStatisticsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<JsonTypeStatistics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for typesRESTUpdateAtlasTypeDefs
     * @param typesDef A composite object that captures all type definition changes. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful update of requested type definitions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> On validation failure for any type definitions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTUpdateAtlasTypeDefsCall(JsonAtlasTypesDef typesDef, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = typesDef;

        // create path and map variables
        String localVarPath = "/atlas/v2/types/typedefs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call typesRESTUpdateAtlasTypeDefsValidateBeforeCall(JsonAtlasTypesDef typesDef, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'typesDef' is set
        if (typesDef == null) {
            throw new ApiException("Missing the required parameter 'typesDef' when calling typesRESTUpdateAtlasTypeDefs(Async)");
        }
        

        okhttp3.Call localVarCall = typesRESTUpdateAtlasTypeDefsCall(typesDef, _callback);
        return localVarCall;

    }

    /**
     * 
     * Updates all types in bulk, changes detected in the type definitions would be persisted.
     * @param typesDef A composite object that captures all type definition changes. (required)
     * @return JsonAtlasTypesDef
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful update of requested type definitions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> On validation failure for any type definitions. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasTypesDef typesRESTUpdateAtlasTypeDefs(JsonAtlasTypesDef typesDef) throws ApiException {
        ApiResponse<JsonAtlasTypesDef> localVarResp = typesRESTUpdateAtlasTypeDefsWithHttpInfo(typesDef);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates all types in bulk, changes detected in the type definitions would be persisted.
     * @param typesDef A composite object that captures all type definition changes. (required)
     * @return ApiResponse&lt;JsonAtlasTypesDef&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful update of requested type definitions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> On validation failure for any type definitions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasTypesDef> typesRESTUpdateAtlasTypeDefsWithHttpInfo(JsonAtlasTypesDef typesDef) throws ApiException {
        okhttp3.Call localVarCall = typesRESTUpdateAtlasTypeDefsValidateBeforeCall(typesDef, null);
        Type localVarReturnType = new TypeToken<JsonAtlasTypesDef>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates all types in bulk, changes detected in the type definitions would be persisted.
     * @param typesDef A composite object that captures all type definition changes. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful update of requested type definitions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> On validation failure for any type definitions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call typesRESTUpdateAtlasTypeDefsAsync(JsonAtlasTypesDef typesDef, final ApiCallback<JsonAtlasTypesDef> _callback) throws ApiException {

        okhttp3.Call localVarCall = typesRESTUpdateAtlasTypeDefsValidateBeforeCall(typesDef, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasTypesDef>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
