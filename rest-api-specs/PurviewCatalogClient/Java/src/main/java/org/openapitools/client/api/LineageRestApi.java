/*
 * Purview Catalog Service REST API Document
 * Purview Catalog Service is a fully managed cloud service whose users can discover the data sources they need and understand the data sources they find. At the same time, Data Catalog helps organizations get more value from their existing investments. This swagger defines REST API of the Hot Tier of Data Catalog Gen 2.
 *
 * The version of the OpenAPI document: 2020-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.JsonAtlasLineageInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LineageRestApi {
    private ApiClient localVarApiClient;

    public LineageRestApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LineageRestApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for lineageRESTGetLineageGraph
     * @param guid The globally unique identifier of the entity. (required)
     * @param direction The direction of the lineage, which could be INPUT, OUTPUT or BOTH. (required)
     * @param depth The number of hops for lineage. (optional, default to 3)
     * @param width The number of max expanding width in lineage. (optional, default to 10)
     * @param includeParent True to include the parent chain in the response. (optional)
     * @param getDerivedLineage True to include derived lineage in the response (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If Lineage exists for the given entity. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad query parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If no lineage is found for the given entity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineageRESTGetLineageGraphCall(String guid, String direction, Integer depth, Integer width, Boolean includeParent, Boolean getDerivedLineage, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/lineage/{guid}"
            .replaceAll("\\{" + "guid" + "\\}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (includeParent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeParent", includeParent));
        }

        if (getDerivedLineage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("getDerivedLineage", getDerivedLineage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lineageRESTGetLineageGraphValidateBeforeCall(String guid, String direction, Integer depth, Integer width, Boolean includeParent, Boolean getDerivedLineage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling lineageRESTGetLineageGraph(Async)");
        }
        
        // verify the required parameter 'direction' is set
        if (direction == null) {
            throw new ApiException("Missing the required parameter 'direction' when calling lineageRESTGetLineageGraph(Async)");
        }
        

        okhttp3.Call localVarCall = lineageRESTGetLineageGraphCall(guid, direction, depth, width, includeParent, getDerivedLineage, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets lineage info about the specified entity by GUID.
     * @param guid The globally unique identifier of the entity. (required)
     * @param direction The direction of the lineage, which could be INPUT, OUTPUT or BOTH. (required)
     * @param depth The number of hops for lineage. (optional, default to 3)
     * @param width The number of max expanding width in lineage. (optional, default to 10)
     * @param includeParent True to include the parent chain in the response. (optional)
     * @param getDerivedLineage True to include derived lineage in the response (optional)
     * @return JsonAtlasLineageInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If Lineage exists for the given entity. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad query parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If no lineage is found for the given entity. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasLineageInfo lineageRESTGetLineageGraph(String guid, String direction, Integer depth, Integer width, Boolean includeParent, Boolean getDerivedLineage) throws ApiException {
        ApiResponse<JsonAtlasLineageInfo> localVarResp = lineageRESTGetLineageGraphWithHttpInfo(guid, direction, depth, width, includeParent, getDerivedLineage);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets lineage info about the specified entity by GUID.
     * @param guid The globally unique identifier of the entity. (required)
     * @param direction The direction of the lineage, which could be INPUT, OUTPUT or BOTH. (required)
     * @param depth The number of hops for lineage. (optional, default to 3)
     * @param width The number of max expanding width in lineage. (optional, default to 10)
     * @param includeParent True to include the parent chain in the response. (optional)
     * @param getDerivedLineage True to include derived lineage in the response (optional)
     * @return ApiResponse&lt;JsonAtlasLineageInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If Lineage exists for the given entity. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad query parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If no lineage is found for the given entity. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasLineageInfo> lineageRESTGetLineageGraphWithHttpInfo(String guid, String direction, Integer depth, Integer width, Boolean includeParent, Boolean getDerivedLineage) throws ApiException {
        okhttp3.Call localVarCall = lineageRESTGetLineageGraphValidateBeforeCall(guid, direction, depth, width, includeParent, getDerivedLineage, null);
        Type localVarReturnType = new TypeToken<JsonAtlasLineageInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets lineage info about the specified entity by GUID.
     * @param guid The globally unique identifier of the entity. (required)
     * @param direction The direction of the lineage, which could be INPUT, OUTPUT or BOTH. (required)
     * @param depth The number of hops for lineage. (optional, default to 3)
     * @param width The number of max expanding width in lineage. (optional, default to 10)
     * @param includeParent True to include the parent chain in the response. (optional)
     * @param getDerivedLineage True to include derived lineage in the response (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If Lineage exists for the given entity. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad query parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If no lineage is found for the given entity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineageRESTGetLineageGraphAsync(String guid, String direction, Integer depth, Integer width, Boolean includeParent, Boolean getDerivedLineage, final ApiCallback<JsonAtlasLineageInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = lineageRESTGetLineageGraphValidateBeforeCall(guid, direction, depth, width, includeParent, getDerivedLineage, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasLineageInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lineageRESTNextLevelLineage
     * @param guid The globally unique identifier of the entity. (required)
     * @param direction The direction of the lineage, which could be INPUT, OUTPUT or BOTH. (required)
     * @param getDerivedLineage True to include derived lineage in the response (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param limit The page size - by default there is no paging. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If Lineage exists for the given entity. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad query parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If no lineage is found for the given entity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineageRESTNextLevelLineageCall(String guid, String direction, Boolean getDerivedLineage, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/lineage/{guid}/next/"
            .replaceAll("\\{" + "guid" + "\\}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (getDerivedLineage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("getDerivedLineage", getDerivedLineage));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lineageRESTNextLevelLineageValidateBeforeCall(String guid, String direction, Boolean getDerivedLineage, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling lineageRESTNextLevelLineage(Async)");
        }
        
        // verify the required parameter 'direction' is set
        if (direction == null) {
            throw new ApiException("Missing the required parameter 'direction' when calling lineageRESTNextLevelLineage(Async)");
        }
        

        okhttp3.Call localVarCall = lineageRESTNextLevelLineageCall(guid, direction, getDerivedLineage, offset, limit, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns immediate next level lineage info about entity with pagination
     * @param guid The globally unique identifier of the entity. (required)
     * @param direction The direction of the lineage, which could be INPUT, OUTPUT or BOTH. (required)
     * @param getDerivedLineage True to include derived lineage in the response (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param limit The page size - by default there is no paging. (optional)
     * @return JsonAtlasLineageInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If Lineage exists for the given entity. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad query parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If no lineage is found for the given entity. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasLineageInfo lineageRESTNextLevelLineage(String guid, String direction, Boolean getDerivedLineage, Integer offset, Integer limit) throws ApiException {
        ApiResponse<JsonAtlasLineageInfo> localVarResp = lineageRESTNextLevelLineageWithHttpInfo(guid, direction, getDerivedLineage, offset, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns immediate next level lineage info about entity with pagination
     * @param guid The globally unique identifier of the entity. (required)
     * @param direction The direction of the lineage, which could be INPUT, OUTPUT or BOTH. (required)
     * @param getDerivedLineage True to include derived lineage in the response (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param limit The page size - by default there is no paging. (optional)
     * @return ApiResponse&lt;JsonAtlasLineageInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If Lineage exists for the given entity. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad query parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If no lineage is found for the given entity. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasLineageInfo> lineageRESTNextLevelLineageWithHttpInfo(String guid, String direction, Boolean getDerivedLineage, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = lineageRESTNextLevelLineageValidateBeforeCall(guid, direction, getDerivedLineage, offset, limit, null);
        Type localVarReturnType = new TypeToken<JsonAtlasLineageInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns immediate next level lineage info about entity with pagination
     * @param guid The globally unique identifier of the entity. (required)
     * @param direction The direction of the lineage, which could be INPUT, OUTPUT or BOTH. (required)
     * @param getDerivedLineage True to include derived lineage in the response (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param limit The page size - by default there is no paging. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If Lineage exists for the given entity. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad query parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If no lineage is found for the given entity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lineageRESTNextLevelLineageAsync(String guid, String direction, Boolean getDerivedLineage, Integer offset, Integer limit, final ApiCallback<JsonAtlasLineageInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = lineageRESTNextLevelLineageValidateBeforeCall(guid, direction, getDerivedLineage, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasLineageInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
