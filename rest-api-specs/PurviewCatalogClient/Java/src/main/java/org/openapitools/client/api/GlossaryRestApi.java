/*
 * Purview Catalog Service REST API Document
 * Purview Catalog Service is a fully managed cloud service whose users can discover the data sources they need and understand the data sources they find. At the same time, Data Catalog helps organizations get more value from their existing investments. This swagger defines REST API of the Hot Tier of Data Catalog Gen 2.
 *
 * The version of the OpenAPI document: 2020-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.openapitools.client.model.JsonAtlasGlossary;
import org.openapitools.client.model.JsonAtlasGlossaryCategory;
import org.openapitools.client.model.JsonAtlasGlossaryExtInfo;
import org.openapitools.client.model.JsonAtlasGlossaryTerm;
import org.openapitools.client.model.JsonAtlasRelatedCategoryHeader;
import org.openapitools.client.model.JsonAtlasRelatedObjectId;
import org.openapitools.client.model.JsonAtlasRelatedTermHeader;
import org.openapitools.client.model.JsonImportCSVOperation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GlossaryRestApi {
    private ApiClient localVarApiClient;

    public GlossaryRestApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GlossaryRestApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for glossaryRESTAssignTermToEntities
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param relatedObjectIds An array of related object IDs to which the term has to be associated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK. If the term assignment was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If ANY of the related objects is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTAssignTermToEntitiesCall(String termGuid, List<JsonAtlasRelatedObjectId> relatedObjectIds, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = relatedObjectIds;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/terms/{termGuid}/assignedEntities"
            .replaceAll("\\{" + "termGuid" + "\\}", localVarApiClient.escapeString(termGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTAssignTermToEntitiesValidateBeforeCall(String termGuid, List<JsonAtlasRelatedObjectId> relatedObjectIds, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'termGuid' is set
        if (termGuid == null) {
            throw new ApiException("Missing the required parameter 'termGuid' when calling glossaryRESTAssignTermToEntities(Async)");
        }
        
        // verify the required parameter 'relatedObjectIds' is set
        if (relatedObjectIds == null) {
            throw new ApiException("Missing the required parameter 'relatedObjectIds' when calling glossaryRESTAssignTermToEntities(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTAssignTermToEntitiesCall(termGuid, relatedObjectIds, _callback);
        return localVarCall;

    }

    /**
     * 
     * Assigns the given term to the provided list of related objects.
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param relatedObjectIds An array of related object IDs to which the term has to be associated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK. If the term assignment was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If ANY of the related objects is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public void glossaryRESTAssignTermToEntities(String termGuid, List<JsonAtlasRelatedObjectId> relatedObjectIds) throws ApiException {
        glossaryRESTAssignTermToEntitiesWithHttpInfo(termGuid, relatedObjectIds);
    }

    /**
     * 
     * Assigns the given term to the provided list of related objects.
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param relatedObjectIds An array of related object IDs to which the term has to be associated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK. If the term assignment was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If ANY of the related objects is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> glossaryRESTAssignTermToEntitiesWithHttpInfo(String termGuid, List<JsonAtlasRelatedObjectId> relatedObjectIds) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTAssignTermToEntitiesValidateBeforeCall(termGuid, relatedObjectIds, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Assigns the given term to the provided list of related objects.
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param relatedObjectIds An array of related object IDs to which the term has to be associated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK. If the term assignment was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If ANY of the related objects is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTAssignTermToEntitiesAsync(String termGuid, List<JsonAtlasRelatedObjectId> relatedObjectIds, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTAssignTermToEntitiesValidateBeforeCall(termGuid, relatedObjectIds, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTCreateGlossary
     * @param atlasGlossary Glossary definition, terms &amp; categories can be anchored to a glossary. Using the anchor attribute when creating the Term/Category. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary creation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If glossary definition has invalid or missing information. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> If glossary definition already exists (duplicate qualifiedName). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTCreateGlossaryCall(JsonAtlasGlossary atlasGlossary, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = atlasGlossary;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTCreateGlossaryValidateBeforeCall(JsonAtlasGlossary atlasGlossary, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'atlasGlossary' is set
        if (atlasGlossary == null) {
            throw new ApiException("Missing the required parameter 'atlasGlossary' when calling glossaryRESTCreateGlossary(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTCreateGlossaryCall(atlasGlossary, _callback);
        return localVarCall;

    }

    /**
     * 
     * Creates a glossary.
     * @param atlasGlossary Glossary definition, terms &amp; categories can be anchored to a glossary. Using the anchor attribute when creating the Term/Category. (required)
     * @return JsonAtlasGlossary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary creation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If glossary definition has invalid or missing information. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> If glossary definition already exists (duplicate qualifiedName). </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasGlossary glossaryRESTCreateGlossary(JsonAtlasGlossary atlasGlossary) throws ApiException {
        ApiResponse<JsonAtlasGlossary> localVarResp = glossaryRESTCreateGlossaryWithHttpInfo(atlasGlossary);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a glossary.
     * @param atlasGlossary Glossary definition, terms &amp; categories can be anchored to a glossary. Using the anchor attribute when creating the Term/Category. (required)
     * @return ApiResponse&lt;JsonAtlasGlossary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary creation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If glossary definition has invalid or missing information. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> If glossary definition already exists (duplicate qualifiedName). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasGlossary> glossaryRESTCreateGlossaryWithHttpInfo(JsonAtlasGlossary atlasGlossary) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTCreateGlossaryValidateBeforeCall(atlasGlossary, null);
        Type localVarReturnType = new TypeToken<JsonAtlasGlossary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a glossary.
     * @param atlasGlossary Glossary definition, terms &amp; categories can be anchored to a glossary. Using the anchor attribute when creating the Term/Category. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary creation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If glossary definition has invalid or missing information. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> If glossary definition already exists (duplicate qualifiedName). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTCreateGlossaryAsync(JsonAtlasGlossary atlasGlossary, final ApiCallback<JsonAtlasGlossary> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTCreateGlossaryValidateBeforeCall(atlasGlossary, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasGlossary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTCreateGlossaryCategories
     * @param glossaryCategory An array of glossary category definitions to be created. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If bulk glossary category creation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If ANY glossary category definition has invalid or missing information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTCreateGlossaryCategoriesCall(List<JsonAtlasGlossaryCategory> glossaryCategory, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = glossaryCategory;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTCreateGlossaryCategoriesValidateBeforeCall(List<JsonAtlasGlossaryCategory> glossaryCategory, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'glossaryCategory' is set
        if (glossaryCategory == null) {
            throw new ApiException("Missing the required parameter 'glossaryCategory' when calling glossaryRESTCreateGlossaryCategories(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTCreateGlossaryCategoriesCall(glossaryCategory, _callback);
        return localVarCall;

    }

    /**
     * 
     * Creates glossary category in bulk.
     * @param glossaryCategory An array of glossary category definitions to be created. (required)
     * @return List&lt;JsonAtlasGlossaryCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If bulk glossary category creation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If ANY glossary category definition has invalid or missing information. </td><td>  -  </td></tr>
     </table>
     */
    public List<JsonAtlasGlossaryCategory> glossaryRESTCreateGlossaryCategories(List<JsonAtlasGlossaryCategory> glossaryCategory) throws ApiException {
        ApiResponse<List<JsonAtlasGlossaryCategory>> localVarResp = glossaryRESTCreateGlossaryCategoriesWithHttpInfo(glossaryCategory);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates glossary category in bulk.
     * @param glossaryCategory An array of glossary category definitions to be created. (required)
     * @return ApiResponse&lt;List&lt;JsonAtlasGlossaryCategory&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If bulk glossary category creation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If ANY glossary category definition has invalid or missing information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<JsonAtlasGlossaryCategory>> glossaryRESTCreateGlossaryCategoriesWithHttpInfo(List<JsonAtlasGlossaryCategory> glossaryCategory) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTCreateGlossaryCategoriesValidateBeforeCall(glossaryCategory, null);
        Type localVarReturnType = new TypeToken<List<JsonAtlasGlossaryCategory>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates glossary category in bulk.
     * @param glossaryCategory An array of glossary category definitions to be created. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If bulk glossary category creation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If ANY glossary category definition has invalid or missing information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTCreateGlossaryCategoriesAsync(List<JsonAtlasGlossaryCategory> glossaryCategory, final ApiCallback<List<JsonAtlasGlossaryCategory>> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTCreateGlossaryCategoriesValidateBeforeCall(glossaryCategory, _callback);
        Type localVarReturnType = new TypeToken<List<JsonAtlasGlossaryCategory>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTCreateGlossaryCategory
     * @param glossaryCategory The glossary category definition. A category must be anchored to a Glossary when creating. Optionally, terms belonging to the category and the hierarchy can also be defined during creation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary category creation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If glossary category definition has invalid or missing information. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> If glossary category already exists (duplicate qualifiedName). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTCreateGlossaryCategoryCall(JsonAtlasGlossaryCategory glossaryCategory, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = glossaryCategory;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/category";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTCreateGlossaryCategoryValidateBeforeCall(JsonAtlasGlossaryCategory glossaryCategory, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'glossaryCategory' is set
        if (glossaryCategory == null) {
            throw new ApiException("Missing the required parameter 'glossaryCategory' when calling glossaryRESTCreateGlossaryCategory(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTCreateGlossaryCategoryCall(glossaryCategory, _callback);
        return localVarCall;

    }

    /**
     * 
     * Creates a glossary category.
     * @param glossaryCategory The glossary category definition. A category must be anchored to a Glossary when creating. Optionally, terms belonging to the category and the hierarchy can also be defined during creation. (required)
     * @return JsonAtlasGlossaryCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary category creation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If glossary category definition has invalid or missing information. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> If glossary category already exists (duplicate qualifiedName). </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasGlossaryCategory glossaryRESTCreateGlossaryCategory(JsonAtlasGlossaryCategory glossaryCategory) throws ApiException {
        ApiResponse<JsonAtlasGlossaryCategory> localVarResp = glossaryRESTCreateGlossaryCategoryWithHttpInfo(glossaryCategory);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a glossary category.
     * @param glossaryCategory The glossary category definition. A category must be anchored to a Glossary when creating. Optionally, terms belonging to the category and the hierarchy can also be defined during creation. (required)
     * @return ApiResponse&lt;JsonAtlasGlossaryCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary category creation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If glossary category definition has invalid or missing information. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> If glossary category already exists (duplicate qualifiedName). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasGlossaryCategory> glossaryRESTCreateGlossaryCategoryWithHttpInfo(JsonAtlasGlossaryCategory glossaryCategory) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTCreateGlossaryCategoryValidateBeforeCall(glossaryCategory, null);
        Type localVarReturnType = new TypeToken<JsonAtlasGlossaryCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a glossary category.
     * @param glossaryCategory The glossary category definition. A category must be anchored to a Glossary when creating. Optionally, terms belonging to the category and the hierarchy can also be defined during creation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary category creation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If glossary category definition has invalid or missing information. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> If glossary category already exists (duplicate qualifiedName). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTCreateGlossaryCategoryAsync(JsonAtlasGlossaryCategory glossaryCategory, final ApiCallback<JsonAtlasGlossaryCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTCreateGlossaryCategoryValidateBeforeCall(glossaryCategory, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasGlossaryCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTCreateGlossaryTerm
     * @param glossaryTerm The glossary term definition. A term must be anchored to a Glossary at the time of creation. Optionally it can be categorized as well. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary term creation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If glossary term definition has invalid or missing information. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> If glossary term already exists (duplicate qualifiedName). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTCreateGlossaryTermCall(JsonAtlasGlossaryTerm glossaryTerm, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = glossaryTerm;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/term";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTCreateGlossaryTermValidateBeforeCall(JsonAtlasGlossaryTerm glossaryTerm, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'glossaryTerm' is set
        if (glossaryTerm == null) {
            throw new ApiException("Missing the required parameter 'glossaryTerm' when calling glossaryRESTCreateGlossaryTerm(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTCreateGlossaryTermCall(glossaryTerm, _callback);
        return localVarCall;

    }

    /**
     * 
     * Creates a glossary term.
     * @param glossaryTerm The glossary term definition. A term must be anchored to a Glossary at the time of creation. Optionally it can be categorized as well. (required)
     * @return JsonAtlasGlossaryTerm
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary term creation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If glossary term definition has invalid or missing information. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> If glossary term already exists (duplicate qualifiedName). </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasGlossaryTerm glossaryRESTCreateGlossaryTerm(JsonAtlasGlossaryTerm glossaryTerm) throws ApiException {
        ApiResponse<JsonAtlasGlossaryTerm> localVarResp = glossaryRESTCreateGlossaryTermWithHttpInfo(glossaryTerm);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a glossary term.
     * @param glossaryTerm The glossary term definition. A term must be anchored to a Glossary at the time of creation. Optionally it can be categorized as well. (required)
     * @return ApiResponse&lt;JsonAtlasGlossaryTerm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary term creation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If glossary term definition has invalid or missing information. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> If glossary term already exists (duplicate qualifiedName). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasGlossaryTerm> glossaryRESTCreateGlossaryTermWithHttpInfo(JsonAtlasGlossaryTerm glossaryTerm) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTCreateGlossaryTermValidateBeforeCall(glossaryTerm, null);
        Type localVarReturnType = new TypeToken<JsonAtlasGlossaryTerm>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a glossary term.
     * @param glossaryTerm The glossary term definition. A term must be anchored to a Glossary at the time of creation. Optionally it can be categorized as well. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary term creation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If glossary term definition has invalid or missing information. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> If glossary term already exists (duplicate qualifiedName). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTCreateGlossaryTermAsync(JsonAtlasGlossaryTerm glossaryTerm, final ApiCallback<JsonAtlasGlossaryTerm> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTCreateGlossaryTermValidateBeforeCall(glossaryTerm, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasGlossaryTerm>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTCreateGlossaryTerms
     * @param glossaryTerm An array of glossary term definitions to be created in bulk. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If bulk glossary terms creation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any glossary term definition has invalid or missing information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTCreateGlossaryTermsCall(List<JsonAtlasGlossaryTerm> glossaryTerm, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = glossaryTerm;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/terms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTCreateGlossaryTermsValidateBeforeCall(List<JsonAtlasGlossaryTerm> glossaryTerm, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'glossaryTerm' is set
        if (glossaryTerm == null) {
            throw new ApiException("Missing the required parameter 'glossaryTerm' when calling glossaryRESTCreateGlossaryTerms(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTCreateGlossaryTermsCall(glossaryTerm, _callback);
        return localVarCall;

    }

    /**
     * 
     * Creates glossary terms in bulk.
     * @param glossaryTerm An array of glossary term definitions to be created in bulk. (required)
     * @return List&lt;JsonAtlasGlossaryTerm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If bulk glossary terms creation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any glossary term definition has invalid or missing information. </td><td>  -  </td></tr>
     </table>
     */
    public List<JsonAtlasGlossaryTerm> glossaryRESTCreateGlossaryTerms(List<JsonAtlasGlossaryTerm> glossaryTerm) throws ApiException {
        ApiResponse<List<JsonAtlasGlossaryTerm>> localVarResp = glossaryRESTCreateGlossaryTermsWithHttpInfo(glossaryTerm);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates glossary terms in bulk.
     * @param glossaryTerm An array of glossary term definitions to be created in bulk. (required)
     * @return ApiResponse&lt;List&lt;JsonAtlasGlossaryTerm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If bulk glossary terms creation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any glossary term definition has invalid or missing information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<JsonAtlasGlossaryTerm>> glossaryRESTCreateGlossaryTermsWithHttpInfo(List<JsonAtlasGlossaryTerm> glossaryTerm) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTCreateGlossaryTermsValidateBeforeCall(glossaryTerm, null);
        Type localVarReturnType = new TypeToken<List<JsonAtlasGlossaryTerm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates glossary terms in bulk.
     * @param glossaryTerm An array of glossary term definitions to be created in bulk. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If bulk glossary terms creation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If any glossary term definition has invalid or missing information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTCreateGlossaryTermsAsync(List<JsonAtlasGlossaryTerm> glossaryTerm, final ApiCallback<List<JsonAtlasGlossaryTerm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTCreateGlossaryTermsValidateBeforeCall(glossaryTerm, _callback);
        Type localVarReturnType = new TypeToken<List<JsonAtlasGlossaryTerm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTDeleteGlossary
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK. If glossary delete was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID in invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTDeleteGlossaryCall(String glossaryGuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/{glossaryGuid}"
            .replaceAll("\\{" + "glossaryGuid" + "\\}", localVarApiClient.escapeString(glossaryGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTDeleteGlossaryValidateBeforeCall(String glossaryGuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'glossaryGuid' is set
        if (glossaryGuid == null) {
            throw new ApiException("Missing the required parameter 'glossaryGuid' when calling glossaryRESTDeleteGlossary(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTDeleteGlossaryCall(glossaryGuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Deletes a glossary.
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK. If glossary delete was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID in invalid. </td><td>  -  </td></tr>
     </table>
     */
    public void glossaryRESTDeleteGlossary(String glossaryGuid) throws ApiException {
        glossaryRESTDeleteGlossaryWithHttpInfo(glossaryGuid);
    }

    /**
     * 
     * Deletes a glossary.
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK. If glossary delete was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID in invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> glossaryRESTDeleteGlossaryWithHttpInfo(String glossaryGuid) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTDeleteGlossaryValidateBeforeCall(glossaryGuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a glossary.
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK. If glossary delete was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID in invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTDeleteGlossaryAsync(String glossaryGuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTDeleteGlossaryValidateBeforeCall(glossaryGuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTDeleteGlossaryCategory
     * @param categoryGuid The globally unique identifier of the category. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK. If glossary category delete was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary category GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTDeleteGlossaryCategoryCall(String categoryGuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/category/{categoryGuid}"
            .replaceAll("\\{" + "categoryGuid" + "\\}", localVarApiClient.escapeString(categoryGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTDeleteGlossaryCategoryValidateBeforeCall(String categoryGuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'categoryGuid' is set
        if (categoryGuid == null) {
            throw new ApiException("Missing the required parameter 'categoryGuid' when calling glossaryRESTDeleteGlossaryCategory(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTDeleteGlossaryCategoryCall(categoryGuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Deletes a glossary category.
     * @param categoryGuid The globally unique identifier of the category. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK. If glossary category delete was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary category GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public void glossaryRESTDeleteGlossaryCategory(String categoryGuid) throws ApiException {
        glossaryRESTDeleteGlossaryCategoryWithHttpInfo(categoryGuid);
    }

    /**
     * 
     * Deletes a glossary category.
     * @param categoryGuid The globally unique identifier of the category. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK. If glossary category delete was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary category GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> glossaryRESTDeleteGlossaryCategoryWithHttpInfo(String categoryGuid) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTDeleteGlossaryCategoryValidateBeforeCall(categoryGuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a glossary category.
     * @param categoryGuid The globally unique identifier of the category. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK. If glossary category delete was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary category GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTDeleteGlossaryCategoryAsync(String categoryGuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTDeleteGlossaryCategoryValidateBeforeCall(categoryGuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTDeleteGlossaryTerm
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK. If glossary term delete was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term guid in invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTDeleteGlossaryTermCall(String termGuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/term/{termGuid}"
            .replaceAll("\\{" + "termGuid" + "\\}", localVarApiClient.escapeString(termGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTDeleteGlossaryTermValidateBeforeCall(String termGuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'termGuid' is set
        if (termGuid == null) {
            throw new ApiException("Missing the required parameter 'termGuid' when calling glossaryRESTDeleteGlossaryTerm(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTDeleteGlossaryTermCall(termGuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Deletes a glossary term.
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK. If glossary term delete was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term guid in invalid. </td><td>  -  </td></tr>
     </table>
     */
    public void glossaryRESTDeleteGlossaryTerm(String termGuid) throws ApiException {
        glossaryRESTDeleteGlossaryTermWithHttpInfo(termGuid);
    }

    /**
     * 
     * Deletes a glossary term.
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK. If glossary term delete was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term guid in invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> glossaryRESTDeleteGlossaryTermWithHttpInfo(String termGuid) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTDeleteGlossaryTermValidateBeforeCall(termGuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a glossary term.
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK. If glossary term delete was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term guid in invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTDeleteGlossaryTermAsync(String termGuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTDeleteGlossaryTermValidateBeforeCall(termGuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTDeleteTermAssignmentFromEntities
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param relatedObjectIds An array of related object IDs from which the term has to be dissociated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK. If glossary term dissociation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If ANY of the related objects is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTDeleteTermAssignmentFromEntitiesCall(String termGuid, List<JsonAtlasRelatedObjectId> relatedObjectIds, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = relatedObjectIds;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/terms/{termGuid}/assignedEntities"
            .replaceAll("\\{" + "termGuid" + "\\}", localVarApiClient.escapeString(termGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTDeleteTermAssignmentFromEntitiesValidateBeforeCall(String termGuid, List<JsonAtlasRelatedObjectId> relatedObjectIds, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'termGuid' is set
        if (termGuid == null) {
            throw new ApiException("Missing the required parameter 'termGuid' when calling glossaryRESTDeleteTermAssignmentFromEntities(Async)");
        }
        
        // verify the required parameter 'relatedObjectIds' is set
        if (relatedObjectIds == null) {
            throw new ApiException("Missing the required parameter 'relatedObjectIds' when calling glossaryRESTDeleteTermAssignmentFromEntities(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTDeleteTermAssignmentFromEntitiesCall(termGuid, relatedObjectIds, _callback);
        return localVarCall;

    }

    /**
     * 
     * Deletes the term assignment for the given list of related objects.
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param relatedObjectIds An array of related object IDs from which the term has to be dissociated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK. If glossary term dissociation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If ANY of the related objects is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public void glossaryRESTDeleteTermAssignmentFromEntities(String termGuid, List<JsonAtlasRelatedObjectId> relatedObjectIds) throws ApiException {
        glossaryRESTDeleteTermAssignmentFromEntitiesWithHttpInfo(termGuid, relatedObjectIds);
    }

    /**
     * 
     * Deletes the term assignment for the given list of related objects.
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param relatedObjectIds An array of related object IDs from which the term has to be dissociated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK. If glossary term dissociation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If ANY of the related objects is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> glossaryRESTDeleteTermAssignmentFromEntitiesWithHttpInfo(String termGuid, List<JsonAtlasRelatedObjectId> relatedObjectIds) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTDeleteTermAssignmentFromEntitiesValidateBeforeCall(termGuid, relatedObjectIds, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the term assignment for the given list of related objects.
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param relatedObjectIds An array of related object IDs from which the term has to be dissociated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK. If glossary term dissociation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If ANY of the related objects is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTDeleteTermAssignmentFromEntitiesAsync(String termGuid, List<JsonAtlasRelatedObjectId> relatedObjectIds, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTDeleteTermAssignmentFromEntitiesValidateBeforeCall(termGuid, relatedObjectIds, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTExportGlossaryTermsAsCSV
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param termGuids An array of term guids. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. A csv file contains terms with given term ids will be generated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If term ids is not belong to the glossary guid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTExportGlossaryTermsAsCSVCall(String glossaryGuid, List<String> termGuids, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = termGuids;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/{glossaryGuid}/terms/export"
            .replaceAll("\\{" + "glossaryGuid" + "\\}", localVarApiClient.escapeString(glossaryGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTExportGlossaryTermsAsCSVValidateBeforeCall(String glossaryGuid, List<String> termGuids, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'glossaryGuid' is set
        if (glossaryGuid == null) {
            throw new ApiException("Missing the required parameter 'glossaryGuid' when calling glossaryRESTExportGlossaryTermsAsCSV(Async)");
        }
        
        // verify the required parameter 'termGuids' is set
        if (termGuids == null) {
            throw new ApiException("Missing the required parameter 'termGuids' when calling glossaryRESTExportGlossaryTermsAsCSV(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTExportGlossaryTermsAsCSVCall(glossaryGuid, termGuids, _callback);
        return localVarCall;

    }

    /**
     * 
     * Export Glossary Terms as csv file
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param termGuids An array of term guids. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. A csv file contains terms with given term ids will be generated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If term ids is not belong to the glossary guid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public void glossaryRESTExportGlossaryTermsAsCSV(String glossaryGuid, List<String> termGuids) throws ApiException {
        glossaryRESTExportGlossaryTermsAsCSVWithHttpInfo(glossaryGuid, termGuids);
    }

    /**
     * 
     * Export Glossary Terms as csv file
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param termGuids An array of term guids. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. A csv file contains terms with given term ids will be generated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If term ids is not belong to the glossary guid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> glossaryRESTExportGlossaryTermsAsCSVWithHttpInfo(String glossaryGuid, List<String> termGuids) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTExportGlossaryTermsAsCSVValidateBeforeCall(glossaryGuid, termGuids, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Export Glossary Terms as csv file
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param termGuids An array of term guids. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. A csv file contains terms with given term ids will be generated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If term ids is not belong to the glossary guid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTExportGlossaryTermsAsCSVAsync(String glossaryGuid, List<String> termGuids, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTExportGlossaryTermsAsCSVValidateBeforeCall(glossaryGuid, termGuids, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTGetCategoryTerms
     * @param categoryGuid The globally unique identifier of the category. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of terms for the given category or an empty list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary category GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTGetCategoryTermsCall(String categoryGuid, Integer limit, Integer offset, String sort, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/category/{categoryGuid}/terms"
            .replaceAll("\\{" + "categoryGuid" + "\\}", localVarApiClient.escapeString(categoryGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTGetCategoryTermsValidateBeforeCall(String categoryGuid, Integer limit, Integer offset, String sort, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'categoryGuid' is set
        if (categoryGuid == null) {
            throw new ApiException("Missing the required parameter 'categoryGuid' when calling glossaryRESTGetCategoryTerms(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTGetCategoryTermsCall(categoryGuid, limit, offset, sort, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets all terms associated with the specific category.
     * @param categoryGuid The globally unique identifier of the category. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @return List&lt;JsonAtlasRelatedTermHeader&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of terms for the given category or an empty list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary category GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<JsonAtlasRelatedTermHeader> glossaryRESTGetCategoryTerms(String categoryGuid, Integer limit, Integer offset, String sort) throws ApiException {
        ApiResponse<List<JsonAtlasRelatedTermHeader>> localVarResp = glossaryRESTGetCategoryTermsWithHttpInfo(categoryGuid, limit, offset, sort);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all terms associated with the specific category.
     * @param categoryGuid The globally unique identifier of the category. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @return ApiResponse&lt;List&lt;JsonAtlasRelatedTermHeader&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of terms for the given category or an empty list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary category GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<JsonAtlasRelatedTermHeader>> glossaryRESTGetCategoryTermsWithHttpInfo(String categoryGuid, Integer limit, Integer offset, String sort) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTGetCategoryTermsValidateBeforeCall(categoryGuid, limit, offset, sort, null);
        Type localVarReturnType = new TypeToken<List<JsonAtlasRelatedTermHeader>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all terms associated with the specific category.
     * @param categoryGuid The globally unique identifier of the category. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of terms for the given category or an empty list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary category GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTGetCategoryTermsAsync(String categoryGuid, Integer limit, Integer offset, String sort, final ApiCallback<List<JsonAtlasRelatedTermHeader>> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTGetCategoryTermsValidateBeforeCall(categoryGuid, limit, offset, sort, _callback);
        Type localVarReturnType = new TypeToken<List<JsonAtlasRelatedTermHeader>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTGetDetailedGlossary
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary exists for given GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTGetDetailedGlossaryCall(String glossaryGuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/{glossaryGuid}/detailed"
            .replaceAll("\\{" + "glossaryGuid" + "\\}", localVarApiClient.escapeString(glossaryGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTGetDetailedGlossaryValidateBeforeCall(String glossaryGuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'glossaryGuid' is set
        if (glossaryGuid == null) {
            throw new ApiException("Missing the required parameter 'glossaryGuid' when calling glossaryRESTGetDetailedGlossary(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTGetDetailedGlossaryCall(glossaryGuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets a specific glossary with detailed information.
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @return JsonAtlasGlossaryExtInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary exists for given GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasGlossaryExtInfo glossaryRESTGetDetailedGlossary(String glossaryGuid) throws ApiException {
        ApiResponse<JsonAtlasGlossaryExtInfo> localVarResp = glossaryRESTGetDetailedGlossaryWithHttpInfo(glossaryGuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a specific glossary with detailed information.
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @return ApiResponse&lt;JsonAtlasGlossaryExtInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary exists for given GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasGlossaryExtInfo> glossaryRESTGetDetailedGlossaryWithHttpInfo(String glossaryGuid) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTGetDetailedGlossaryValidateBeforeCall(glossaryGuid, null);
        Type localVarReturnType = new TypeToken<JsonAtlasGlossaryExtInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a specific glossary with detailed information.
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary exists for given GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTGetDetailedGlossaryAsync(String glossaryGuid, final ApiCallback<JsonAtlasGlossaryExtInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTGetDetailedGlossaryValidateBeforeCall(glossaryGuid, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasGlossaryExtInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTGetEntitiesAssignedWithTerm
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An array of related objects (if any) for the given glossary or an empty list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTGetEntitiesAssignedWithTermCall(String termGuid, Integer limit, Integer offset, String sort, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/terms/{termGuid}/assignedEntities"
            .replaceAll("\\{" + "termGuid" + "\\}", localVarApiClient.escapeString(termGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTGetEntitiesAssignedWithTermValidateBeforeCall(String termGuid, Integer limit, Integer offset, String sort, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'termGuid' is set
        if (termGuid == null) {
            throw new ApiException("Missing the required parameter 'termGuid' when calling glossaryRESTGetEntitiesAssignedWithTerm(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTGetEntitiesAssignedWithTermCall(termGuid, limit, offset, sort, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets all related objects assigned with the specified term.
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @return List&lt;JsonAtlasRelatedObjectId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An array of related objects (if any) for the given glossary or an empty list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<JsonAtlasRelatedObjectId> glossaryRESTGetEntitiesAssignedWithTerm(String termGuid, Integer limit, Integer offset, String sort) throws ApiException {
        ApiResponse<List<JsonAtlasRelatedObjectId>> localVarResp = glossaryRESTGetEntitiesAssignedWithTermWithHttpInfo(termGuid, limit, offset, sort);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all related objects assigned with the specified term.
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @return ApiResponse&lt;List&lt;JsonAtlasRelatedObjectId&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An array of related objects (if any) for the given glossary or an empty list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<JsonAtlasRelatedObjectId>> glossaryRESTGetEntitiesAssignedWithTermWithHttpInfo(String termGuid, Integer limit, Integer offset, String sort) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTGetEntitiesAssignedWithTermValidateBeforeCall(termGuid, limit, offset, sort, null);
        Type localVarReturnType = new TypeToken<List<JsonAtlasRelatedObjectId>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all related objects assigned with the specified term.
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An array of related objects (if any) for the given glossary or an empty list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTGetEntitiesAssignedWithTermAsync(String termGuid, Integer limit, Integer offset, String sort, final ApiCallback<List<JsonAtlasRelatedObjectId>> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTGetEntitiesAssignedWithTermValidateBeforeCall(termGuid, limit, offset, sort, _callback);
        Type localVarReturnType = new TypeToken<List<JsonAtlasRelatedObjectId>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTGetGlossaries
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of existing glossaries fitting the search criteria or empty list if nothing matches. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTGetGlossariesCall(Integer limit, Integer offset, String sort, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTGetGlossariesValidateBeforeCall(Integer limit, Integer offset, String sort, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = glossaryRESTGetGlossariesCall(limit, offset, sort, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets all glossaries registered with Atlas.
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @return List&lt;JsonAtlasGlossary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of existing glossaries fitting the search criteria or empty list if nothing matches. </td><td>  -  </td></tr>
     </table>
     */
    public List<JsonAtlasGlossary> glossaryRESTGetGlossaries(Integer limit, Integer offset, String sort) throws ApiException {
        ApiResponse<List<JsonAtlasGlossary>> localVarResp = glossaryRESTGetGlossariesWithHttpInfo(limit, offset, sort);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all glossaries registered with Atlas.
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @return ApiResponse&lt;List&lt;JsonAtlasGlossary&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of existing glossaries fitting the search criteria or empty list if nothing matches. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<JsonAtlasGlossary>> glossaryRESTGetGlossariesWithHttpInfo(Integer limit, Integer offset, String sort) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTGetGlossariesValidateBeforeCall(limit, offset, sort, null);
        Type localVarReturnType = new TypeToken<List<JsonAtlasGlossary>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all glossaries registered with Atlas.
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of existing glossaries fitting the search criteria or empty list if nothing matches. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTGetGlossariesAsync(Integer limit, Integer offset, String sort, final ApiCallback<List<JsonAtlasGlossary>> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTGetGlossariesValidateBeforeCall(limit, offset, sort, _callback);
        Type localVarReturnType = new TypeToken<List<JsonAtlasGlossary>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTGetGlossary
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary with given guid exists. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTGetGlossaryCall(String glossaryGuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/{glossaryGuid}"
            .replaceAll("\\{" + "glossaryGuid" + "\\}", localVarApiClient.escapeString(glossaryGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTGetGlossaryValidateBeforeCall(String glossaryGuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'glossaryGuid' is set
        if (glossaryGuid == null) {
            throw new ApiException("Missing the required parameter 'glossaryGuid' when calling glossaryRESTGetGlossary(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTGetGlossaryCall(glossaryGuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets a specific Glossary by its GUID.
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @return JsonAtlasGlossary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary with given guid exists. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasGlossary glossaryRESTGetGlossary(String glossaryGuid) throws ApiException {
        ApiResponse<JsonAtlasGlossary> localVarResp = glossaryRESTGetGlossaryWithHttpInfo(glossaryGuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a specific Glossary by its GUID.
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @return ApiResponse&lt;JsonAtlasGlossary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary with given guid exists. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasGlossary> glossaryRESTGetGlossaryWithHttpInfo(String glossaryGuid) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTGetGlossaryValidateBeforeCall(glossaryGuid, null);
        Type localVarReturnType = new TypeToken<JsonAtlasGlossary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a specific Glossary by its GUID.
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary with given guid exists. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTGetGlossaryAsync(String glossaryGuid, final ApiCallback<JsonAtlasGlossary> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTGetGlossaryValidateBeforeCall(glossaryGuid, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasGlossary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTGetGlossaryCategories
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An array of glossary categories for the given glossary or an empty list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary guid is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTGetGlossaryCategoriesCall(String glossaryGuid, Integer limit, Integer offset, String sort, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/{glossaryGuid}/categories"
            .replaceAll("\\{" + "glossaryGuid" + "\\}", localVarApiClient.escapeString(glossaryGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTGetGlossaryCategoriesValidateBeforeCall(String glossaryGuid, Integer limit, Integer offset, String sort, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'glossaryGuid' is set
        if (glossaryGuid == null) {
            throw new ApiException("Missing the required parameter 'glossaryGuid' when calling glossaryRESTGetGlossaryCategories(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTGetGlossaryCategoriesCall(glossaryGuid, limit, offset, sort, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets the categories belonging to a specific glossary.
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @return List&lt;JsonAtlasGlossaryCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An array of glossary categories for the given glossary or an empty list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary guid is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<JsonAtlasGlossaryCategory> glossaryRESTGetGlossaryCategories(String glossaryGuid, Integer limit, Integer offset, String sort) throws ApiException {
        ApiResponse<List<JsonAtlasGlossaryCategory>> localVarResp = glossaryRESTGetGlossaryCategoriesWithHttpInfo(glossaryGuid, limit, offset, sort);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the categories belonging to a specific glossary.
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @return ApiResponse&lt;List&lt;JsonAtlasGlossaryCategory&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An array of glossary categories for the given glossary or an empty list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary guid is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<JsonAtlasGlossaryCategory>> glossaryRESTGetGlossaryCategoriesWithHttpInfo(String glossaryGuid, Integer limit, Integer offset, String sort) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTGetGlossaryCategoriesValidateBeforeCall(glossaryGuid, limit, offset, sort, null);
        Type localVarReturnType = new TypeToken<List<JsonAtlasGlossaryCategory>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the categories belonging to a specific glossary.
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An array of glossary categories for the given glossary or an empty list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary guid is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTGetGlossaryCategoriesAsync(String glossaryGuid, Integer limit, Integer offset, String sort, final ApiCallback<List<JsonAtlasGlossaryCategory>> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTGetGlossaryCategoriesValidateBeforeCall(glossaryGuid, limit, offset, sort, _callback);
        Type localVarReturnType = new TypeToken<List<JsonAtlasGlossaryCategory>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTGetGlossaryCategoriesHeaders
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An array of glossary category headers for the given glossary or an empty list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTGetGlossaryCategoriesHeadersCall(String glossaryGuid, Integer limit, Integer offset, String sort, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/{glossaryGuid}/categories/headers"
            .replaceAll("\\{" + "glossaryGuid" + "\\}", localVarApiClient.escapeString(glossaryGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTGetGlossaryCategoriesHeadersValidateBeforeCall(String glossaryGuid, Integer limit, Integer offset, String sort, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'glossaryGuid' is set
        if (glossaryGuid == null) {
            throw new ApiException("Missing the required parameter 'glossaryGuid' when calling glossaryRESTGetGlossaryCategoriesHeaders(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTGetGlossaryCategoriesHeadersCall(glossaryGuid, limit, offset, sort, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets the category headers belonging to a specific glossary.
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @return List&lt;JsonAtlasRelatedCategoryHeader&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An array of glossary category headers for the given glossary or an empty list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<JsonAtlasRelatedCategoryHeader> glossaryRESTGetGlossaryCategoriesHeaders(String glossaryGuid, Integer limit, Integer offset, String sort) throws ApiException {
        ApiResponse<List<JsonAtlasRelatedCategoryHeader>> localVarResp = glossaryRESTGetGlossaryCategoriesHeadersWithHttpInfo(glossaryGuid, limit, offset, sort);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the category headers belonging to a specific glossary.
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @return ApiResponse&lt;List&lt;JsonAtlasRelatedCategoryHeader&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An array of glossary category headers for the given glossary or an empty list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<JsonAtlasRelatedCategoryHeader>> glossaryRESTGetGlossaryCategoriesHeadersWithHttpInfo(String glossaryGuid, Integer limit, Integer offset, String sort) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTGetGlossaryCategoriesHeadersValidateBeforeCall(glossaryGuid, limit, offset, sort, null);
        Type localVarReturnType = new TypeToken<List<JsonAtlasRelatedCategoryHeader>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the category headers belonging to a specific glossary.
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An array of glossary category headers for the given glossary or an empty list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTGetGlossaryCategoriesHeadersAsync(String glossaryGuid, Integer limit, Integer offset, String sort, final ApiCallback<List<JsonAtlasRelatedCategoryHeader>> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTGetGlossaryCategoriesHeadersValidateBeforeCall(glossaryGuid, limit, offset, sort, _callback);
        Type localVarReturnType = new TypeToken<List<JsonAtlasRelatedCategoryHeader>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTGetGlossaryCategory
     * @param categoryGuid The globally unique identifier of the category. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary category exists for given GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary category GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTGetGlossaryCategoryCall(String categoryGuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/category/{categoryGuid}"
            .replaceAll("\\{" + "categoryGuid" + "\\}", localVarApiClient.escapeString(categoryGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTGetGlossaryCategoryValidateBeforeCall(String categoryGuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'categoryGuid' is set
        if (categoryGuid == null) {
            throw new ApiException("Missing the required parameter 'categoryGuid' when calling glossaryRESTGetGlossaryCategory(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTGetGlossaryCategoryCall(categoryGuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets specific glossary category by its GUID.
     * @param categoryGuid The globally unique identifier of the category. (required)
     * @return JsonAtlasGlossaryCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary category exists for given GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary category GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasGlossaryCategory glossaryRESTGetGlossaryCategory(String categoryGuid) throws ApiException {
        ApiResponse<JsonAtlasGlossaryCategory> localVarResp = glossaryRESTGetGlossaryCategoryWithHttpInfo(categoryGuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets specific glossary category by its GUID.
     * @param categoryGuid The globally unique identifier of the category. (required)
     * @return ApiResponse&lt;JsonAtlasGlossaryCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary category exists for given GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary category GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasGlossaryCategory> glossaryRESTGetGlossaryCategoryWithHttpInfo(String categoryGuid) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTGetGlossaryCategoryValidateBeforeCall(categoryGuid, null);
        Type localVarReturnType = new TypeToken<JsonAtlasGlossaryCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets specific glossary category by its GUID.
     * @param categoryGuid The globally unique identifier of the category. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary category exists for given GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary category GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTGetGlossaryCategoryAsync(String categoryGuid, final ApiCallback<JsonAtlasGlossaryCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTGetGlossaryCategoryValidateBeforeCall(categoryGuid, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasGlossaryCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTGetGlossaryTerm
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary term exists for given GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTGetGlossaryTermCall(String termGuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/term/{termGuid}"
            .replaceAll("\\{" + "termGuid" + "\\}", localVarApiClient.escapeString(termGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTGetGlossaryTermValidateBeforeCall(String termGuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'termGuid' is set
        if (termGuid == null) {
            throw new ApiException("Missing the required parameter 'termGuid' when calling glossaryRESTGetGlossaryTerm(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTGetGlossaryTermCall(termGuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets a specific glossary term by its GUID.
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @return JsonAtlasGlossaryTerm
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary term exists for given GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasGlossaryTerm glossaryRESTGetGlossaryTerm(String termGuid) throws ApiException {
        ApiResponse<JsonAtlasGlossaryTerm> localVarResp = glossaryRESTGetGlossaryTermWithHttpInfo(termGuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a specific glossary term by its GUID.
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @return ApiResponse&lt;JsonAtlasGlossaryTerm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary term exists for given GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasGlossaryTerm> glossaryRESTGetGlossaryTermWithHttpInfo(String termGuid) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTGetGlossaryTermValidateBeforeCall(termGuid, null);
        Type localVarReturnType = new TypeToken<JsonAtlasGlossaryTerm>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a specific glossary term by its GUID.
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary term exists for given GUID. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTGetGlossaryTermAsync(String termGuid, final ApiCallback<JsonAtlasGlossaryTerm> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTGetGlossaryTermValidateBeforeCall(termGuid, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasGlossaryTerm>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTGetGlossaryTermHeaders
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An array of glossary terms for the given glossary or an empty list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTGetGlossaryTermHeadersCall(String glossaryGuid, Integer limit, Integer offset, String sort, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/{glossaryGuid}/terms/headers"
            .replaceAll("\\{" + "glossaryGuid" + "\\}", localVarApiClient.escapeString(glossaryGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTGetGlossaryTermHeadersValidateBeforeCall(String glossaryGuid, Integer limit, Integer offset, String sort, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'glossaryGuid' is set
        if (glossaryGuid == null) {
            throw new ApiException("Missing the required parameter 'glossaryGuid' when calling glossaryRESTGetGlossaryTermHeaders(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTGetGlossaryTermHeadersCall(glossaryGuid, limit, offset, sort, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets term headers belonging to a specific glossary.
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @return List&lt;JsonAtlasRelatedTermHeader&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An array of glossary terms for the given glossary or an empty list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<JsonAtlasRelatedTermHeader> glossaryRESTGetGlossaryTermHeaders(String glossaryGuid, Integer limit, Integer offset, String sort) throws ApiException {
        ApiResponse<List<JsonAtlasRelatedTermHeader>> localVarResp = glossaryRESTGetGlossaryTermHeadersWithHttpInfo(glossaryGuid, limit, offset, sort);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets term headers belonging to a specific glossary.
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @return ApiResponse&lt;List&lt;JsonAtlasRelatedTermHeader&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An array of glossary terms for the given glossary or an empty list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<JsonAtlasRelatedTermHeader>> glossaryRESTGetGlossaryTermHeadersWithHttpInfo(String glossaryGuid, Integer limit, Integer offset, String sort) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTGetGlossaryTermHeadersValidateBeforeCall(glossaryGuid, limit, offset, sort, null);
        Type localVarReturnType = new TypeToken<List<JsonAtlasRelatedTermHeader>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets term headers belonging to a specific glossary.
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An array of glossary terms for the given glossary or an empty list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTGetGlossaryTermHeadersAsync(String glossaryGuid, Integer limit, Integer offset, String sort, final ApiCallback<List<JsonAtlasRelatedTermHeader>> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTGetGlossaryTermHeadersValidateBeforeCall(glossaryGuid, limit, offset, sort, _callback);
        Type localVarReturnType = new TypeToken<List<JsonAtlasRelatedTermHeader>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTGetGlossaryTerms
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An array of glossary terms for the given glossary or an empty list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTGetGlossaryTermsCall(String glossaryGuid, Integer limit, Integer offset, String sort, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/{glossaryGuid}/terms"
            .replaceAll("\\{" + "glossaryGuid" + "\\}", localVarApiClient.escapeString(glossaryGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTGetGlossaryTermsValidateBeforeCall(String glossaryGuid, Integer limit, Integer offset, String sort, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'glossaryGuid' is set
        if (glossaryGuid == null) {
            throw new ApiException("Missing the required parameter 'glossaryGuid' when calling glossaryRESTGetGlossaryTerms(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTGetGlossaryTermsCall(glossaryGuid, limit, offset, sort, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets terms belonging to a specific glossary.
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @return List&lt;JsonAtlasGlossaryTerm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An array of glossary terms for the given glossary or an empty list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<JsonAtlasGlossaryTerm> glossaryRESTGetGlossaryTerms(String glossaryGuid, Integer limit, Integer offset, String sort) throws ApiException {
        ApiResponse<List<JsonAtlasGlossaryTerm>> localVarResp = glossaryRESTGetGlossaryTermsWithHttpInfo(glossaryGuid, limit, offset, sort);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets terms belonging to a specific glossary.
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @return ApiResponse&lt;List&lt;JsonAtlasGlossaryTerm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An array of glossary terms for the given glossary or an empty list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<JsonAtlasGlossaryTerm>> glossaryRESTGetGlossaryTermsWithHttpInfo(String glossaryGuid, Integer limit, Integer offset, String sort) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTGetGlossaryTermsValidateBeforeCall(glossaryGuid, limit, offset, sort, null);
        Type localVarReturnType = new TypeToken<List<JsonAtlasGlossaryTerm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets terms belonging to a specific glossary.
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An array of glossary terms for the given glossary or an empty list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTGetGlossaryTermsAsync(String glossaryGuid, Integer limit, Integer offset, String sort, final ApiCallback<List<JsonAtlasGlossaryTerm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTGetGlossaryTermsValidateBeforeCall(glossaryGuid, limit, offset, sort, _callback);
        Type localVarReturnType = new TypeToken<List<JsonAtlasGlossaryTerm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTGetImportCSVOperationStatus
     * @param operationGuid The globally unique identifier for async operation/job&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Return the status of import csv operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If operation GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTGetImportCSVOperationStatusCall(String operationGuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/terms/import/{operationGuid}"
            .replaceAll("\\{" + "operationGuid" + "\\}", localVarApiClient.escapeString(operationGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTGetImportCSVOperationStatusValidateBeforeCall(String operationGuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'operationGuid' is set
        if (operationGuid == null) {
            throw new ApiException("Missing the required parameter 'operationGuid' when calling glossaryRESTGetImportCSVOperationStatus(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTGetImportCSVOperationStatusCall(operationGuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get the status of import csv operation
     * @param operationGuid The globally unique identifier for async operation/job&#x60;. (required)
     * @return JsonImportCSVOperation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Return the status of import csv operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If operation GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public JsonImportCSVOperation glossaryRESTGetImportCSVOperationStatus(String operationGuid) throws ApiException {
        ApiResponse<JsonImportCSVOperation> localVarResp = glossaryRESTGetImportCSVOperationStatusWithHttpInfo(operationGuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the status of import csv operation
     * @param operationGuid The globally unique identifier for async operation/job&#x60;. (required)
     * @return ApiResponse&lt;JsonImportCSVOperation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Return the status of import csv operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If operation GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonImportCSVOperation> glossaryRESTGetImportCSVOperationStatusWithHttpInfo(String operationGuid) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTGetImportCSVOperationStatusValidateBeforeCall(operationGuid, null);
        Type localVarReturnType = new TypeToken<JsonImportCSVOperation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the status of import csv operation
     * @param operationGuid The globally unique identifier for async operation/job&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Return the status of import csv operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If operation GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTGetImportCSVOperationStatusAsync(String operationGuid, final ApiCallback<JsonImportCSVOperation> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTGetImportCSVOperationStatusValidateBeforeCall(operationGuid, _callback);
        Type localVarReturnType = new TypeToken<JsonImportCSVOperation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTGetRelatedCategories
     * @param categoryGuid The globally unique identifier of the category. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Gets an array of related categories. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTGetRelatedCategoriesCall(String categoryGuid, Integer limit, Integer offset, String sort, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/category/{categoryGuid}/related"
            .replaceAll("\\{" + "categoryGuid" + "\\}", localVarApiClient.escapeString(categoryGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTGetRelatedCategoriesValidateBeforeCall(String categoryGuid, Integer limit, Integer offset, String sort, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'categoryGuid' is set
        if (categoryGuid == null) {
            throw new ApiException("Missing the required parameter 'categoryGuid' when calling glossaryRESTGetRelatedCategories(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTGetRelatedCategoriesCall(categoryGuid, limit, offset, sort, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets all related categories (parent and children). Limit, offset, and sort parameters are currently not being enabled and won&#39;t work even they are passed.
     * @param categoryGuid The globally unique identifier of the category. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @return Map&lt;String, List&lt;JsonAtlasRelatedCategoryHeader&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Gets an array of related categories. </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, List<JsonAtlasRelatedCategoryHeader>> glossaryRESTGetRelatedCategories(String categoryGuid, Integer limit, Integer offset, String sort) throws ApiException {
        ApiResponse<Map<String, List<JsonAtlasRelatedCategoryHeader>>> localVarResp = glossaryRESTGetRelatedCategoriesWithHttpInfo(categoryGuid, limit, offset, sort);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all related categories (parent and children). Limit, offset, and sort parameters are currently not being enabled and won&#39;t work even they are passed.
     * @param categoryGuid The globally unique identifier of the category. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @return ApiResponse&lt;Map&lt;String, List&lt;JsonAtlasRelatedCategoryHeader&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Gets an array of related categories. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, List<JsonAtlasRelatedCategoryHeader>>> glossaryRESTGetRelatedCategoriesWithHttpInfo(String categoryGuid, Integer limit, Integer offset, String sort) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTGetRelatedCategoriesValidateBeforeCall(categoryGuid, limit, offset, sort, null);
        Type localVarReturnType = new TypeToken<Map<String, List<JsonAtlasRelatedCategoryHeader>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all related categories (parent and children). Limit, offset, and sort parameters are currently not being enabled and won&#39;t work even they are passed.
     * @param categoryGuid The globally unique identifier of the category. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Gets an array of related categories. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTGetRelatedCategoriesAsync(String categoryGuid, Integer limit, Integer offset, String sort, final ApiCallback<Map<String, List<JsonAtlasRelatedCategoryHeader>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTGetRelatedCategoriesValidateBeforeCall(categoryGuid, limit, offset, sort, _callback);
        Type localVarReturnType = new TypeToken<Map<String, List<JsonAtlasRelatedCategoryHeader>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTGetRelatedTerms
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An array of related glossary terms for the given glossary or an empty list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTGetRelatedTermsCall(String termGuid, Integer limit, Integer offset, String sort, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/terms/{termGuid}/related"
            .replaceAll("\\{" + "termGuid" + "\\}", localVarApiClient.escapeString(termGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTGetRelatedTermsValidateBeforeCall(String termGuid, Integer limit, Integer offset, String sort, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'termGuid' is set
        if (termGuid == null) {
            throw new ApiException("Missing the required parameter 'termGuid' when calling glossaryRESTGetRelatedTerms(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTGetRelatedTermsCall(termGuid, limit, offset, sort, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets all related terms for a specific term by its GUID. Limit, offset, and sort parameters are currently not being enabled and won&#39;t work even they are passed.
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @return Map&lt;String, List&lt;JsonAtlasRelatedTermHeader&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An array of related glossary terms for the given glossary or an empty list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, List<JsonAtlasRelatedTermHeader>> glossaryRESTGetRelatedTerms(String termGuid, Integer limit, Integer offset, String sort) throws ApiException {
        ApiResponse<Map<String, List<JsonAtlasRelatedTermHeader>>> localVarResp = glossaryRESTGetRelatedTermsWithHttpInfo(termGuid, limit, offset, sort);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all related terms for a specific term by its GUID. Limit, offset, and sort parameters are currently not being enabled and won&#39;t work even they are passed.
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @return ApiResponse&lt;Map&lt;String, List&lt;JsonAtlasRelatedTermHeader&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An array of related glossary terms for the given glossary or an empty list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, List<JsonAtlasRelatedTermHeader>>> glossaryRESTGetRelatedTermsWithHttpInfo(String termGuid, Integer limit, Integer offset, String sort) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTGetRelatedTermsValidateBeforeCall(termGuid, limit, offset, sort, null);
        Type localVarReturnType = new TypeToken<Map<String, List<JsonAtlasRelatedTermHeader>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all related terms for a specific term by its GUID. Limit, offset, and sort parameters are currently not being enabled and won&#39;t work even they are passed.
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param sort The sort order, ASC (default) or DESC. (optional, default to &quot;ASC&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An array of related glossary terms for the given glossary or an empty list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTGetRelatedTermsAsync(String termGuid, Integer limit, Integer offset, String sort, final ApiCallback<Map<String, List<JsonAtlasRelatedTermHeader>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTGetRelatedTermsValidateBeforeCall(termGuid, limit, offset, sort, _callback);
        Type localVarReturnType = new TypeToken<Map<String, List<JsonAtlasRelatedTermHeader>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTGetTermsByGlossaryName
     * @param glossaryName The name of the glossary. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An array of glossary terms for the given glossary or an empty list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTGetTermsByGlossaryNameCall(String glossaryName, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/name/{glossaryName}/terms"
            .replaceAll("\\{" + "glossaryName" + "\\}", localVarApiClient.escapeString(glossaryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTGetTermsByGlossaryNameValidateBeforeCall(String glossaryName, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'glossaryName' is set
        if (glossaryName == null) {
            throw new ApiException("Missing the required parameter 'glossaryName' when calling glossaryRESTGetTermsByGlossaryName(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTGetTermsByGlossaryNameCall(glossaryName, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets terms by glossary name.
     * @param glossaryName The name of the glossary. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @return List&lt;JsonAtlasGlossaryTerm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An array of glossary terms for the given glossary or an empty list. </td><td>  -  </td></tr>
     </table>
     */
    public List<JsonAtlasGlossaryTerm> glossaryRESTGetTermsByGlossaryName(String glossaryName, Integer limit, Integer offset) throws ApiException {
        ApiResponse<List<JsonAtlasGlossaryTerm>> localVarResp = glossaryRESTGetTermsByGlossaryNameWithHttpInfo(glossaryName, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets terms by glossary name.
     * @param glossaryName The name of the glossary. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @return ApiResponse&lt;List&lt;JsonAtlasGlossaryTerm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An array of glossary terms for the given glossary or an empty list. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<JsonAtlasGlossaryTerm>> glossaryRESTGetTermsByGlossaryNameWithHttpInfo(String glossaryName, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTGetTermsByGlossaryNameValidateBeforeCall(glossaryName, limit, offset, null);
        Type localVarReturnType = new TypeToken<List<JsonAtlasGlossaryTerm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets terms by glossary name.
     * @param glossaryName The name of the glossary. (required)
     * @param limit The page size - by default there is no paging. (optional)
     * @param offset The offset for pagination purpose. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An array of glossary terms for the given glossary or an empty list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTGetTermsByGlossaryNameAsync(String glossaryName, Integer limit, Integer offset, final ApiCallback<List<JsonAtlasGlossaryTerm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTGetTermsByGlossaryNameValidateBeforeCall(glossaryName, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<List<JsonAtlasGlossaryTerm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTImportGlossaryTermsViaCSV
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param file The csv file to import glossary terms from. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. A job to import glossary terms via csv has been accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If csv file is not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTImportGlossaryTermsViaCSVCall(String glossaryGuid, File file, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/{glossaryGuid}/terms/import"
            .replaceAll("\\{" + "glossaryGuid" + "\\}", localVarApiClient.escapeString(glossaryGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTImportGlossaryTermsViaCSVValidateBeforeCall(String glossaryGuid, File file, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'glossaryGuid' is set
        if (glossaryGuid == null) {
            throw new ApiException("Missing the required parameter 'glossaryGuid' when calling glossaryRESTImportGlossaryTermsViaCSV(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling glossaryRESTImportGlossaryTermsViaCSV(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTImportGlossaryTermsViaCSVCall(glossaryGuid, file, _callback);
        return localVarCall;

    }

    /**
     * 
     * Import Glossary Terms from local csv file
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param file The csv file to import glossary terms from. (required)
     * @return JsonImportCSVOperation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. A job to import glossary terms via csv has been accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If csv file is not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public JsonImportCSVOperation glossaryRESTImportGlossaryTermsViaCSV(String glossaryGuid, File file) throws ApiException {
        ApiResponse<JsonImportCSVOperation> localVarResp = glossaryRESTImportGlossaryTermsViaCSVWithHttpInfo(glossaryGuid, file);
        return localVarResp.getData();
    }

    /**
     * 
     * Import Glossary Terms from local csv file
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param file The csv file to import glossary terms from. (required)
     * @return ApiResponse&lt;JsonImportCSVOperation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. A job to import glossary terms via csv has been accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If csv file is not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonImportCSVOperation> glossaryRESTImportGlossaryTermsViaCSVWithHttpInfo(String glossaryGuid, File file) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTImportGlossaryTermsViaCSVValidateBeforeCall(glossaryGuid, file, null);
        Type localVarReturnType = new TypeToken<JsonImportCSVOperation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Import Glossary Terms from local csv file
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param file The csv file to import glossary terms from. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. A job to import glossary terms via csv has been accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If csv file is not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTImportGlossaryTermsViaCSVAsync(String glossaryGuid, File file, final ApiCallback<JsonImportCSVOperation> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTImportGlossaryTermsViaCSVValidateBeforeCall(glossaryGuid, file, _callback);
        Type localVarReturnType = new TypeToken<JsonImportCSVOperation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTImportGlossaryTermsViaCSVByGlossaryName
     * @param glossaryName The name of the glossary. (required)
     * @param file The csv file to import glossary terms from. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. A job to import glossary terms via csv has been accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If csv file is not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTImportGlossaryTermsViaCSVByGlossaryNameCall(String glossaryName, File file, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/name/{glossaryName}/terms/import"
            .replaceAll("\\{" + "glossaryName" + "\\}", localVarApiClient.escapeString(glossaryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTImportGlossaryTermsViaCSVByGlossaryNameValidateBeforeCall(String glossaryName, File file, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'glossaryName' is set
        if (glossaryName == null) {
            throw new ApiException("Missing the required parameter 'glossaryName' when calling glossaryRESTImportGlossaryTermsViaCSVByGlossaryName(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling glossaryRESTImportGlossaryTermsViaCSVByGlossaryName(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTImportGlossaryTermsViaCSVByGlossaryNameCall(glossaryName, file, _callback);
        return localVarCall;

    }

    /**
     * 
     * Import Glossary Terms from local csv file by glossaryName
     * @param glossaryName The name of the glossary. (required)
     * @param file The csv file to import glossary terms from. (required)
     * @return JsonImportCSVOperation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. A job to import glossary terms via csv has been accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If csv file is not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public JsonImportCSVOperation glossaryRESTImportGlossaryTermsViaCSVByGlossaryName(String glossaryName, File file) throws ApiException {
        ApiResponse<JsonImportCSVOperation> localVarResp = glossaryRESTImportGlossaryTermsViaCSVByGlossaryNameWithHttpInfo(glossaryName, file);
        return localVarResp.getData();
    }

    /**
     * 
     * Import Glossary Terms from local csv file by glossaryName
     * @param glossaryName The name of the glossary. (required)
     * @param file The csv file to import glossary terms from. (required)
     * @return ApiResponse&lt;JsonImportCSVOperation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. A job to import glossary terms via csv has been accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If csv file is not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonImportCSVOperation> glossaryRESTImportGlossaryTermsViaCSVByGlossaryNameWithHttpInfo(String glossaryName, File file) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTImportGlossaryTermsViaCSVByGlossaryNameValidateBeforeCall(glossaryName, file, null);
        Type localVarReturnType = new TypeToken<JsonImportCSVOperation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Import Glossary Terms from local csv file by glossaryName
     * @param glossaryName The name of the glossary. (required)
     * @param file The csv file to import glossary terms from. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. A job to import glossary terms via csv has been accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If csv file is not valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTImportGlossaryTermsViaCSVByGlossaryNameAsync(String glossaryName, File file, final ApiCallback<JsonImportCSVOperation> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTImportGlossaryTermsViaCSVByGlossaryNameValidateBeforeCall(glossaryName, file, _callback);
        Type localVarReturnType = new TypeToken<JsonImportCSVOperation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTPartialUpdateGlossary
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param partialUpdates A map containing keys as attribute names and values as corresponding attribute values. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary partial update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If partial update parameters are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTPartialUpdateGlossaryCall(String glossaryGuid, Map<String, String> partialUpdates, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = partialUpdates;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/{glossaryGuid}/partial"
            .replaceAll("\\{" + "glossaryGuid" + "\\}", localVarApiClient.escapeString(glossaryGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTPartialUpdateGlossaryValidateBeforeCall(String glossaryGuid, Map<String, String> partialUpdates, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'glossaryGuid' is set
        if (glossaryGuid == null) {
            throw new ApiException("Missing the required parameter 'glossaryGuid' when calling glossaryRESTPartialUpdateGlossary(Async)");
        }
        
        // verify the required parameter 'partialUpdates' is set
        if (partialUpdates == null) {
            throw new ApiException("Missing the required parameter 'partialUpdates' when calling glossaryRESTPartialUpdateGlossary(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTPartialUpdateGlossaryCall(glossaryGuid, partialUpdates, _callback);
        return localVarCall;

    }

    /**
     * 
     * Updates the glossary partially. Some properties such as qualifiedName are not allowed to be updated.
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param partialUpdates A map containing keys as attribute names and values as corresponding attribute values. (required)
     * @return JsonAtlasGlossary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary partial update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If partial update parameters are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasGlossary glossaryRESTPartialUpdateGlossary(String glossaryGuid, Map<String, String> partialUpdates) throws ApiException {
        ApiResponse<JsonAtlasGlossary> localVarResp = glossaryRESTPartialUpdateGlossaryWithHttpInfo(glossaryGuid, partialUpdates);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the glossary partially. Some properties such as qualifiedName are not allowed to be updated.
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param partialUpdates A map containing keys as attribute names and values as corresponding attribute values. (required)
     * @return ApiResponse&lt;JsonAtlasGlossary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary partial update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If partial update parameters are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasGlossary> glossaryRESTPartialUpdateGlossaryWithHttpInfo(String glossaryGuid, Map<String, String> partialUpdates) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTPartialUpdateGlossaryValidateBeforeCall(glossaryGuid, partialUpdates, null);
        Type localVarReturnType = new TypeToken<JsonAtlasGlossary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the glossary partially. Some properties such as qualifiedName are not allowed to be updated.
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param partialUpdates A map containing keys as attribute names and values as corresponding attribute values. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary partial update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If partial update parameters are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTPartialUpdateGlossaryAsync(String glossaryGuid, Map<String, String> partialUpdates, final ApiCallback<JsonAtlasGlossary> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTPartialUpdateGlossaryValidateBeforeCall(glossaryGuid, partialUpdates, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasGlossary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTPartialUpdateGlossaryCategory
     * @param categoryGuid The globally unique identifier of the category. (required)
     * @param partialUpdates A map containing keys as attribute names and values as corresponding attribute values for partial update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary category partial update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If category attributes are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary category GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTPartialUpdateGlossaryCategoryCall(String categoryGuid, Map<String, String> partialUpdates, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = partialUpdates;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/category/{categoryGuid}/partial"
            .replaceAll("\\{" + "categoryGuid" + "\\}", localVarApiClient.escapeString(categoryGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTPartialUpdateGlossaryCategoryValidateBeforeCall(String categoryGuid, Map<String, String> partialUpdates, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'categoryGuid' is set
        if (categoryGuid == null) {
            throw new ApiException("Missing the required parameter 'categoryGuid' when calling glossaryRESTPartialUpdateGlossaryCategory(Async)");
        }
        
        // verify the required parameter 'partialUpdates' is set
        if (partialUpdates == null) {
            throw new ApiException("Missing the required parameter 'partialUpdates' when calling glossaryRESTPartialUpdateGlossaryCategory(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTPartialUpdateGlossaryCategoryCall(categoryGuid, partialUpdates, _callback);
        return localVarCall;

    }

    /**
     * 
     * Updates the glossary category partially.
     * @param categoryGuid The globally unique identifier of the category. (required)
     * @param partialUpdates A map containing keys as attribute names and values as corresponding attribute values for partial update. (required)
     * @return JsonAtlasGlossaryCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary category partial update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If category attributes are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary category GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasGlossaryCategory glossaryRESTPartialUpdateGlossaryCategory(String categoryGuid, Map<String, String> partialUpdates) throws ApiException {
        ApiResponse<JsonAtlasGlossaryCategory> localVarResp = glossaryRESTPartialUpdateGlossaryCategoryWithHttpInfo(categoryGuid, partialUpdates);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the glossary category partially.
     * @param categoryGuid The globally unique identifier of the category. (required)
     * @param partialUpdates A map containing keys as attribute names and values as corresponding attribute values for partial update. (required)
     * @return ApiResponse&lt;JsonAtlasGlossaryCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary category partial update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If category attributes are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary category GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasGlossaryCategory> glossaryRESTPartialUpdateGlossaryCategoryWithHttpInfo(String categoryGuid, Map<String, String> partialUpdates) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTPartialUpdateGlossaryCategoryValidateBeforeCall(categoryGuid, partialUpdates, null);
        Type localVarReturnType = new TypeToken<JsonAtlasGlossaryCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the glossary category partially.
     * @param categoryGuid The globally unique identifier of the category. (required)
     * @param partialUpdates A map containing keys as attribute names and values as corresponding attribute values for partial update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary category partial update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If category attributes are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary category GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTPartialUpdateGlossaryCategoryAsync(String categoryGuid, Map<String, String> partialUpdates, final ApiCallback<JsonAtlasGlossaryCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTPartialUpdateGlossaryCategoryValidateBeforeCall(categoryGuid, partialUpdates, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasGlossaryCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTPartialUpdateGlossaryTerm
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param partialUpdates A map containing keys as attribute names and values as corresponding attribute values to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary partial update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If partial attributes are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term guid in invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTPartialUpdateGlossaryTermCall(String termGuid, Map<String, String> partialUpdates, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = partialUpdates;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/term/{termGuid}/partial"
            .replaceAll("\\{" + "termGuid" + "\\}", localVarApiClient.escapeString(termGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTPartialUpdateGlossaryTermValidateBeforeCall(String termGuid, Map<String, String> partialUpdates, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'termGuid' is set
        if (termGuid == null) {
            throw new ApiException("Missing the required parameter 'termGuid' when calling glossaryRESTPartialUpdateGlossaryTerm(Async)");
        }
        
        // verify the required parameter 'partialUpdates' is set
        if (partialUpdates == null) {
            throw new ApiException("Missing the required parameter 'partialUpdates' when calling glossaryRESTPartialUpdateGlossaryTerm(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTPartialUpdateGlossaryTermCall(termGuid, partialUpdates, _callback);
        return localVarCall;

    }

    /**
     * 
     * Updates the glossary term partially.
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param partialUpdates A map containing keys as attribute names and values as corresponding attribute values to be updated. (required)
     * @return JsonAtlasGlossaryTerm
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary partial update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If partial attributes are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term guid in invalid. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasGlossaryTerm glossaryRESTPartialUpdateGlossaryTerm(String termGuid, Map<String, String> partialUpdates) throws ApiException {
        ApiResponse<JsonAtlasGlossaryTerm> localVarResp = glossaryRESTPartialUpdateGlossaryTermWithHttpInfo(termGuid, partialUpdates);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the glossary term partially.
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param partialUpdates A map containing keys as attribute names and values as corresponding attribute values to be updated. (required)
     * @return ApiResponse&lt;JsonAtlasGlossaryTerm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary partial update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If partial attributes are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term guid in invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasGlossaryTerm> glossaryRESTPartialUpdateGlossaryTermWithHttpInfo(String termGuid, Map<String, String> partialUpdates) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTPartialUpdateGlossaryTermValidateBeforeCall(termGuid, partialUpdates, null);
        Type localVarReturnType = new TypeToken<JsonAtlasGlossaryTerm>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the glossary term partially.
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param partialUpdates A map containing keys as attribute names and values as corresponding attribute values to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary partial update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If partial attributes are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term guid in invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTPartialUpdateGlossaryTermAsync(String termGuid, Map<String, String> partialUpdates, final ApiCallback<JsonAtlasGlossaryTerm> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTPartialUpdateGlossaryTermValidateBeforeCall(termGuid, partialUpdates, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasGlossaryTerm>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTRemoveTermAssignmentFromEntities
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param relatedObjectIds An array of related object IDs from which the term has to be dissociated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK. If glossary term dissociation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If ANY of the related objects is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTRemoveTermAssignmentFromEntitiesCall(String termGuid, List<JsonAtlasRelatedObjectId> relatedObjectIds, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = relatedObjectIds;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/terms/{termGuid}/assignedEntities"
            .replaceAll("\\{" + "termGuid" + "\\}", localVarApiClient.escapeString(termGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTRemoveTermAssignmentFromEntitiesValidateBeforeCall(String termGuid, List<JsonAtlasRelatedObjectId> relatedObjectIds, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'termGuid' is set
        if (termGuid == null) {
            throw new ApiException("Missing the required parameter 'termGuid' when calling glossaryRESTRemoveTermAssignmentFromEntities(Async)");
        }
        
        // verify the required parameter 'relatedObjectIds' is set
        if (relatedObjectIds == null) {
            throw new ApiException("Missing the required parameter 'relatedObjectIds' when calling glossaryRESTRemoveTermAssignmentFromEntities(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTRemoveTermAssignmentFromEntitiesCall(termGuid, relatedObjectIds, _callback);
        return localVarCall;

    }

    /**
     * 
     * Deletes the term assignment for the given list of related objects.
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param relatedObjectIds An array of related object IDs from which the term has to be dissociated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK. If glossary term dissociation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If ANY of the related objects is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public void glossaryRESTRemoveTermAssignmentFromEntities(String termGuid, List<JsonAtlasRelatedObjectId> relatedObjectIds) throws ApiException {
        glossaryRESTRemoveTermAssignmentFromEntitiesWithHttpInfo(termGuid, relatedObjectIds);
    }

    /**
     * 
     * Deletes the term assignment for the given list of related objects.
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param relatedObjectIds An array of related object IDs from which the term has to be dissociated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK. If glossary term dissociation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If ANY of the related objects is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> glossaryRESTRemoveTermAssignmentFromEntitiesWithHttpInfo(String termGuid, List<JsonAtlasRelatedObjectId> relatedObjectIds) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTRemoveTermAssignmentFromEntitiesValidateBeforeCall(termGuid, relatedObjectIds, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the term assignment for the given list of related objects.
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param relatedObjectIds An array of related object IDs from which the term has to be dissociated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK. If glossary term dissociation was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If ANY of the related objects is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTRemoveTermAssignmentFromEntitiesAsync(String termGuid, List<JsonAtlasRelatedObjectId> relatedObjectIds, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTRemoveTermAssignmentFromEntitiesValidateBeforeCall(termGuid, relatedObjectIds, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTUpdateGlossary
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param updatedGlossary The glossary definition to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If glossary definition has invalid or missing information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTUpdateGlossaryCall(String glossaryGuid, JsonAtlasGlossary updatedGlossary, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updatedGlossary;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/{glossaryGuid}"
            .replaceAll("\\{" + "glossaryGuid" + "\\}", localVarApiClient.escapeString(glossaryGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTUpdateGlossaryValidateBeforeCall(String glossaryGuid, JsonAtlasGlossary updatedGlossary, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'glossaryGuid' is set
        if (glossaryGuid == null) {
            throw new ApiException("Missing the required parameter 'glossaryGuid' when calling glossaryRESTUpdateGlossary(Async)");
        }
        
        // verify the required parameter 'updatedGlossary' is set
        if (updatedGlossary == null) {
            throw new ApiException("Missing the required parameter 'updatedGlossary' when calling glossaryRESTUpdateGlossary(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTUpdateGlossaryCall(glossaryGuid, updatedGlossary, _callback);
        return localVarCall;

    }

    /**
     * 
     * Updates the given glossary.
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param updatedGlossary The glossary definition to be updated. (required)
     * @return JsonAtlasGlossary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If glossary definition has invalid or missing information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasGlossary glossaryRESTUpdateGlossary(String glossaryGuid, JsonAtlasGlossary updatedGlossary) throws ApiException {
        ApiResponse<JsonAtlasGlossary> localVarResp = glossaryRESTUpdateGlossaryWithHttpInfo(glossaryGuid, updatedGlossary);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the given glossary.
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param updatedGlossary The glossary definition to be updated. (required)
     * @return ApiResponse&lt;JsonAtlasGlossary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If glossary definition has invalid or missing information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasGlossary> glossaryRESTUpdateGlossaryWithHttpInfo(String glossaryGuid, JsonAtlasGlossary updatedGlossary) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTUpdateGlossaryValidateBeforeCall(glossaryGuid, updatedGlossary, null);
        Type localVarReturnType = new TypeToken<JsonAtlasGlossary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the given glossary.
     * @param glossaryGuid The globally unique identifier for glossary. (required)
     * @param updatedGlossary The glossary definition to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If glossary definition has invalid or missing information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTUpdateGlossaryAsync(String glossaryGuid, JsonAtlasGlossary updatedGlossary, final ApiCallback<JsonAtlasGlossary> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTUpdateGlossaryValidateBeforeCall(glossaryGuid, updatedGlossary, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasGlossary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTUpdateGlossaryCategory
     * @param categoryGuid The globally unique identifier of the category. (required)
     * @param glossaryCategory The glossary category to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary category partial update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If glossary category definition has invalid or missing information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary category GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTUpdateGlossaryCategoryCall(String categoryGuid, JsonAtlasGlossaryCategory glossaryCategory, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = glossaryCategory;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/category/{categoryGuid}"
            .replaceAll("\\{" + "categoryGuid" + "\\}", localVarApiClient.escapeString(categoryGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTUpdateGlossaryCategoryValidateBeforeCall(String categoryGuid, JsonAtlasGlossaryCategory glossaryCategory, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'categoryGuid' is set
        if (categoryGuid == null) {
            throw new ApiException("Missing the required parameter 'categoryGuid' when calling glossaryRESTUpdateGlossaryCategory(Async)");
        }
        
        // verify the required parameter 'glossaryCategory' is set
        if (glossaryCategory == null) {
            throw new ApiException("Missing the required parameter 'glossaryCategory' when calling glossaryRESTUpdateGlossaryCategory(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTUpdateGlossaryCategoryCall(categoryGuid, glossaryCategory, _callback);
        return localVarCall;

    }

    /**
     * 
     * Updates the given glossary category by its GUID.
     * @param categoryGuid The globally unique identifier of the category. (required)
     * @param glossaryCategory The glossary category to be updated. (required)
     * @return JsonAtlasGlossaryCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary category partial update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If glossary category definition has invalid or missing information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary category GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasGlossaryCategory glossaryRESTUpdateGlossaryCategory(String categoryGuid, JsonAtlasGlossaryCategory glossaryCategory) throws ApiException {
        ApiResponse<JsonAtlasGlossaryCategory> localVarResp = glossaryRESTUpdateGlossaryCategoryWithHttpInfo(categoryGuid, glossaryCategory);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the given glossary category by its GUID.
     * @param categoryGuid The globally unique identifier of the category. (required)
     * @param glossaryCategory The glossary category to be updated. (required)
     * @return ApiResponse&lt;JsonAtlasGlossaryCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary category partial update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If glossary category definition has invalid or missing information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary category GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasGlossaryCategory> glossaryRESTUpdateGlossaryCategoryWithHttpInfo(String categoryGuid, JsonAtlasGlossaryCategory glossaryCategory) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTUpdateGlossaryCategoryValidateBeforeCall(categoryGuid, glossaryCategory, null);
        Type localVarReturnType = new TypeToken<JsonAtlasGlossaryCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the given glossary category by its GUID.
     * @param categoryGuid The globally unique identifier of the category. (required)
     * @param glossaryCategory The glossary category to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary category partial update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If glossary category definition has invalid or missing information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary category GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTUpdateGlossaryCategoryAsync(String categoryGuid, JsonAtlasGlossaryCategory glossaryCategory, final ApiCallback<JsonAtlasGlossaryCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTUpdateGlossaryCategoryValidateBeforeCall(categoryGuid, glossaryCategory, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasGlossaryCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryRESTUpdateGlossaryTerm
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param glossaryTerm The glossary term to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary term update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If glossary temr definition has invalid or missing information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTUpdateGlossaryTermCall(String termGuid, JsonAtlasGlossaryTerm glossaryTerm, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = glossaryTerm;

        // create path and map variables
        String localVarPath = "/atlas/v2/glossary/term/{termGuid}"
            .replaceAll("\\{" + "termGuid" + "\\}", localVarApiClient.escapeString(termGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryRESTUpdateGlossaryTermValidateBeforeCall(String termGuid, JsonAtlasGlossaryTerm glossaryTerm, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'termGuid' is set
        if (termGuid == null) {
            throw new ApiException("Missing the required parameter 'termGuid' when calling glossaryRESTUpdateGlossaryTerm(Async)");
        }
        
        // verify the required parameter 'glossaryTerm' is set
        if (glossaryTerm == null) {
            throw new ApiException("Missing the required parameter 'glossaryTerm' when calling glossaryRESTUpdateGlossaryTerm(Async)");
        }
        

        okhttp3.Call localVarCall = glossaryRESTUpdateGlossaryTermCall(termGuid, glossaryTerm, _callback);
        return localVarCall;

    }

    /**
     * 
     * Updates the given glossary term by its GUID.
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param glossaryTerm The glossary term to be updated. (required)
     * @return JsonAtlasGlossaryTerm
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary term update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If glossary temr definition has invalid or missing information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasGlossaryTerm glossaryRESTUpdateGlossaryTerm(String termGuid, JsonAtlasGlossaryTerm glossaryTerm) throws ApiException {
        ApiResponse<JsonAtlasGlossaryTerm> localVarResp = glossaryRESTUpdateGlossaryTermWithHttpInfo(termGuid, glossaryTerm);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the given glossary term by its GUID.
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param glossaryTerm The glossary term to be updated. (required)
     * @return ApiResponse&lt;JsonAtlasGlossaryTerm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary term update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If glossary temr definition has invalid or missing information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasGlossaryTerm> glossaryRESTUpdateGlossaryTermWithHttpInfo(String termGuid, JsonAtlasGlossaryTerm glossaryTerm) throws ApiException {
        okhttp3.Call localVarCall = glossaryRESTUpdateGlossaryTermValidateBeforeCall(termGuid, glossaryTerm, null);
        Type localVarReturnType = new TypeToken<JsonAtlasGlossaryTerm>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the given glossary term by its GUID.
     * @param termGuid The globally unique identifier for glossary term. (required)
     * @param glossaryTerm The glossary term to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. If glossary term update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If glossary temr definition has invalid or missing information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If glossary term GUID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryRESTUpdateGlossaryTermAsync(String termGuid, JsonAtlasGlossaryTerm glossaryTerm, final ApiCallback<JsonAtlasGlossaryTerm> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryRESTUpdateGlossaryTermValidateBeforeCall(termGuid, glossaryTerm, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasGlossaryTerm>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
