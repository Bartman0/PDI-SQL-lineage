/*
 * Purview Catalog Service REST API Document
 * Purview Catalog Service is a fully managed cloud service whose users can discover the data sources they need and understand the data sources they find. At the same time, Data Catalog helps organizations get more value from their existing investments. This swagger defines REST API of the Hot Tier of Data Catalog Gen 2.
 *
 * The version of the OpenAPI document: 2020-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.JsonCondition;
import org.openapitools.client.model.JsonOperator;

/**
 * The filter criteria with attributes and condition.
 */
@ApiModel(description = "The filter criteria with attributes and condition.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-01-21T11:36:33.263002+01:00[Europe/Amsterdam]")
public class JsonFilterCriteria {
  public static final String SERIALIZED_NAME_ATTRIBUTE_NAME = "attributeName";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_NAME)
  private String attributeName;

  public static final String SERIALIZED_NAME_ATTRIBUTE_VALUE = "attributeValue";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_VALUE)
  private String attributeValue;

  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private JsonCondition condition;

  public static final String SERIALIZED_NAME_CRITERION = "criterion";
  @SerializedName(SERIALIZED_NAME_CRITERION)
  private List<JsonFilterCriteria> criterion = null;

  public static final String SERIALIZED_NAME_OPERATOR = "operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  private JsonOperator operator;


  public JsonFilterCriteria attributeName(String attributeName) {
    
    this.attributeName = attributeName;
    return this;
  }

   /**
   * The name of the attribute.
   * @return attributeName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the attribute.")

  public String getAttributeName() {
    return attributeName;
  }


  public void setAttributeName(String attributeName) {
    this.attributeName = attributeName;
  }


  public JsonFilterCriteria attributeValue(String attributeValue) {
    
    this.attributeValue = attributeValue;
    return this;
  }

   /**
   * The value of the attribute.
   * @return attributeValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The value of the attribute.")

  public String getAttributeValue() {
    return attributeValue;
  }


  public void setAttributeValue(String attributeValue) {
    this.attributeValue = attributeValue;
  }


  public JsonFilterCriteria condition(JsonCondition condition) {
    
    this.condition = condition;
    return this;
  }

   /**
   * Get condition
   * @return condition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JsonCondition getCondition() {
    return condition;
  }


  public void setCondition(JsonCondition condition) {
    this.condition = condition;
  }


  public JsonFilterCriteria criterion(List<JsonFilterCriteria> criterion) {
    
    this.criterion = criterion;
    return this;
  }

  public JsonFilterCriteria addCriterionItem(JsonFilterCriteria criterionItem) {
    if (this.criterion == null) {
      this.criterion = new ArrayList<JsonFilterCriteria>();
    }
    this.criterion.add(criterionItem);
    return this;
  }

   /**
   * An array of filter criteria.
   * @return criterion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of filter criteria.")

  public List<JsonFilterCriteria> getCriterion() {
    return criterion;
  }


  public void setCriterion(List<JsonFilterCriteria> criterion) {
    this.criterion = criterion;
  }


  public JsonFilterCriteria operator(JsonOperator operator) {
    
    this.operator = operator;
    return this;
  }

   /**
   * Get operator
   * @return operator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JsonOperator getOperator() {
    return operator;
  }


  public void setOperator(JsonOperator operator) {
    this.operator = operator;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonFilterCriteria jsonFilterCriteria = (JsonFilterCriteria) o;
    return Objects.equals(this.attributeName, jsonFilterCriteria.attributeName) &&
        Objects.equals(this.attributeValue, jsonFilterCriteria.attributeValue) &&
        Objects.equals(this.condition, jsonFilterCriteria.condition) &&
        Objects.equals(this.criterion, jsonFilterCriteria.criterion) &&
        Objects.equals(this.operator, jsonFilterCriteria.operator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeName, attributeValue, condition, criterion, operator);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonFilterCriteria {\n");
    sb.append("    attributeName: ").append(toIndentedString(attributeName)).append("\n");
    sb.append("    attributeValue: ").append(toIndentedString(attributeValue)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    criterion: ").append(toIndentedString(criterion)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

