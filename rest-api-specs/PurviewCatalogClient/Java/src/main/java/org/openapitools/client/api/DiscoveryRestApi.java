/*
 * Purview Catalog Service REST API Document
 * Purview Catalog Service is a fully managed cloud service whose users can discover the data sources they need and understand the data sources they find. At the same time, Data Catalog helps organizations get more value from their existing investments. This swagger defines REST API of the Hot Tier of Data Catalog Gen 2.
 *
 * The version of the OpenAPI document: 2020-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.JsonAdvancedSearchResult;
import org.openapitools.client.model.JsonAutocompleteResult;
import org.openapitools.client.model.JsonSearchRequest;
import org.openapitools.client.model.JsonSuggestRequest;
import org.openapitools.client.model.JsonSuggestResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DiscoveryRestApi {
    private ApiClient localVarApiClient;

    public DiscoveryRestApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DiscoveryRestApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for discoveryRESTAutoComplete
     * @param keyword The keyword to get auto complete. (required)
     * @param limit Limits the result set to only include the specified number of entries. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the auto complete options. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Illegal argument: Keyword is required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call discoveryRESTAutoCompleteCall(String keyword, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/search/autocomplete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call discoveryRESTAutoCompleteValidateBeforeCall(String keyword, Integer limit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling discoveryRESTAutoComplete(Async)");
        }
        

        okhttp3.Call localVarCall = discoveryRESTAutoCompleteCall(keyword, limit, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets auto complete options.
     * @param keyword The keyword to get auto complete. (required)
     * @param limit Limits the result set to only include the specified number of entries. (optional)
     * @return JsonAutocompleteResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the auto complete options. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Illegal argument: Keyword is required </td><td>  -  </td></tr>
     </table>
     */
    public JsonAutocompleteResult discoveryRESTAutoComplete(String keyword, Integer limit) throws ApiException {
        ApiResponse<JsonAutocompleteResult> localVarResp = discoveryRESTAutoCompleteWithHttpInfo(keyword, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets auto complete options.
     * @param keyword The keyword to get auto complete. (required)
     * @param limit Limits the result set to only include the specified number of entries. (optional)
     * @return ApiResponse&lt;JsonAutocompleteResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the auto complete options. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Illegal argument: Keyword is required </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAutocompleteResult> discoveryRESTAutoCompleteWithHttpInfo(String keyword, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = discoveryRESTAutoCompleteValidateBeforeCall(keyword, limit, null);
        Type localVarReturnType = new TypeToken<JsonAutocompleteResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets auto complete options.
     * @param keyword The keyword to get auto complete. (required)
     * @param limit Limits the result set to only include the specified number of entries. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the auto complete options. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Illegal argument: Keyword is required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call discoveryRESTAutoCompleteAsync(String keyword, Integer limit, final ApiCallback<JsonAutocompleteResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = discoveryRESTAutoCompleteValidateBeforeCall(keyword, limit, _callback);
        Type localVarReturnType = new TypeToken<JsonAutocompleteResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for discoveryRESTSearchAdvanced
     * @param searchRequest An object specifying the search criteria. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the advanced search. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Illegal argument exception thrown. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call discoveryRESTSearchAdvancedCall(JsonSearchRequest searchRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = searchRequest;

        // create path and map variables
        String localVarPath = "/atlas/v2/search/advanced";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call discoveryRESTSearchAdvancedValidateBeforeCall(JsonSearchRequest searchRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'searchRequest' is set
        if (searchRequest == null) {
            throw new ApiException("Missing the required parameter 'searchRequest' when calling discoveryRESTSearchAdvanced(Async)");
        }
        

        okhttp3.Call localVarCall = discoveryRESTSearchAdvancedCall(searchRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets data using advanced search.
     * @param searchRequest An object specifying the search criteria. (required)
     * @return JsonAdvancedSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the advanced search. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Illegal argument exception thrown. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAdvancedSearchResult discoveryRESTSearchAdvanced(JsonSearchRequest searchRequest) throws ApiException {
        ApiResponse<JsonAdvancedSearchResult> localVarResp = discoveryRESTSearchAdvancedWithHttpInfo(searchRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets data using advanced search.
     * @param searchRequest An object specifying the search criteria. (required)
     * @return ApiResponse&lt;JsonAdvancedSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the advanced search. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Illegal argument exception thrown. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAdvancedSearchResult> discoveryRESTSearchAdvancedWithHttpInfo(JsonSearchRequest searchRequest) throws ApiException {
        okhttp3.Call localVarCall = discoveryRESTSearchAdvancedValidateBeforeCall(searchRequest, null);
        Type localVarReturnType = new TypeToken<JsonAdvancedSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets data using advanced search.
     * @param searchRequest An object specifying the search criteria. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the advanced search. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Illegal argument exception thrown. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call discoveryRESTSearchAdvancedAsync(JsonSearchRequest searchRequest, final ApiCallback<JsonAdvancedSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = discoveryRESTSearchAdvancedValidateBeforeCall(searchRequest, _callback);
        Type localVarReturnType = new TypeToken<JsonAdvancedSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for discoveryRESTSuggest
     * @param suggestRequest An object specifying the suggest criteria. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the suggestions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Illegal argument exception thrown. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call discoveryRESTSuggestCall(JsonSuggestRequest suggestRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = suggestRequest;

        // create path and map variables
        String localVarPath = "/atlas/v2/search/suggest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call discoveryRESTSuggestValidateBeforeCall(JsonSuggestRequest suggestRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'suggestRequest' is set
        if (suggestRequest == null) {
            throw new ApiException("Missing the required parameter 'suggestRequest' when calling discoveryRESTSuggest(Async)");
        }
        

        okhttp3.Call localVarCall = discoveryRESTSuggestCall(suggestRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets search suggestions by query criteria.
     * @param suggestRequest An object specifying the suggest criteria. (required)
     * @return JsonSuggestResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the suggestions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Illegal argument exception thrown. </td><td>  -  </td></tr>
     </table>
     */
    public JsonSuggestResult discoveryRESTSuggest(JsonSuggestRequest suggestRequest) throws ApiException {
        ApiResponse<JsonSuggestResult> localVarResp = discoveryRESTSuggestWithHttpInfo(suggestRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets search suggestions by query criteria.
     * @param suggestRequest An object specifying the suggest criteria. (required)
     * @return ApiResponse&lt;JsonSuggestResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the suggestions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Illegal argument exception thrown. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonSuggestResult> discoveryRESTSuggestWithHttpInfo(JsonSuggestRequest suggestRequest) throws ApiException {
        okhttp3.Call localVarCall = discoveryRESTSuggestValidateBeforeCall(suggestRequest, null);
        Type localVarReturnType = new TypeToken<JsonSuggestResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets search suggestions by query criteria.
     * @param suggestRequest An object specifying the suggest criteria. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. On successful lookup of the suggestions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Illegal argument exception thrown. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call discoveryRESTSuggestAsync(JsonSuggestRequest suggestRequest, final ApiCallback<JsonSuggestResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = discoveryRESTSuggestValidateBeforeCall(suggestRequest, _callback);
        Type localVarReturnType = new TypeToken<JsonSuggestResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
