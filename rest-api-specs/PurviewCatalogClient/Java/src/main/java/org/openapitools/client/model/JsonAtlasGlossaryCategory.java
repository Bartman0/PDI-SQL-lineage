/*
 * Purview Catalog Service REST API Document
 * Purview Catalog Service is a fully managed cloud service whose users can discover the data sources they need and understand the data sources they find. At the same time, Data Catalog helps organizations get more value from their existing investments. This swagger defines REST API of the Hot Tier of Data Catalog Gen 2.
 *
 * The version of the OpenAPI document: 2020-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.JsonAtlasClassification;
import org.openapitools.client.model.JsonAtlasGlossaryBaseObject;
import org.openapitools.client.model.JsonAtlasGlossaryCategoryAllOf;
import org.openapitools.client.model.JsonAtlasGlossaryHeader;
import org.openapitools.client.model.JsonAtlasRelatedCategoryHeader;
import org.openapitools.client.model.JsonAtlasRelatedTermHeader;

/**
 * The glossary category.
 */
@ApiModel(description = "The glossary category.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-01-21T11:36:33.263002+01:00[Europe/Amsterdam]")
public class JsonAtlasGlossaryCategory {
  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private String guid;

  public static final String SERIALIZED_NAME_CLASSIFICATIONS = "classifications";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATIONS)
  private List<JsonAtlasClassification> classifications = null;

  public static final String SERIALIZED_NAME_LONG_DESCRIPTION = "longDescription";
  @SerializedName(SERIALIZED_NAME_LONG_DESCRIPTION)
  private String longDescription;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_QUALIFIED_NAME = "qualifiedName";
  @SerializedName(SERIALIZED_NAME_QUALIFIED_NAME)
  private String qualifiedName;

  public static final String SERIALIZED_NAME_SHORT_DESCRIPTION = "shortDescription";
  @SerializedName(SERIALIZED_NAME_SHORT_DESCRIPTION)
  private String shortDescription;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_T_S = "lastModifiedTS";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_T_S)
  private String lastModifiedTS;

  public static final String SERIALIZED_NAME_ANCHOR = "anchor";
  @SerializedName(SERIALIZED_NAME_ANCHOR)
  private JsonAtlasGlossaryHeader anchor;

  public static final String SERIALIZED_NAME_CHILDREN_CATEGORIES = "childrenCategories";
  @SerializedName(SERIALIZED_NAME_CHILDREN_CATEGORIES)
  private List<JsonAtlasRelatedCategoryHeader> childrenCategories = null;

  public static final String SERIALIZED_NAME_PARENT_CATEGORY = "parentCategory";
  @SerializedName(SERIALIZED_NAME_PARENT_CATEGORY)
  private JsonAtlasRelatedCategoryHeader parentCategory;

  public static final String SERIALIZED_NAME_TERMS = "terms";
  @SerializedName(SERIALIZED_NAME_TERMS)
  private List<JsonAtlasRelatedTermHeader> terms = null;


  public JsonAtlasGlossaryCategory guid(String guid) {
    
    this.guid = guid;
    return this;
  }

   /**
   * The GUID of the object.
   * @return guid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The GUID of the object.")

  public String getGuid() {
    return guid;
  }


  public void setGuid(String guid) {
    this.guid = guid;
  }


  public JsonAtlasGlossaryCategory classifications(List<JsonAtlasClassification> classifications) {
    
    this.classifications = classifications;
    return this;
  }

  public JsonAtlasGlossaryCategory addClassificationsItem(JsonAtlasClassification classificationsItem) {
    if (this.classifications == null) {
      this.classifications = new ArrayList<JsonAtlasClassification>();
    }
    this.classifications.add(classificationsItem);
    return this;
  }

   /**
   * An array of classifications.
   * @return classifications
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of classifications.")

  public List<JsonAtlasClassification> getClassifications() {
    return classifications;
  }


  public void setClassifications(List<JsonAtlasClassification> classifications) {
    this.classifications = classifications;
  }


  public JsonAtlasGlossaryCategory longDescription(String longDescription) {
    
    this.longDescription = longDescription;
    return this;
  }

   /**
   * The long version description.
   * @return longDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The long version description.")

  public String getLongDescription() {
    return longDescription;
  }


  public void setLongDescription(String longDescription) {
    this.longDescription = longDescription;
  }


  public JsonAtlasGlossaryCategory name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the glossary object.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the glossary object.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public JsonAtlasGlossaryCategory qualifiedName(String qualifiedName) {
    
    this.qualifiedName = qualifiedName;
    return this;
  }

   /**
   * The qualified name of the glossary object.
   * @return qualifiedName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The qualified name of the glossary object.")

  public String getQualifiedName() {
    return qualifiedName;
  }


  public void setQualifiedName(String qualifiedName) {
    this.qualifiedName = qualifiedName;
  }


  public JsonAtlasGlossaryCategory shortDescription(String shortDescription) {
    
    this.shortDescription = shortDescription;
    return this;
  }

   /**
   * The short version of description.
   * @return shortDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The short version of description.")

  public String getShortDescription() {
    return shortDescription;
  }


  public void setShortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
  }


  public JsonAtlasGlossaryCategory lastModifiedTS(String lastModifiedTS) {
    
    this.lastModifiedTS = lastModifiedTS;
    return this;
  }

   /**
   * ETag for concurrency control.
   * @return lastModifiedTS
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ETag for concurrency control.")

  public String getLastModifiedTS() {
    return lastModifiedTS;
  }


  public void setLastModifiedTS(String lastModifiedTS) {
    this.lastModifiedTS = lastModifiedTS;
  }


  public JsonAtlasGlossaryCategory anchor(JsonAtlasGlossaryHeader anchor) {
    
    this.anchor = anchor;
    return this;
  }

   /**
   * Get anchor
   * @return anchor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JsonAtlasGlossaryHeader getAnchor() {
    return anchor;
  }


  public void setAnchor(JsonAtlasGlossaryHeader anchor) {
    this.anchor = anchor;
  }


  public JsonAtlasGlossaryCategory childrenCategories(List<JsonAtlasRelatedCategoryHeader> childrenCategories) {
    
    this.childrenCategories = childrenCategories;
    return this;
  }

  public JsonAtlasGlossaryCategory addChildrenCategoriesItem(JsonAtlasRelatedCategoryHeader childrenCategoriesItem) {
    if (this.childrenCategories == null) {
      this.childrenCategories = new ArrayList<JsonAtlasRelatedCategoryHeader>();
    }
    this.childrenCategories.add(childrenCategoriesItem);
    return this;
  }

   /**
   * An array of children categories.
   * @return childrenCategories
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of children categories.")

  public List<JsonAtlasRelatedCategoryHeader> getChildrenCategories() {
    return childrenCategories;
  }


  public void setChildrenCategories(List<JsonAtlasRelatedCategoryHeader> childrenCategories) {
    this.childrenCategories = childrenCategories;
  }


  public JsonAtlasGlossaryCategory parentCategory(JsonAtlasRelatedCategoryHeader parentCategory) {
    
    this.parentCategory = parentCategory;
    return this;
  }

   /**
   * Get parentCategory
   * @return parentCategory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JsonAtlasRelatedCategoryHeader getParentCategory() {
    return parentCategory;
  }


  public void setParentCategory(JsonAtlasRelatedCategoryHeader parentCategory) {
    this.parentCategory = parentCategory;
  }


  public JsonAtlasGlossaryCategory terms(List<JsonAtlasRelatedTermHeader> terms) {
    
    this.terms = terms;
    return this;
  }

  public JsonAtlasGlossaryCategory addTermsItem(JsonAtlasRelatedTermHeader termsItem) {
    if (this.terms == null) {
      this.terms = new ArrayList<JsonAtlasRelatedTermHeader>();
    }
    this.terms.add(termsItem);
    return this;
  }

   /**
   * An array of related term headers.
   * @return terms
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of related term headers.")

  public List<JsonAtlasRelatedTermHeader> getTerms() {
    return terms;
  }


  public void setTerms(List<JsonAtlasRelatedTermHeader> terms) {
    this.terms = terms;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonAtlasGlossaryCategory jsonAtlasGlossaryCategory = (JsonAtlasGlossaryCategory) o;
    return Objects.equals(this.guid, jsonAtlasGlossaryCategory.guid) &&
        Objects.equals(this.classifications, jsonAtlasGlossaryCategory.classifications) &&
        Objects.equals(this.longDescription, jsonAtlasGlossaryCategory.longDescription) &&
        Objects.equals(this.name, jsonAtlasGlossaryCategory.name) &&
        Objects.equals(this.qualifiedName, jsonAtlasGlossaryCategory.qualifiedName) &&
        Objects.equals(this.shortDescription, jsonAtlasGlossaryCategory.shortDescription) &&
        Objects.equals(this.lastModifiedTS, jsonAtlasGlossaryCategory.lastModifiedTS) &&
        Objects.equals(this.anchor, jsonAtlasGlossaryCategory.anchor) &&
        Objects.equals(this.childrenCategories, jsonAtlasGlossaryCategory.childrenCategories) &&
        Objects.equals(this.parentCategory, jsonAtlasGlossaryCategory.parentCategory) &&
        Objects.equals(this.terms, jsonAtlasGlossaryCategory.terms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(guid, classifications, longDescription, name, qualifiedName, shortDescription, lastModifiedTS, anchor, childrenCategories, parentCategory, terms);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonAtlasGlossaryCategory {\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    classifications: ").append(toIndentedString(classifications)).append("\n");
    sb.append("    longDescription: ").append(toIndentedString(longDescription)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    qualifiedName: ").append(toIndentedString(qualifiedName)).append("\n");
    sb.append("    shortDescription: ").append(toIndentedString(shortDescription)).append("\n");
    sb.append("    lastModifiedTS: ").append(toIndentedString(lastModifiedTS)).append("\n");
    sb.append("    anchor: ").append(toIndentedString(anchor)).append("\n");
    sb.append("    childrenCategories: ").append(toIndentedString(childrenCategories)).append("\n");
    sb.append("    parentCategory: ").append(toIndentedString(parentCategory)).append("\n");
    sb.append("    terms: ").append(toIndentedString(terms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

