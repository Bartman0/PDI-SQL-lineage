/*
 * Purview Catalog Service REST API Document
 * Purview Catalog Service is a fully managed cloud service whose users can discover the data sources they need and understand the data sources they find. At the same time, Data Catalog helps organizations get more value from their existing investments. This swagger defines REST API of the Hot Tier of Data Catalog Gen 2.
 *
 * The version of the OpenAPI document: 2020-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The Relationship category determines the style of relationship around containment and lifecycle. UML terminology is used for the values. &lt;p&gt; ASSOCIATION is a relationship with no containment. &lt;br&gt; COMPOSITION and AGGREGATION are containment relationships. &lt;p&gt; The difference being in the lifecycles of the container and its children. In the COMPOSITION case, the children cannot exist without the container. For AGGREGATION, the life cycles of the container and children are totally independant.
 */
@JsonAdapter(JsonRelationshipCategory.Adapter.class)
public enum JsonRelationshipCategory {
  
  ASSOCIATION("ASSOCIATION"),
  
  AGGREGATION("AGGREGATION"),
  
  COMPOSITION("COMPOSITION");

  private String value;

  JsonRelationshipCategory(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static JsonRelationshipCategory fromValue(String value) {
    for (JsonRelationshipCategory b : JsonRelationshipCategory.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<JsonRelationshipCategory> {
    @Override
    public void write(final JsonWriter jsonWriter, final JsonRelationshipCategory enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public JsonRelationshipCategory read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return JsonRelationshipCategory.fromValue(value);
    }
  }
}

