/*
 * Purview Catalog Service REST API Document
 * Purview Catalog Service is a fully managed cloud service whose users can discover the data sources they need and understand the data sources they find. At the same time, Data Catalog helps organizations get more value from their existing investments. This swagger defines REST API of the Hot Tier of Data Catalog Gen 2.
 *
 * The version of the OpenAPI document: 2020-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.JsonAtlasAttributeDef;
import org.openapitools.client.model.JsonAtlasRelationshipDefAllOf;
import org.openapitools.client.model.JsonAtlasRelationshipEndDef;
import org.openapitools.client.model.JsonAtlasStructDef;
import org.openapitools.client.model.JsonDateFormat;
import org.openapitools.client.model.JsonPropagateTags;
import org.openapitools.client.model.JsonRelationshipCategory;
import org.openapitools.client.model.JsonTypeCategory;

/**
 * AtlasRelationshipDef is a TypeDef that defines a relationship. &lt;p&gt; As with other typeDefs the AtlasRelationshipDef has a name. Once created the RelationshipDef has a guid. The name and the guid are the 2 ways that the RelationshipDef is identified. &lt;p&gt; RelationshipDefs have 2 ends, each of which specify cardinality, an EntityDef type name and name and optionally whether the end is a container. &lt;p&gt; RelationshipDefs can have AttributeDefs - though only primitive types are allowed. &lt;br&gt; RelationshipDefs have a relationshipCategory specifying the UML type of relationship required &lt;br&gt; RelationshipDefs also have a PropogateTag - indicating which way tags could flow over the relationships. &lt;p&gt; The way EntityDefs and RelationshipDefs are intended to be used is that EntityDefs will define AttributeDefs these AttributeDefs will not specify an EntityDef type name as their types. &lt;p&gt; RelationshipDefs introduce new atributes to the entity instances. For example &lt;p&gt; EntityDef A might have attributes attr1,attr2,attr3 &lt;br&gt; EntityDef B might have attributes attr4,attr5,attr6 &lt;br&gt; RelationshipDef AtoB might define 2 ends &lt;br&gt;  &lt;pre&gt;    end1:  type A, name attr7    end2:  type B, name attr8  &lt;/pre&gt;  &lt;p&gt; When an instance of EntityDef A is created, it will have attributes attr1,attr2,attr3,attr7 &lt;br&gt; When an instance of EntityDef B is created, it will have attributes attr4,attr5,attr6,attr8 &lt;p&gt; In this way relationshipDefs can be authored separately from entityDefs and can inject relationship attributes into the entity instances
 */
@ApiModel(description = "AtlasRelationshipDef is a TypeDef that defines a relationship. <p> As with other typeDefs the AtlasRelationshipDef has a name. Once created the RelationshipDef has a guid. The name and the guid are the 2 ways that the RelationshipDef is identified. <p> RelationshipDefs have 2 ends, each of which specify cardinality, an EntityDef type name and name and optionally whether the end is a container. <p> RelationshipDefs can have AttributeDefs - though only primitive types are allowed. <br> RelationshipDefs have a relationshipCategory specifying the UML type of relationship required <br> RelationshipDefs also have a PropogateTag - indicating which way tags could flow over the relationships. <p> The way EntityDefs and RelationshipDefs are intended to be used is that EntityDefs will define AttributeDefs these AttributeDefs will not specify an EntityDef type name as their types. <p> RelationshipDefs introduce new atributes to the entity instances. For example <p> EntityDef A might have attributes attr1,attr2,attr3 <br> EntityDef B might have attributes attr4,attr5,attr6 <br> RelationshipDef AtoB might define 2 ends <br>  <pre>    end1:  type A, name attr7    end2:  type B, name attr8  </pre>  <p> When an instance of EntityDef A is created, it will have attributes attr1,attr2,attr3,attr7 <br> When an instance of EntityDef B is created, it will have attributes attr4,attr5,attr6,attr8 <p> In this way relationshipDefs can be authored separately from entityDefs and can inject relationship attributes into the entity instances")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-01-21T11:36:33.263002+01:00[Europe/Amsterdam]")
public class JsonAtlasRelationshipDef {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private JsonTypeCategory category;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private BigDecimal createTime;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_DATE_FORMATTER = "dateFormatter";
  @SerializedName(SERIALIZED_NAME_DATE_FORMATTER)
  private JsonDateFormat dateFormatter;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private String guid;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private Map<String, String> options = null;

  public static final String SERIALIZED_NAME_SERVICE_TYPE = "serviceType";
  @SerializedName(SERIALIZED_NAME_SERVICE_TYPE)
  private String serviceType;

  public static final String SERIALIZED_NAME_TYPE_VERSION = "typeVersion";
  @SerializedName(SERIALIZED_NAME_TYPE_VERSION)
  private String typeVersion;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private BigDecimal updateTime;

  public static final String SERIALIZED_NAME_UPDATED_BY = "updatedBy";
  @SerializedName(SERIALIZED_NAME_UPDATED_BY)
  private String updatedBy;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private BigDecimal version;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_T_S = "lastModifiedTS";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_T_S)
  private String lastModifiedTS;

  public static final String SERIALIZED_NAME_ATTRIBUTE_DEFS = "attributeDefs";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_DEFS)
  private List<JsonAtlasAttributeDef> attributeDefs = null;

  public static final String SERIALIZED_NAME_END_DEF1 = "endDef1";
  @SerializedName(SERIALIZED_NAME_END_DEF1)
  private JsonAtlasRelationshipEndDef endDef1;

  public static final String SERIALIZED_NAME_END_DEF2 = "endDef2";
  @SerializedName(SERIALIZED_NAME_END_DEF2)
  private JsonAtlasRelationshipEndDef endDef2;

  public static final String SERIALIZED_NAME_PROPAGATE_TAGS = "propagateTags";
  @SerializedName(SERIALIZED_NAME_PROPAGATE_TAGS)
  private JsonPropagateTags propagateTags;

  public static final String SERIALIZED_NAME_RELATIONSHIP_CATEGORY = "relationshipCategory";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP_CATEGORY)
  private JsonRelationshipCategory relationshipCategory;

  public static final String SERIALIZED_NAME_RELATIONSHIP_LABEL = "relationshipLabel";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP_LABEL)
  private String relationshipLabel;


  public JsonAtlasRelationshipDef category(JsonTypeCategory category) {
    
    this.category = category;
    return this;
  }

   /**
   * Get category
   * @return category
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JsonTypeCategory getCategory() {
    return category;
  }


  public void setCategory(JsonTypeCategory category) {
    this.category = category;
  }


  public JsonAtlasRelationshipDef createTime(BigDecimal createTime) {
    
    this.createTime = createTime;
    return this;
  }

   /**
   * The created time of the record.
   * @return createTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The created time of the record.")

  public BigDecimal getCreateTime() {
    return createTime;
  }


  public void setCreateTime(BigDecimal createTime) {
    this.createTime = createTime;
  }


  public JsonAtlasRelationshipDef createdBy(String createdBy) {
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * The user who created the record.
   * @return createdBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The user who created the record.")

  public String getCreatedBy() {
    return createdBy;
  }


  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public JsonAtlasRelationshipDef dateFormatter(JsonDateFormat dateFormatter) {
    
    this.dateFormatter = dateFormatter;
    return this;
  }

   /**
   * Get dateFormatter
   * @return dateFormatter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JsonDateFormat getDateFormatter() {
    return dateFormatter;
  }


  public void setDateFormatter(JsonDateFormat dateFormatter) {
    this.dateFormatter = dateFormatter;
  }


  public JsonAtlasRelationshipDef description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * The description of the type definition.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The description of the type definition.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public JsonAtlasRelationshipDef guid(String guid) {
    
    this.guid = guid;
    return this;
  }

   /**
   * The GUID of the type definition.
   * @return guid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The GUID of the type definition.")

  public String getGuid() {
    return guid;
  }


  public void setGuid(String guid) {
    this.guid = guid;
  }


  public JsonAtlasRelationshipDef name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the type definition.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the type definition.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public JsonAtlasRelationshipDef options(Map<String, String> options) {
    
    this.options = options;
    return this;
  }

  public JsonAtlasRelationshipDef putOptionsItem(String key, String optionsItem) {
    if (this.options == null) {
      this.options = new HashMap<String, String>();
    }
    this.options.put(key, optionsItem);
    return this;
  }

   /**
   * The options for the type definition.
   * @return options
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The options for the type definition.")

  public Map<String, String> getOptions() {
    return options;
  }


  public void setOptions(Map<String, String> options) {
    this.options = options;
  }


  public JsonAtlasRelationshipDef serviceType(String serviceType) {
    
    this.serviceType = serviceType;
    return this;
  }

   /**
   * The service type.
   * @return serviceType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The service type.")

  public String getServiceType() {
    return serviceType;
  }


  public void setServiceType(String serviceType) {
    this.serviceType = serviceType;
  }


  public JsonAtlasRelationshipDef typeVersion(String typeVersion) {
    
    this.typeVersion = typeVersion;
    return this;
  }

   /**
   * The version of the type.
   * @return typeVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The version of the type.")

  public String getTypeVersion() {
    return typeVersion;
  }


  public void setTypeVersion(String typeVersion) {
    this.typeVersion = typeVersion;
  }


  public JsonAtlasRelationshipDef updateTime(BigDecimal updateTime) {
    
    this.updateTime = updateTime;
    return this;
  }

   /**
   * The update time of the record.
   * @return updateTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The update time of the record.")

  public BigDecimal getUpdateTime() {
    return updateTime;
  }


  public void setUpdateTime(BigDecimal updateTime) {
    this.updateTime = updateTime;
  }


  public JsonAtlasRelationshipDef updatedBy(String updatedBy) {
    
    this.updatedBy = updatedBy;
    return this;
  }

   /**
   * The user who updated the record.
   * @return updatedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The user who updated the record.")

  public String getUpdatedBy() {
    return updatedBy;
  }


  public void setUpdatedBy(String updatedBy) {
    this.updatedBy = updatedBy;
  }


  public JsonAtlasRelationshipDef version(BigDecimal version) {
    
    this.version = version;
    return this;
  }

   /**
   * The version of the record.
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The version of the record.")

  public BigDecimal getVersion() {
    return version;
  }


  public void setVersion(BigDecimal version) {
    this.version = version;
  }


  public JsonAtlasRelationshipDef lastModifiedTS(String lastModifiedTS) {
    
    this.lastModifiedTS = lastModifiedTS;
    return this;
  }

   /**
   * ETag for concurrency control.
   * @return lastModifiedTS
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ETag for concurrency control.")

  public String getLastModifiedTS() {
    return lastModifiedTS;
  }


  public void setLastModifiedTS(String lastModifiedTS) {
    this.lastModifiedTS = lastModifiedTS;
  }


  public JsonAtlasRelationshipDef attributeDefs(List<JsonAtlasAttributeDef> attributeDefs) {
    
    this.attributeDefs = attributeDefs;
    return this;
  }

  public JsonAtlasRelationshipDef addAttributeDefsItem(JsonAtlasAttributeDef attributeDefsItem) {
    if (this.attributeDefs == null) {
      this.attributeDefs = new ArrayList<JsonAtlasAttributeDef>();
    }
    this.attributeDefs.add(attributeDefsItem);
    return this;
  }

   /**
   * An array of attribute definitions.
   * @return attributeDefs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of attribute definitions.")

  public List<JsonAtlasAttributeDef> getAttributeDefs() {
    return attributeDefs;
  }


  public void setAttributeDefs(List<JsonAtlasAttributeDef> attributeDefs) {
    this.attributeDefs = attributeDefs;
  }


  public JsonAtlasRelationshipDef endDef1(JsonAtlasRelationshipEndDef endDef1) {
    
    this.endDef1 = endDef1;
    return this;
  }

   /**
   * Get endDef1
   * @return endDef1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JsonAtlasRelationshipEndDef getEndDef1() {
    return endDef1;
  }


  public void setEndDef1(JsonAtlasRelationshipEndDef endDef1) {
    this.endDef1 = endDef1;
  }


  public JsonAtlasRelationshipDef endDef2(JsonAtlasRelationshipEndDef endDef2) {
    
    this.endDef2 = endDef2;
    return this;
  }

   /**
   * Get endDef2
   * @return endDef2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JsonAtlasRelationshipEndDef getEndDef2() {
    return endDef2;
  }


  public void setEndDef2(JsonAtlasRelationshipEndDef endDef2) {
    this.endDef2 = endDef2;
  }


  public JsonAtlasRelationshipDef propagateTags(JsonPropagateTags propagateTags) {
    
    this.propagateTags = propagateTags;
    return this;
  }

   /**
   * Get propagateTags
   * @return propagateTags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JsonPropagateTags getPropagateTags() {
    return propagateTags;
  }


  public void setPropagateTags(JsonPropagateTags propagateTags) {
    this.propagateTags = propagateTags;
  }


  public JsonAtlasRelationshipDef relationshipCategory(JsonRelationshipCategory relationshipCategory) {
    
    this.relationshipCategory = relationshipCategory;
    return this;
  }

   /**
   * Get relationshipCategory
   * @return relationshipCategory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JsonRelationshipCategory getRelationshipCategory() {
    return relationshipCategory;
  }


  public void setRelationshipCategory(JsonRelationshipCategory relationshipCategory) {
    this.relationshipCategory = relationshipCategory;
  }


  public JsonAtlasRelationshipDef relationshipLabel(String relationshipLabel) {
    
    this.relationshipLabel = relationshipLabel;
    return this;
  }

   /**
   * The label of the relationship.
   * @return relationshipLabel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The label of the relationship.")

  public String getRelationshipLabel() {
    return relationshipLabel;
  }


  public void setRelationshipLabel(String relationshipLabel) {
    this.relationshipLabel = relationshipLabel;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonAtlasRelationshipDef jsonAtlasRelationshipDef = (JsonAtlasRelationshipDef) o;
    return Objects.equals(this.category, jsonAtlasRelationshipDef.category) &&
        Objects.equals(this.createTime, jsonAtlasRelationshipDef.createTime) &&
        Objects.equals(this.createdBy, jsonAtlasRelationshipDef.createdBy) &&
        Objects.equals(this.dateFormatter, jsonAtlasRelationshipDef.dateFormatter) &&
        Objects.equals(this.description, jsonAtlasRelationshipDef.description) &&
        Objects.equals(this.guid, jsonAtlasRelationshipDef.guid) &&
        Objects.equals(this.name, jsonAtlasRelationshipDef.name) &&
        Objects.equals(this.options, jsonAtlasRelationshipDef.options) &&
        Objects.equals(this.serviceType, jsonAtlasRelationshipDef.serviceType) &&
        Objects.equals(this.typeVersion, jsonAtlasRelationshipDef.typeVersion) &&
        Objects.equals(this.updateTime, jsonAtlasRelationshipDef.updateTime) &&
        Objects.equals(this.updatedBy, jsonAtlasRelationshipDef.updatedBy) &&
        Objects.equals(this.version, jsonAtlasRelationshipDef.version) &&
        Objects.equals(this.lastModifiedTS, jsonAtlasRelationshipDef.lastModifiedTS) &&
        Objects.equals(this.attributeDefs, jsonAtlasRelationshipDef.attributeDefs) &&
        Objects.equals(this.endDef1, jsonAtlasRelationshipDef.endDef1) &&
        Objects.equals(this.endDef2, jsonAtlasRelationshipDef.endDef2) &&
        Objects.equals(this.propagateTags, jsonAtlasRelationshipDef.propagateTags) &&
        Objects.equals(this.relationshipCategory, jsonAtlasRelationshipDef.relationshipCategory) &&
        Objects.equals(this.relationshipLabel, jsonAtlasRelationshipDef.relationshipLabel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, createTime, createdBy, dateFormatter, description, guid, name, options, serviceType, typeVersion, updateTime, updatedBy, version, lastModifiedTS, attributeDefs, endDef1, endDef2, propagateTags, relationshipCategory, relationshipLabel);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonAtlasRelationshipDef {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    dateFormatter: ").append(toIndentedString(dateFormatter)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    serviceType: ").append(toIndentedString(serviceType)).append("\n");
    sb.append("    typeVersion: ").append(toIndentedString(typeVersion)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    lastModifiedTS: ").append(toIndentedString(lastModifiedTS)).append("\n");
    sb.append("    attributeDefs: ").append(toIndentedString(attributeDefs)).append("\n");
    sb.append("    endDef1: ").append(toIndentedString(endDef1)).append("\n");
    sb.append("    endDef2: ").append(toIndentedString(endDef2)).append("\n");
    sb.append("    propagateTags: ").append(toIndentedString(propagateTags)).append("\n");
    sb.append("    relationshipCategory: ").append(toIndentedString(relationshipCategory)).append("\n");
    sb.append("    relationshipLabel: ").append(toIndentedString(relationshipLabel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

