/*
 * Purview Catalog Service REST API Document
 * Purview Catalog Service is a fully managed cloud service whose users can discover the data sources they need and understand the data sources they find. At the same time, Data Catalog helps organizations get more value from their existing investments. This swagger defines REST API of the Hot Tier of Data Catalog Gen 2.
 *
 * The version of the OpenAPI document: 2020-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.JsonAtlasClassification;
import org.openapitools.client.model.JsonAtlasClassifications;
import org.openapitools.client.model.JsonAtlasEntitiesWithExtInfo;
import org.openapitools.client.model.JsonAtlasEntityHeader;
import org.openapitools.client.model.JsonAtlasEntityHeaders;
import org.openapitools.client.model.JsonAtlasEntityWithExtInfo;
import org.openapitools.client.model.JsonClassificationAssociateRequest;
import org.openapitools.client.model.JsonEntityMutationResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EntityRestApi {
    private ApiClient localVarApiClient;

    public EntityRestApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EntityRestApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for entityRESTAddClassification
     * @param request The request to associate a classification to multiple entities. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTAddClassificationCall(JsonClassificationAssociateRequest request, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/atlas/v2/entity/bulk/classification";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entityRESTAddClassificationValidateBeforeCall(JsonClassificationAssociateRequest request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling entityRESTAddClassification(Async)");
        }
        

        okhttp3.Call localVarCall = entityRESTAddClassificationCall(request, _callback);
        return localVarCall;

    }

    /**
     * 
     * Associates a classification to multiple entities in bulk.
     * @param request The request to associate a classification to multiple entities. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public void entityRESTAddClassification(JsonClassificationAssociateRequest request) throws ApiException {
        entityRESTAddClassificationWithHttpInfo(request);
    }

    /**
     * 
     * Associates a classification to multiple entities in bulk.
     * @param request The request to associate a classification to multiple entities. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> entityRESTAddClassificationWithHttpInfo(JsonClassificationAssociateRequest request) throws ApiException {
        okhttp3.Call localVarCall = entityRESTAddClassificationValidateBeforeCall(request, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Associates a classification to multiple entities in bulk.
     * @param request The request to associate a classification to multiple entities. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTAddClassificationAsync(JsonClassificationAssociateRequest request, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = entityRESTAddClassificationValidateBeforeCall(request, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for entityRESTAddClassifications
     * @param guid The globally unique identifier of the entity. (required)
     * @param classifications An array of classifications to be added. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTAddClassificationsCall(String guid, List<JsonAtlasClassification> classifications, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = classifications;

        // create path and map variables
        String localVarPath = "/atlas/v2/entity/guid/{guid}/classifications"
            .replaceAll("\\{" + "guid" + "\\}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entityRESTAddClassificationsValidateBeforeCall(String guid, List<JsonAtlasClassification> classifications, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling entityRESTAddClassifications(Async)");
        }
        
        // verify the required parameter 'classifications' is set
        if (classifications == null) {
            throw new ApiException("Missing the required parameter 'classifications' when calling entityRESTAddClassifications(Async)");
        }
        

        okhttp3.Call localVarCall = entityRESTAddClassificationsCall(guid, classifications, _callback);
        return localVarCall;

    }

    /**
     * 
     * Adds classifications to an existing entity represented by a GUID.
     * @param guid The globally unique identifier of the entity. (required)
     * @param classifications An array of classifications to be added. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public void entityRESTAddClassifications(String guid, List<JsonAtlasClassification> classifications) throws ApiException {
        entityRESTAddClassificationsWithHttpInfo(guid, classifications);
    }

    /**
     * 
     * Adds classifications to an existing entity represented by a GUID.
     * @param guid The globally unique identifier of the entity. (required)
     * @param classifications An array of classifications to be added. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> entityRESTAddClassificationsWithHttpInfo(String guid, List<JsonAtlasClassification> classifications) throws ApiException {
        okhttp3.Call localVarCall = entityRESTAddClassificationsValidateBeforeCall(guid, classifications, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Adds classifications to an existing entity represented by a GUID.
     * @param guid The globally unique identifier of the entity. (required)
     * @param classifications An array of classifications to be added. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTAddClassificationsAsync(String guid, List<JsonAtlasClassification> classifications, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = entityRESTAddClassificationsValidateBeforeCall(guid, classifications, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for entityRESTAddClassificationsByUniqueAttribute
     * @param typeName The name of the type. (required)
     * @param atlasClassificationArray An array of classification to be added. (required)
     * @param attrColonQualifiedName The qualified name of the entity. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTAddClassificationsByUniqueAttributeCall(String typeName, List<JsonAtlasClassification> atlasClassificationArray, String attrColonQualifiedName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = atlasClassificationArray;

        // create path and map variables
        String localVarPath = "/atlas/v2/entity/uniqueAttribute/type/{typeName}/classifications"
            .replaceAll("\\{" + "typeName" + "\\}", localVarApiClient.escapeString(typeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attrColonQualifiedName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attr:qualifiedName", attrColonQualifiedName));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entityRESTAddClassificationsByUniqueAttributeValidateBeforeCall(String typeName, List<JsonAtlasClassification> atlasClassificationArray, String attrColonQualifiedName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'typeName' is set
        if (typeName == null) {
            throw new ApiException("Missing the required parameter 'typeName' when calling entityRESTAddClassificationsByUniqueAttribute(Async)");
        }
        
        // verify the required parameter 'atlasClassificationArray' is set
        if (atlasClassificationArray == null) {
            throw new ApiException("Missing the required parameter 'atlasClassificationArray' when calling entityRESTAddClassificationsByUniqueAttribute(Async)");
        }
        

        okhttp3.Call localVarCall = entityRESTAddClassificationsByUniqueAttributeCall(typeName, atlasClassificationArray, attrColonQualifiedName, _callback);
        return localVarCall;

    }

    /**
     * 
     * Adds classification to the entity identified by its type and unique attributes.
     * @param typeName The name of the type. (required)
     * @param atlasClassificationArray An array of classification to be added. (required)
     * @param attrColonQualifiedName The qualified name of the entity. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public void entityRESTAddClassificationsByUniqueAttribute(String typeName, List<JsonAtlasClassification> atlasClassificationArray, String attrColonQualifiedName) throws ApiException {
        entityRESTAddClassificationsByUniqueAttributeWithHttpInfo(typeName, atlasClassificationArray, attrColonQualifiedName);
    }

    /**
     * 
     * Adds classification to the entity identified by its type and unique attributes.
     * @param typeName The name of the type. (required)
     * @param atlasClassificationArray An array of classification to be added. (required)
     * @param attrColonQualifiedName The qualified name of the entity. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> entityRESTAddClassificationsByUniqueAttributeWithHttpInfo(String typeName, List<JsonAtlasClassification> atlasClassificationArray, String attrColonQualifiedName) throws ApiException {
        okhttp3.Call localVarCall = entityRESTAddClassificationsByUniqueAttributeValidateBeforeCall(typeName, atlasClassificationArray, attrColonQualifiedName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Adds classification to the entity identified by its type and unique attributes.
     * @param typeName The name of the type. (required)
     * @param atlasClassificationArray An array of classification to be added. (required)
     * @param attrColonQualifiedName The qualified name of the entity. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTAddClassificationsByUniqueAttributeAsync(String typeName, List<JsonAtlasClassification> atlasClassificationArray, String attrColonQualifiedName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = entityRESTAddClassificationsByUniqueAttributeValidateBeforeCall(typeName, atlasClassificationArray, attrColonQualifiedName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for entityRESTBulkDelete
     * @param guid An array of GUIDs of entities to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted with EntityMutationResponse. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTBulkDeleteCall(List<String> guid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/entity/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (guid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "guid", guid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entityRESTBulkDeleteValidateBeforeCall(List<String> guid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling entityRESTBulkDelete(Async)");
        }
        

        okhttp3.Call localVarCall = entityRESTBulkDeleteCall(guid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Deletes a list of entities in bulk identified by their GUIDs or unique attributes.
     * @param guid An array of GUIDs of entities to delete. (required)
     * @return JsonEntityMutationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted with EntityMutationResponse. </td><td>  -  </td></tr>
     </table>
     */
    public JsonEntityMutationResponse entityRESTBulkDelete(List<String> guid) throws ApiException {
        ApiResponse<JsonEntityMutationResponse> localVarResp = entityRESTBulkDeleteWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a list of entities in bulk identified by their GUIDs or unique attributes.
     * @param guid An array of GUIDs of entities to delete. (required)
     * @return ApiResponse&lt;JsonEntityMutationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted with EntityMutationResponse. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonEntityMutationResponse> entityRESTBulkDeleteWithHttpInfo(List<String> guid) throws ApiException {
        okhttp3.Call localVarCall = entityRESTBulkDeleteValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<JsonEntityMutationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a list of entities in bulk identified by their GUIDs or unique attributes.
     * @param guid An array of GUIDs of entities to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted with EntityMutationResponse. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTBulkDeleteAsync(List<String> guid, final ApiCallback<JsonEntityMutationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = entityRESTBulkDeleteValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<JsonEntityMutationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for entityRESTCreateOrUpdate
     * @param entity Atlas entity with extended information. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created with EntityMutationResponse. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTCreateOrUpdateCall(JsonAtlasEntityWithExtInfo entity, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = entity;

        // create path and map variables
        String localVarPath = "/atlas/v2/entity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entityRESTCreateOrUpdateValidateBeforeCall(JsonAtlasEntityWithExtInfo entity, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling entityRESTCreateOrUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = entityRESTCreateOrUpdateCall(entity, _callback);
        return localVarCall;

    }

    /**
     * 
     * Creates or updates an entity in Atlas. Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName. Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
     * @param entity Atlas entity with extended information. (required)
     * @return JsonEntityMutationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created with EntityMutationResponse. </td><td>  -  </td></tr>
     </table>
     */
    public JsonEntityMutationResponse entityRESTCreateOrUpdate(JsonAtlasEntityWithExtInfo entity) throws ApiException {
        ApiResponse<JsonEntityMutationResponse> localVarResp = entityRESTCreateOrUpdateWithHttpInfo(entity);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates an entity in Atlas. Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName. Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
     * @param entity Atlas entity with extended information. (required)
     * @return ApiResponse&lt;JsonEntityMutationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created with EntityMutationResponse. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonEntityMutationResponse> entityRESTCreateOrUpdateWithHttpInfo(JsonAtlasEntityWithExtInfo entity) throws ApiException {
        okhttp3.Call localVarCall = entityRESTCreateOrUpdateValidateBeforeCall(entity, null);
        Type localVarReturnType = new TypeToken<JsonEntityMutationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates an entity in Atlas. Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName. Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
     * @param entity Atlas entity with extended information. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created with EntityMutationResponse. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTCreateOrUpdateAsync(JsonAtlasEntityWithExtInfo entity, final ApiCallback<JsonEntityMutationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = entityRESTCreateOrUpdateValidateBeforeCall(entity, _callback);
        Type localVarReturnType = new TypeToken<JsonEntityMutationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for entityRESTCreateOrUpdateBulk
     * @param entities An array of entities to create or update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTCreateOrUpdateBulkCall(JsonAtlasEntitiesWithExtInfo entities, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = entities;

        // create path and map variables
        String localVarPath = "/atlas/v2/entity/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entityRESTCreateOrUpdateBulkValidateBeforeCall(JsonAtlasEntitiesWithExtInfo entities, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'entities' is set
        if (entities == null) {
            throw new ApiException("Missing the required parameter 'entities' when calling entityRESTCreateOrUpdateBulk(Async)");
        }
        

        okhttp3.Call localVarCall = entityRESTCreateOrUpdateBulkCall(entities, _callback);
        return localVarCall;

    }

    /**
     * 
     * Creates or updates entities in Atlas in bulk. Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName. Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
     * @param entities An array of entities to create or update. (required)
     * @return JsonEntityMutationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok. </td><td>  -  </td></tr>
     </table>
     */
    public JsonEntityMutationResponse entityRESTCreateOrUpdateBulk(JsonAtlasEntitiesWithExtInfo entities) throws ApiException {
        ApiResponse<JsonEntityMutationResponse> localVarResp = entityRESTCreateOrUpdateBulkWithHttpInfo(entities);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates entities in Atlas in bulk. Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName. Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
     * @param entities An array of entities to create or update. (required)
     * @return ApiResponse&lt;JsonEntityMutationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonEntityMutationResponse> entityRESTCreateOrUpdateBulkWithHttpInfo(JsonAtlasEntitiesWithExtInfo entities) throws ApiException {
        okhttp3.Call localVarCall = entityRESTCreateOrUpdateBulkValidateBeforeCall(entities, null);
        Type localVarReturnType = new TypeToken<JsonEntityMutationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates entities in Atlas in bulk. Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName. Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
     * @param entities An array of entities to create or update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTCreateOrUpdateBulkAsync(JsonAtlasEntitiesWithExtInfo entities, final ApiCallback<JsonEntityMutationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = entityRESTCreateOrUpdateBulkValidateBeforeCall(entities, _callback);
        Type localVarReturnType = new TypeToken<JsonEntityMutationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for entityRESTDeleteByGuid
     * @param guid The globally unique identifier of the entity. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted with EntityMutationResponse. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTDeleteByGuidCall(String guid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/entity/guid/{guid}"
            .replaceAll("\\{" + "guid" + "\\}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entityRESTDeleteByGuidValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling entityRESTDeleteByGuid(Async)");
        }
        

        okhttp3.Call localVarCall = entityRESTDeleteByGuidCall(guid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Deletes an entity identified by its GUID.
     * @param guid The globally unique identifier of the entity. (required)
     * @return JsonEntityMutationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted with EntityMutationResponse. </td><td>  -  </td></tr>
     </table>
     */
    public JsonEntityMutationResponse entityRESTDeleteByGuid(String guid) throws ApiException {
        ApiResponse<JsonEntityMutationResponse> localVarResp = entityRESTDeleteByGuidWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes an entity identified by its GUID.
     * @param guid The globally unique identifier of the entity. (required)
     * @return ApiResponse&lt;JsonEntityMutationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted with EntityMutationResponse. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonEntityMutationResponse> entityRESTDeleteByGuidWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = entityRESTDeleteByGuidValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<JsonEntityMutationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an entity identified by its GUID.
     * @param guid The globally unique identifier of the entity. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted with EntityMutationResponse. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTDeleteByGuidAsync(String guid, final ApiCallback<JsonEntityMutationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = entityRESTDeleteByGuidValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<JsonEntityMutationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for entityRESTDeleteByUniqueAttribute
     * @param typeName The name of the type. (required)
     * @param attrColonQualifiedName The qualified name of the entity. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted with EntityMutationResponse. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTDeleteByUniqueAttributeCall(String typeName, String attrColonQualifiedName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/entity/uniqueAttribute/type/{typeName}"
            .replaceAll("\\{" + "typeName" + "\\}", localVarApiClient.escapeString(typeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attrColonQualifiedName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attr:qualifiedName", attrColonQualifiedName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entityRESTDeleteByUniqueAttributeValidateBeforeCall(String typeName, String attrColonQualifiedName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'typeName' is set
        if (typeName == null) {
            throw new ApiException("Missing the required parameter 'typeName' when calling entityRESTDeleteByUniqueAttribute(Async)");
        }
        

        okhttp3.Call localVarCall = entityRESTDeleteByUniqueAttributeCall(typeName, attrColonQualifiedName, _callback);
        return localVarCall;

    }

    /**
     * 
     * Deletes an entity identified by its type and unique attributes. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format: attr:&lt;attrName&gt;&#x3D;&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look something like this: DELETE /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute&#x3D;someValue.
     * @param typeName The name of the type. (required)
     * @param attrColonQualifiedName The qualified name of the entity. (optional)
     * @return JsonEntityMutationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted with EntityMutationResponse. </td><td>  -  </td></tr>
     </table>
     */
    public JsonEntityMutationResponse entityRESTDeleteByUniqueAttribute(String typeName, String attrColonQualifiedName) throws ApiException {
        ApiResponse<JsonEntityMutationResponse> localVarResp = entityRESTDeleteByUniqueAttributeWithHttpInfo(typeName, attrColonQualifiedName);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes an entity identified by its type and unique attributes. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format: attr:&lt;attrName&gt;&#x3D;&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look something like this: DELETE /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute&#x3D;someValue.
     * @param typeName The name of the type. (required)
     * @param attrColonQualifiedName The qualified name of the entity. (optional)
     * @return ApiResponse&lt;JsonEntityMutationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted with EntityMutationResponse. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonEntityMutationResponse> entityRESTDeleteByUniqueAttributeWithHttpInfo(String typeName, String attrColonQualifiedName) throws ApiException {
        okhttp3.Call localVarCall = entityRESTDeleteByUniqueAttributeValidateBeforeCall(typeName, attrColonQualifiedName, null);
        Type localVarReturnType = new TypeToken<JsonEntityMutationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an entity identified by its type and unique attributes. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format: attr:&lt;attrName&gt;&#x3D;&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look something like this: DELETE /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute&#x3D;someValue.
     * @param typeName The name of the type. (required)
     * @param attrColonQualifiedName The qualified name of the entity. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted with EntityMutationResponse. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTDeleteByUniqueAttributeAsync(String typeName, String attrColonQualifiedName, final ApiCallback<JsonEntityMutationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = entityRESTDeleteByUniqueAttributeValidateBeforeCall(typeName, attrColonQualifiedName, _callback);
        Type localVarReturnType = new TypeToken<JsonEntityMutationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for entityRESTDeleteClassification
     * @param guid The globally unique identifier of the entity. (required)
     * @param classificationName The name of the classification. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTDeleteClassificationCall(String guid, String classificationName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/entity/guid/{guid}/classification/{classificationName}"
            .replaceAll("\\{" + "guid" + "\\}", localVarApiClient.escapeString(guid.toString()))
            .replaceAll("\\{" + "classificationName" + "\\}", localVarApiClient.escapeString(classificationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entityRESTDeleteClassificationValidateBeforeCall(String guid, String classificationName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling entityRESTDeleteClassification(Async)");
        }
        
        // verify the required parameter 'classificationName' is set
        if (classificationName == null) {
            throw new ApiException("Missing the required parameter 'classificationName' when calling entityRESTDeleteClassification(Async)");
        }
        

        okhttp3.Call localVarCall = entityRESTDeleteClassificationCall(guid, classificationName, _callback);
        return localVarCall;

    }

    /**
     * 
     * Deletes a given classification from an existing entity represented by a GUID.
     * @param guid The globally unique identifier of the entity. (required)
     * @param classificationName The name of the classification. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public void entityRESTDeleteClassification(String guid, String classificationName) throws ApiException {
        entityRESTDeleteClassificationWithHttpInfo(guid, classificationName);
    }

    /**
     * 
     * Deletes a given classification from an existing entity represented by a GUID.
     * @param guid The globally unique identifier of the entity. (required)
     * @param classificationName The name of the classification. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> entityRESTDeleteClassificationWithHttpInfo(String guid, String classificationName) throws ApiException {
        okhttp3.Call localVarCall = entityRESTDeleteClassificationValidateBeforeCall(guid, classificationName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a given classification from an existing entity represented by a GUID.
     * @param guid The globally unique identifier of the entity. (required)
     * @param classificationName The name of the classification. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTDeleteClassificationAsync(String guid, String classificationName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = entityRESTDeleteClassificationValidateBeforeCall(guid, classificationName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for entityRESTDeleteClassificationByUniqueAttribute
     * @param typeName The name of the type. (required)
     * @param classificationName The name of the classification. (required)
     * @param attrColonQualifiedName The qualified name of the entity. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTDeleteClassificationByUniqueAttributeCall(String typeName, String classificationName, String attrColonQualifiedName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/entity/uniqueAttribute/type/{typeName}/classification/{classificationName}"
            .replaceAll("\\{" + "typeName" + "\\}", localVarApiClient.escapeString(typeName.toString()))
            .replaceAll("\\{" + "classificationName" + "\\}", localVarApiClient.escapeString(classificationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attrColonQualifiedName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attr:qualifiedName", attrColonQualifiedName));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entityRESTDeleteClassificationByUniqueAttributeValidateBeforeCall(String typeName, String classificationName, String attrColonQualifiedName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'typeName' is set
        if (typeName == null) {
            throw new ApiException("Missing the required parameter 'typeName' when calling entityRESTDeleteClassificationByUniqueAttribute(Async)");
        }
        
        // verify the required parameter 'classificationName' is set
        if (classificationName == null) {
            throw new ApiException("Missing the required parameter 'classificationName' when calling entityRESTDeleteClassificationByUniqueAttribute(Async)");
        }
        

        okhttp3.Call localVarCall = entityRESTDeleteClassificationByUniqueAttributeCall(typeName, classificationName, attrColonQualifiedName, _callback);
        return localVarCall;

    }

    /**
     * 
     * Deletes a given classification from an entity identified by its type and unique attributes.
     * @param typeName The name of the type. (required)
     * @param classificationName The name of the classification. (required)
     * @param attrColonQualifiedName The qualified name of the entity. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
     </table>
     */
    public void entityRESTDeleteClassificationByUniqueAttribute(String typeName, String classificationName, String attrColonQualifiedName) throws ApiException {
        entityRESTDeleteClassificationByUniqueAttributeWithHttpInfo(typeName, classificationName, attrColonQualifiedName);
    }

    /**
     * 
     * Deletes a given classification from an entity identified by its type and unique attributes.
     * @param typeName The name of the type. (required)
     * @param classificationName The name of the classification. (required)
     * @param attrColonQualifiedName The qualified name of the entity. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> entityRESTDeleteClassificationByUniqueAttributeWithHttpInfo(String typeName, String classificationName, String attrColonQualifiedName) throws ApiException {
        okhttp3.Call localVarCall = entityRESTDeleteClassificationByUniqueAttributeValidateBeforeCall(typeName, classificationName, attrColonQualifiedName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a given classification from an entity identified by its type and unique attributes.
     * @param typeName The name of the type. (required)
     * @param classificationName The name of the classification. (required)
     * @param attrColonQualifiedName The qualified name of the entity. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTDeleteClassificationByUniqueAttributeAsync(String typeName, String classificationName, String attrColonQualifiedName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = entityRESTDeleteClassificationByUniqueAttributeValidateBeforeCall(typeName, classificationName, attrColonQualifiedName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for entityRESTGetByGuids
     * @param guid An array of GUIDs of entities to create. (required)
     * @param minExtInfo Whether to return minimal information for referred entities. (optional, default to false)
     * @param ignoreRelationships Whether to ignore relationship attributes. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No entity is found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTGetByGuidsCall(List<String> guid, Boolean minExtInfo, Boolean ignoreRelationships, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/entity/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (guid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "guid", guid));
        }

        if (minExtInfo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minExtInfo", minExtInfo));
        }

        if (ignoreRelationships != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignoreRelationships", ignoreRelationships));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entityRESTGetByGuidsValidateBeforeCall(List<String> guid, Boolean minExtInfo, Boolean ignoreRelationships, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling entityRESTGetByGuids(Async)");
        }
        

        okhttp3.Call localVarCall = entityRESTGetByGuidsCall(guid, minExtInfo, ignoreRelationships, _callback);
        return localVarCall;

    }

    /**
     * 
     * Lists entities in bulk identified by its GUIDs.
     * @param guid An array of GUIDs of entities to create. (required)
     * @param minExtInfo Whether to return minimal information for referred entities. (optional, default to false)
     * @param ignoreRelationships Whether to ignore relationship attributes. (optional, default to false)
     * @return JsonAtlasEntitiesWithExtInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No entity is found. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasEntitiesWithExtInfo entityRESTGetByGuids(List<String> guid, Boolean minExtInfo, Boolean ignoreRelationships) throws ApiException {
        ApiResponse<JsonAtlasEntitiesWithExtInfo> localVarResp = entityRESTGetByGuidsWithHttpInfo(guid, minExtInfo, ignoreRelationships);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists entities in bulk identified by its GUIDs.
     * @param guid An array of GUIDs of entities to create. (required)
     * @param minExtInfo Whether to return minimal information for referred entities. (optional, default to false)
     * @param ignoreRelationships Whether to ignore relationship attributes. (optional, default to false)
     * @return ApiResponse&lt;JsonAtlasEntitiesWithExtInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No entity is found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasEntitiesWithExtInfo> entityRESTGetByGuidsWithHttpInfo(List<String> guid, Boolean minExtInfo, Boolean ignoreRelationships) throws ApiException {
        okhttp3.Call localVarCall = entityRESTGetByGuidsValidateBeforeCall(guid, minExtInfo, ignoreRelationships, null);
        Type localVarReturnType = new TypeToken<JsonAtlasEntitiesWithExtInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists entities in bulk identified by its GUIDs.
     * @param guid An array of GUIDs of entities to create. (required)
     * @param minExtInfo Whether to return minimal information for referred entities. (optional, default to false)
     * @param ignoreRelationships Whether to ignore relationship attributes. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No entity is found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTGetByGuidsAsync(List<String> guid, Boolean minExtInfo, Boolean ignoreRelationships, final ApiCallback<JsonAtlasEntitiesWithExtInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = entityRESTGetByGuidsValidateBeforeCall(guid, minExtInfo, ignoreRelationships, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasEntitiesWithExtInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for entityRESTGetById
     * @param guid The globally unique identifier of the entity. (required)
     * @param minExtInfo Whether to return minimal information for referred entities. (optional, default to false)
     * @param ignoreRelationships Whether to ignore relationship attributes. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTGetByIdCall(String guid, Boolean minExtInfo, Boolean ignoreRelationships, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/entity/guid/{guid}"
            .replaceAll("\\{" + "guid" + "\\}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (minExtInfo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minExtInfo", minExtInfo));
        }

        if (ignoreRelationships != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignoreRelationships", ignoreRelationships));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entityRESTGetByIdValidateBeforeCall(String guid, Boolean minExtInfo, Boolean ignoreRelationships, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling entityRESTGetById(Async)");
        }
        

        okhttp3.Call localVarCall = entityRESTGetByIdCall(guid, minExtInfo, ignoreRelationships, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets complete definition of an entity given its GUID.
     * @param guid The globally unique identifier of the entity. (required)
     * @param minExtInfo Whether to return minimal information for referred entities. (optional, default to false)
     * @param ignoreRelationships Whether to ignore relationship attributes. (optional, default to false)
     * @return JsonAtlasEntityWithExtInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasEntityWithExtInfo entityRESTGetById(String guid, Boolean minExtInfo, Boolean ignoreRelationships) throws ApiException {
        ApiResponse<JsonAtlasEntityWithExtInfo> localVarResp = entityRESTGetByIdWithHttpInfo(guid, minExtInfo, ignoreRelationships);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets complete definition of an entity given its GUID.
     * @param guid The globally unique identifier of the entity. (required)
     * @param minExtInfo Whether to return minimal information for referred entities. (optional, default to false)
     * @param ignoreRelationships Whether to ignore relationship attributes. (optional, default to false)
     * @return ApiResponse&lt;JsonAtlasEntityWithExtInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasEntityWithExtInfo> entityRESTGetByIdWithHttpInfo(String guid, Boolean minExtInfo, Boolean ignoreRelationships) throws ApiException {
        okhttp3.Call localVarCall = entityRESTGetByIdValidateBeforeCall(guid, minExtInfo, ignoreRelationships, null);
        Type localVarReturnType = new TypeToken<JsonAtlasEntityWithExtInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets complete definition of an entity given its GUID.
     * @param guid The globally unique identifier of the entity. (required)
     * @param minExtInfo Whether to return minimal information for referred entities. (optional, default to false)
     * @param ignoreRelationships Whether to ignore relationship attributes. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTGetByIdAsync(String guid, Boolean minExtInfo, Boolean ignoreRelationships, final ApiCallback<JsonAtlasEntityWithExtInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = entityRESTGetByIdValidateBeforeCall(guid, minExtInfo, ignoreRelationships, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasEntityWithExtInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for entityRESTGetByUniqueAttributes
     * @param typeName The name of the type. (required)
     * @param minExtInfo Whether to return minimal information for referred entities. (optional, default to false)
     * @param ignoreRelationships Whether to ignore relationship attributes. (optional, default to false)
     * @param attrColonQualifiedName The qualified name of the entity. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AtlasEntityWithExtInfo. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTGetByUniqueAttributesCall(String typeName, Boolean minExtInfo, Boolean ignoreRelationships, String attrColonQualifiedName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/entity/uniqueAttribute/type/{typeName}"
            .replaceAll("\\{" + "typeName" + "\\}", localVarApiClient.escapeString(typeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (minExtInfo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minExtInfo", minExtInfo));
        }

        if (ignoreRelationships != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignoreRelationships", ignoreRelationships));
        }

        if (attrColonQualifiedName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attr:qualifiedName", attrColonQualifiedName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entityRESTGetByUniqueAttributesValidateBeforeCall(String typeName, Boolean minExtInfo, Boolean ignoreRelationships, String attrColonQualifiedName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'typeName' is set
        if (typeName == null) {
            throw new ApiException("Missing the required parameter 'typeName' when calling entityRESTGetByUniqueAttributes(Async)");
        }
        

        okhttp3.Call localVarCall = entityRESTGetByUniqueAttributesCall(typeName, minExtInfo, ignoreRelationships, attrColonQualifiedName, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets complete definition of an entity given its type and unique attribute. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format: attr:&lt;attrName&gt;&#x3D;&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look something like this: GET /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute&#x3D;someValue.
     * @param typeName The name of the type. (required)
     * @param minExtInfo Whether to return minimal information for referred entities. (optional, default to false)
     * @param ignoreRelationships Whether to ignore relationship attributes. (optional, default to false)
     * @param attrColonQualifiedName The qualified name of the entity. (optional)
     * @return JsonAtlasEntityWithExtInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AtlasEntityWithExtInfo. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasEntityWithExtInfo entityRESTGetByUniqueAttributes(String typeName, Boolean minExtInfo, Boolean ignoreRelationships, String attrColonQualifiedName) throws ApiException {
        ApiResponse<JsonAtlasEntityWithExtInfo> localVarResp = entityRESTGetByUniqueAttributesWithHttpInfo(typeName, minExtInfo, ignoreRelationships, attrColonQualifiedName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets complete definition of an entity given its type and unique attribute. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format: attr:&lt;attrName&gt;&#x3D;&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look something like this: GET /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute&#x3D;someValue.
     * @param typeName The name of the type. (required)
     * @param minExtInfo Whether to return minimal information for referred entities. (optional, default to false)
     * @param ignoreRelationships Whether to ignore relationship attributes. (optional, default to false)
     * @param attrColonQualifiedName The qualified name of the entity. (optional)
     * @return ApiResponse&lt;JsonAtlasEntityWithExtInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AtlasEntityWithExtInfo. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasEntityWithExtInfo> entityRESTGetByUniqueAttributesWithHttpInfo(String typeName, Boolean minExtInfo, Boolean ignoreRelationships, String attrColonQualifiedName) throws ApiException {
        okhttp3.Call localVarCall = entityRESTGetByUniqueAttributesValidateBeforeCall(typeName, minExtInfo, ignoreRelationships, attrColonQualifiedName, null);
        Type localVarReturnType = new TypeToken<JsonAtlasEntityWithExtInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets complete definition of an entity given its type and unique attribute. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format: attr:&lt;attrName&gt;&#x3D;&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look something like this: GET /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute&#x3D;someValue.
     * @param typeName The name of the type. (required)
     * @param minExtInfo Whether to return minimal information for referred entities. (optional, default to false)
     * @param ignoreRelationships Whether to ignore relationship attributes. (optional, default to false)
     * @param attrColonQualifiedName The qualified name of the entity. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AtlasEntityWithExtInfo. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTGetByUniqueAttributesAsync(String typeName, Boolean minExtInfo, Boolean ignoreRelationships, String attrColonQualifiedName, final ApiCallback<JsonAtlasEntityWithExtInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = entityRESTGetByUniqueAttributesValidateBeforeCall(typeName, minExtInfo, ignoreRelationships, attrColonQualifiedName, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasEntityWithExtInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for entityRESTGetClassification
     * @param guid The globally unique identifier of the entity. (required)
     * @param classificationName The name of the classification. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The classification for the given entity GUID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTGetClassificationCall(String guid, String classificationName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/entity/guid/{guid}/classification/{classificationName}"
            .replaceAll("\\{" + "guid" + "\\}", localVarApiClient.escapeString(guid.toString()))
            .replaceAll("\\{" + "classificationName" + "\\}", localVarApiClient.escapeString(classificationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entityRESTGetClassificationValidateBeforeCall(String guid, String classificationName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling entityRESTGetClassification(Async)");
        }
        
        // verify the required parameter 'classificationName' is set
        if (classificationName == null) {
            throw new ApiException("Missing the required parameter 'classificationName' when calling entityRESTGetClassification(Async)");
        }
        

        okhttp3.Call localVarCall = entityRESTGetClassificationCall(guid, classificationName, _callback);
        return localVarCall;

    }

    /**
     * 
     * Lists classifications for a given entity represented by a GUID.
     * @param guid The globally unique identifier of the entity. (required)
     * @param classificationName The name of the classification. (required)
     * @return JsonAtlasClassification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The classification for the given entity GUID. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasClassification entityRESTGetClassification(String guid, String classificationName) throws ApiException {
        ApiResponse<JsonAtlasClassification> localVarResp = entityRESTGetClassificationWithHttpInfo(guid, classificationName);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists classifications for a given entity represented by a GUID.
     * @param guid The globally unique identifier of the entity. (required)
     * @param classificationName The name of the classification. (required)
     * @return ApiResponse&lt;JsonAtlasClassification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The classification for the given entity GUID. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasClassification> entityRESTGetClassificationWithHttpInfo(String guid, String classificationName) throws ApiException {
        okhttp3.Call localVarCall = entityRESTGetClassificationValidateBeforeCall(guid, classificationName, null);
        Type localVarReturnType = new TypeToken<JsonAtlasClassification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists classifications for a given entity represented by a GUID.
     * @param guid The globally unique identifier of the entity. (required)
     * @param classificationName The name of the classification. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The classification for the given entity GUID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTGetClassificationAsync(String guid, String classificationName, final ApiCallback<JsonAtlasClassification> _callback) throws ApiException {

        okhttp3.Call localVarCall = entityRESTGetClassificationValidateBeforeCall(guid, classificationName, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasClassification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for entityRESTGetClassifications
     * @param guid The globally unique identifier of the entity. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of classifications for the given entity GUID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTGetClassificationsCall(String guid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/entity/guid/{guid}/classifications"
            .replaceAll("\\{" + "guid" + "\\}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entityRESTGetClassificationsValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling entityRESTGetClassifications(Async)");
        }
        

        okhttp3.Call localVarCall = entityRESTGetClassificationsCall(guid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Lists classifications for a given entity represented by a GUID.
     * @param guid The globally unique identifier of the entity. (required)
     * @return JsonAtlasClassifications
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of classifications for the given entity GUID. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasClassifications entityRESTGetClassifications(String guid) throws ApiException {
        ApiResponse<JsonAtlasClassifications> localVarResp = entityRESTGetClassificationsWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists classifications for a given entity represented by a GUID.
     * @param guid The globally unique identifier of the entity. (required)
     * @return ApiResponse&lt;JsonAtlasClassifications&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of classifications for the given entity GUID. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasClassifications> entityRESTGetClassificationsWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = entityRESTGetClassificationsValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<JsonAtlasClassifications>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists classifications for a given entity represented by a GUID.
     * @param guid The globally unique identifier of the entity. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of classifications for the given entity GUID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTGetClassificationsAsync(String guid, final ApiCallback<JsonAtlasClassifications> _callback) throws ApiException {

        okhttp3.Call localVarCall = entityRESTGetClassificationsValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasClassifications>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for entityRESTGetEntitiesByUniqueAttributes
     * @param typeName The name of the type. (required)
     * @param minExtInfo Whether to return minimal information for referred entities. (optional, default to false)
     * @param ignoreRelationships Whether to ignore relationship attributes. (optional, default to false)
     * @param attrNColonQualifiedName Qualified name of an entity. E.g. to find 2 entities you can set attrs_0:qualifiedName&#x3D;db1@cl1&amp;attrs_2:qualifiedName&#x3D;db2@cl1 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTGetEntitiesByUniqueAttributesCall(String typeName, Boolean minExtInfo, Boolean ignoreRelationships, String attrNColonQualifiedName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/entity/bulk/uniqueAttribute/type/{typeName}"
            .replaceAll("\\{" + "typeName" + "\\}", localVarApiClient.escapeString(typeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (minExtInfo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minExtInfo", minExtInfo));
        }

        if (ignoreRelationships != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignoreRelationships", ignoreRelationships));
        }

        if (attrNColonQualifiedName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attr_N:qualifiedName", attrNColonQualifiedName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entityRESTGetEntitiesByUniqueAttributesValidateBeforeCall(String typeName, Boolean minExtInfo, Boolean ignoreRelationships, String attrNColonQualifiedName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'typeName' is set
        if (typeName == null) {
            throw new ApiException("Missing the required parameter 'typeName' when calling entityRESTGetEntitiesByUniqueAttributes(Async)");
        }
        

        okhttp3.Call localVarCall = entityRESTGetEntitiesByUniqueAttributesCall(typeName, minExtInfo, ignoreRelationships, attrNColonQualifiedName, _callback);
        return localVarCall;

    }

    /**
     * 
     * Bulk API to retrieve list of entities identified by its unique attributes.  In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format  typeName&#x3D;&lt;typeName&gt;&amp;attr_1:&lt;attrName&gt;&#x3D;&lt;attrValue&gt;&amp;attr_2:&lt;attrName&gt;&#x3D;&lt;attrValue&gt;&amp;attr_3:&lt;attrName&gt;&#x3D;&lt;attrValue&gt;  NOTE: The attrName should be an unique attribute for the given entity-type  The REST request would look something like this  GET /v2/entity/bulk/uniqueAttribute/type/hive_db?attr_0:qualifiedName&#x3D;db1@cl1&amp;attr_2:qualifiedName&#x3D;db2@cl1
     * @param typeName The name of the type. (required)
     * @param minExtInfo Whether to return minimal information for referred entities. (optional, default to false)
     * @param ignoreRelationships Whether to ignore relationship attributes. (optional, default to false)
     * @param attrNColonQualifiedName Qualified name of an entity. E.g. to find 2 entities you can set attrs_0:qualifiedName&#x3D;db1@cl1&amp;attrs_2:qualifiedName&#x3D;db2@cl1 (optional)
     * @return JsonAtlasEntitiesWithExtInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasEntitiesWithExtInfo entityRESTGetEntitiesByUniqueAttributes(String typeName, Boolean minExtInfo, Boolean ignoreRelationships, String attrNColonQualifiedName) throws ApiException {
        ApiResponse<JsonAtlasEntitiesWithExtInfo> localVarResp = entityRESTGetEntitiesByUniqueAttributesWithHttpInfo(typeName, minExtInfo, ignoreRelationships, attrNColonQualifiedName);
        return localVarResp.getData();
    }

    /**
     * 
     * Bulk API to retrieve list of entities identified by its unique attributes.  In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format  typeName&#x3D;&lt;typeName&gt;&amp;attr_1:&lt;attrName&gt;&#x3D;&lt;attrValue&gt;&amp;attr_2:&lt;attrName&gt;&#x3D;&lt;attrValue&gt;&amp;attr_3:&lt;attrName&gt;&#x3D;&lt;attrValue&gt;  NOTE: The attrName should be an unique attribute for the given entity-type  The REST request would look something like this  GET /v2/entity/bulk/uniqueAttribute/type/hive_db?attr_0:qualifiedName&#x3D;db1@cl1&amp;attr_2:qualifiedName&#x3D;db2@cl1
     * @param typeName The name of the type. (required)
     * @param minExtInfo Whether to return minimal information for referred entities. (optional, default to false)
     * @param ignoreRelationships Whether to ignore relationship attributes. (optional, default to false)
     * @param attrNColonQualifiedName Qualified name of an entity. E.g. to find 2 entities you can set attrs_0:qualifiedName&#x3D;db1@cl1&amp;attrs_2:qualifiedName&#x3D;db2@cl1 (optional)
     * @return ApiResponse&lt;JsonAtlasEntitiesWithExtInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasEntitiesWithExtInfo> entityRESTGetEntitiesByUniqueAttributesWithHttpInfo(String typeName, Boolean minExtInfo, Boolean ignoreRelationships, String attrNColonQualifiedName) throws ApiException {
        okhttp3.Call localVarCall = entityRESTGetEntitiesByUniqueAttributesValidateBeforeCall(typeName, minExtInfo, ignoreRelationships, attrNColonQualifiedName, null);
        Type localVarReturnType = new TypeToken<JsonAtlasEntitiesWithExtInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Bulk API to retrieve list of entities identified by its unique attributes.  In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format  typeName&#x3D;&lt;typeName&gt;&amp;attr_1:&lt;attrName&gt;&#x3D;&lt;attrValue&gt;&amp;attr_2:&lt;attrName&gt;&#x3D;&lt;attrValue&gt;&amp;attr_3:&lt;attrName&gt;&#x3D;&lt;attrValue&gt;  NOTE: The attrName should be an unique attribute for the given entity-type  The REST request would look something like this  GET /v2/entity/bulk/uniqueAttribute/type/hive_db?attr_0:qualifiedName&#x3D;db1@cl1&amp;attr_2:qualifiedName&#x3D;db2@cl1
     * @param typeName The name of the type. (required)
     * @param minExtInfo Whether to return minimal information for referred entities. (optional, default to false)
     * @param ignoreRelationships Whether to ignore relationship attributes. (optional, default to false)
     * @param attrNColonQualifiedName Qualified name of an entity. E.g. to find 2 entities you can set attrs_0:qualifiedName&#x3D;db1@cl1&amp;attrs_2:qualifiedName&#x3D;db2@cl1 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTGetEntitiesByUniqueAttributesAsync(String typeName, Boolean minExtInfo, Boolean ignoreRelationships, String attrNColonQualifiedName, final ApiCallback<JsonAtlasEntitiesWithExtInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = entityRESTGetEntitiesByUniqueAttributesValidateBeforeCall(typeName, minExtInfo, ignoreRelationships, attrNColonQualifiedName, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasEntitiesWithExtInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for entityRESTGetHeaderById
     * @param guid The globally unique identifier of the entity. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AtlasEntityHeader </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTGetHeaderByIdCall(String guid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atlas/v2/entity/guid/{guid}/header"
            .replaceAll("\\{" + "guid" + "\\}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entityRESTGetHeaderByIdValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling entityRESTGetHeaderById(Async)");
        }
        

        okhttp3.Call localVarCall = entityRESTGetHeaderByIdCall(guid, _callback);
        return localVarCall;

    }

    /**
     * Get entity header given its GUID.
     * Get entity header given its GUID.
     * @param guid The globally unique identifier of the entity. (required)
     * @return JsonAtlasEntityHeader
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AtlasEntityHeader </td><td>  -  </td></tr>
     </table>
     */
    public JsonAtlasEntityHeader entityRESTGetHeaderById(String guid) throws ApiException {
        ApiResponse<JsonAtlasEntityHeader> localVarResp = entityRESTGetHeaderByIdWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * Get entity header given its GUID.
     * Get entity header given its GUID.
     * @param guid The globally unique identifier of the entity. (required)
     * @return ApiResponse&lt;JsonAtlasEntityHeader&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AtlasEntityHeader </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonAtlasEntityHeader> entityRESTGetHeaderByIdWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = entityRESTGetHeaderByIdValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<JsonAtlasEntityHeader>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get entity header given its GUID. (asynchronously)
     * Get entity header given its GUID.
     * @param guid The globally unique identifier of the entity. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AtlasEntityHeader </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTGetHeaderByIdAsync(String guid, final ApiCallback<JsonAtlasEntityHeader> _callback) throws ApiException {

        okhttp3.Call localVarCall = entityRESTGetHeaderByIdValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<JsonAtlasEntityHeader>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for entityRESTPartialUpdateEntityAttrByGuid
     * @param guid The globally unique identifier of the entity. (required)
     * @param name The name of the attribute. (required)
     * @param body The value of the attribute. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated with EntityMutationResponse. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTPartialUpdateEntityAttrByGuidCall(String guid, String name, Object body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/atlas/v2/entity/guid/{guid}"
            .replaceAll("\\{" + "guid" + "\\}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entityRESTPartialUpdateEntityAttrByGuidValidateBeforeCall(String guid, String name, Object body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling entityRESTPartialUpdateEntityAttrByGuid(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling entityRESTPartialUpdateEntityAttrByGuid(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling entityRESTPartialUpdateEntityAttrByGuid(Async)");
        }
        

        okhttp3.Call localVarCall = entityRESTPartialUpdateEntityAttrByGuidCall(guid, name, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Updates entity partially - creates or updates entity attribute identified by its GUID. Supports only primitive attribute type and entity references. It does not support updation of complex types like arrays, and maps. Null updates are not possible.
     * @param guid The globally unique identifier of the entity. (required)
     * @param name The name of the attribute. (required)
     * @param body The value of the attribute. (required)
     * @return JsonEntityMutationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated with EntityMutationResponse. </td><td>  -  </td></tr>
     </table>
     */
    public JsonEntityMutationResponse entityRESTPartialUpdateEntityAttrByGuid(String guid, String name, Object body) throws ApiException {
        ApiResponse<JsonEntityMutationResponse> localVarResp = entityRESTPartialUpdateEntityAttrByGuidWithHttpInfo(guid, name, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates entity partially - creates or updates entity attribute identified by its GUID. Supports only primitive attribute type and entity references. It does not support updation of complex types like arrays, and maps. Null updates are not possible.
     * @param guid The globally unique identifier of the entity. (required)
     * @param name The name of the attribute. (required)
     * @param body The value of the attribute. (required)
     * @return ApiResponse&lt;JsonEntityMutationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated with EntityMutationResponse. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonEntityMutationResponse> entityRESTPartialUpdateEntityAttrByGuidWithHttpInfo(String guid, String name, Object body) throws ApiException {
        okhttp3.Call localVarCall = entityRESTPartialUpdateEntityAttrByGuidValidateBeforeCall(guid, name, body, null);
        Type localVarReturnType = new TypeToken<JsonEntityMutationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates entity partially - creates or updates entity attribute identified by its GUID. Supports only primitive attribute type and entity references. It does not support updation of complex types like arrays, and maps. Null updates are not possible.
     * @param guid The globally unique identifier of the entity. (required)
     * @param name The name of the attribute. (required)
     * @param body The value of the attribute. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated with EntityMutationResponse. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTPartialUpdateEntityAttrByGuidAsync(String guid, String name, Object body, final ApiCallback<JsonEntityMutationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = entityRESTPartialUpdateEntityAttrByGuidValidateBeforeCall(guid, name, body, _callback);
        Type localVarReturnType = new TypeToken<JsonEntityMutationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for entityRESTPartialUpdateEntityByUniqueAttrs
     * @param typeName The name of the type. (required)
     * @param atlasEntityWithExtInfo Atlas entity with extended information. (required)
     * @param attrColonQualifiedName The qualified name of the entity. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated with EntityMutationResponse. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTPartialUpdateEntityByUniqueAttrsCall(String typeName, JsonAtlasEntityWithExtInfo atlasEntityWithExtInfo, String attrColonQualifiedName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = atlasEntityWithExtInfo;

        // create path and map variables
        String localVarPath = "/atlas/v2/entity/uniqueAttribute/type/{typeName}"
            .replaceAll("\\{" + "typeName" + "\\}", localVarApiClient.escapeString(typeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attrColonQualifiedName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attr:qualifiedName", attrColonQualifiedName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entityRESTPartialUpdateEntityByUniqueAttrsValidateBeforeCall(String typeName, JsonAtlasEntityWithExtInfo atlasEntityWithExtInfo, String attrColonQualifiedName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'typeName' is set
        if (typeName == null) {
            throw new ApiException("Missing the required parameter 'typeName' when calling entityRESTPartialUpdateEntityByUniqueAttrs(Async)");
        }
        
        // verify the required parameter 'atlasEntityWithExtInfo' is set
        if (atlasEntityWithExtInfo == null) {
            throw new ApiException("Missing the required parameter 'atlasEntityWithExtInfo' when calling entityRESTPartialUpdateEntityByUniqueAttrs(Async)");
        }
        

        okhttp3.Call localVarCall = entityRESTPartialUpdateEntityByUniqueAttrsCall(typeName, atlasEntityWithExtInfo, attrColonQualifiedName, _callback);
        return localVarCall;

    }

    /**
     * 
     * Updates entity partially - Allows a subset of attributes to be updated on an entity which is identified by its type and unique attribute  eg: Referenceable.qualifiedName. Null updates are not possible. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format: attr:&lt;attrName&gt;&#x3D;&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look something like this: PUT /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute&#x3D;someValue.
     * @param typeName The name of the type. (required)
     * @param atlasEntityWithExtInfo Atlas entity with extended information. (required)
     * @param attrColonQualifiedName The qualified name of the entity. (optional)
     * @return JsonEntityMutationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated with EntityMutationResponse. </td><td>  -  </td></tr>
     </table>
     */
    public JsonEntityMutationResponse entityRESTPartialUpdateEntityByUniqueAttrs(String typeName, JsonAtlasEntityWithExtInfo atlasEntityWithExtInfo, String attrColonQualifiedName) throws ApiException {
        ApiResponse<JsonEntityMutationResponse> localVarResp = entityRESTPartialUpdateEntityByUniqueAttrsWithHttpInfo(typeName, atlasEntityWithExtInfo, attrColonQualifiedName);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates entity partially - Allows a subset of attributes to be updated on an entity which is identified by its type and unique attribute  eg: Referenceable.qualifiedName. Null updates are not possible. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format: attr:&lt;attrName&gt;&#x3D;&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look something like this: PUT /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute&#x3D;someValue.
     * @param typeName The name of the type. (required)
     * @param atlasEntityWithExtInfo Atlas entity with extended information. (required)
     * @param attrColonQualifiedName The qualified name of the entity. (optional)
     * @return ApiResponse&lt;JsonEntityMutationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated with EntityMutationResponse. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonEntityMutationResponse> entityRESTPartialUpdateEntityByUniqueAttrsWithHttpInfo(String typeName, JsonAtlasEntityWithExtInfo atlasEntityWithExtInfo, String attrColonQualifiedName) throws ApiException {
        okhttp3.Call localVarCall = entityRESTPartialUpdateEntityByUniqueAttrsValidateBeforeCall(typeName, atlasEntityWithExtInfo, attrColonQualifiedName, null);
        Type localVarReturnType = new TypeToken<JsonEntityMutationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates entity partially - Allows a subset of attributes to be updated on an entity which is identified by its type and unique attribute  eg: Referenceable.qualifiedName. Null updates are not possible. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format: attr:&lt;attrName&gt;&#x3D;&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look something like this: PUT /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute&#x3D;someValue.
     * @param typeName The name of the type. (required)
     * @param atlasEntityWithExtInfo Atlas entity with extended information. (required)
     * @param attrColonQualifiedName The qualified name of the entity. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated with EntityMutationResponse. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTPartialUpdateEntityByUniqueAttrsAsync(String typeName, JsonAtlasEntityWithExtInfo atlasEntityWithExtInfo, String attrColonQualifiedName, final ApiCallback<JsonEntityMutationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = entityRESTPartialUpdateEntityByUniqueAttrsValidateBeforeCall(typeName, atlasEntityWithExtInfo, attrColonQualifiedName, _callback);
        Type localVarReturnType = new TypeToken<JsonEntityMutationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for entityRESTSetClassifications
     * @param entityHeaders Atlas entity headers. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTSetClassificationsCall(JsonAtlasEntityHeaders entityHeaders, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = entityHeaders;

        // create path and map variables
        String localVarPath = "/atlas/v2/entity/bulk/setClassifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entityRESTSetClassificationsValidateBeforeCall(JsonAtlasEntityHeaders entityHeaders, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'entityHeaders' is set
        if (entityHeaders == null) {
            throw new ApiException("Missing the required parameter 'entityHeaders' when calling entityRESTSetClassifications(Async)");
        }
        

        okhttp3.Call localVarCall = entityRESTSetClassificationsCall(entityHeaders, _callback);
        return localVarCall;

    }

    /**
     * 
     * set classifications on entities in bulk.
     * @param entityHeaders Atlas entity headers. (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<String> entityRESTSetClassifications(JsonAtlasEntityHeaders entityHeaders) throws ApiException {
        ApiResponse<List<String>> localVarResp = entityRESTSetClassificationsWithHttpInfo(entityHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * set classifications on entities in bulk.
     * @param entityHeaders Atlas entity headers. (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> entityRESTSetClassificationsWithHttpInfo(JsonAtlasEntityHeaders entityHeaders) throws ApiException {
        okhttp3.Call localVarCall = entityRESTSetClassificationsValidateBeforeCall(entityHeaders, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * set classifications on entities in bulk.
     * @param entityHeaders Atlas entity headers. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTSetClassificationsAsync(JsonAtlasEntityHeaders entityHeaders, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = entityRESTSetClassificationsValidateBeforeCall(entityHeaders, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for entityRESTUpdateClassifications
     * @param guid The globally unique identifier of the entity. (required)
     * @param classifications An array of classifications to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTUpdateClassificationsCall(String guid, List<JsonAtlasClassification> classifications, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = classifications;

        // create path and map variables
        String localVarPath = "/atlas/v2/entity/guid/{guid}/classifications"
            .replaceAll("\\{" + "guid" + "\\}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entityRESTUpdateClassificationsValidateBeforeCall(String guid, List<JsonAtlasClassification> classifications, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling entityRESTUpdateClassifications(Async)");
        }
        
        // verify the required parameter 'classifications' is set
        if (classifications == null) {
            throw new ApiException("Missing the required parameter 'classifications' when calling entityRESTUpdateClassifications(Async)");
        }
        

        okhttp3.Call localVarCall = entityRESTUpdateClassificationsCall(guid, classifications, _callback);
        return localVarCall;

    }

    /**
     * 
     * Updates classifications to an existing entity represented by a guid.
     * @param guid The globally unique identifier of the entity. (required)
     * @param classifications An array of classifications to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public void entityRESTUpdateClassifications(String guid, List<JsonAtlasClassification> classifications) throws ApiException {
        entityRESTUpdateClassificationsWithHttpInfo(guid, classifications);
    }

    /**
     * 
     * Updates classifications to an existing entity represented by a guid.
     * @param guid The globally unique identifier of the entity. (required)
     * @param classifications An array of classifications to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> entityRESTUpdateClassificationsWithHttpInfo(String guid, List<JsonAtlasClassification> classifications) throws ApiException {
        okhttp3.Call localVarCall = entityRESTUpdateClassificationsValidateBeforeCall(guid, classifications, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Updates classifications to an existing entity represented by a guid.
     * @param guid The globally unique identifier of the entity. (required)
     * @param classifications An array of classifications to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTUpdateClassificationsAsync(String guid, List<JsonAtlasClassification> classifications, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = entityRESTUpdateClassificationsValidateBeforeCall(guid, classifications, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for entityRESTUpdateClassificationsByUniqueAttribute
     * @param typeName The name of the type. (required)
     * @param atlasClassificationArray An array of classification to be updated. (required)
     * @param attrColonQualifiedName The qualified name of the entity. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTUpdateClassificationsByUniqueAttributeCall(String typeName, List<JsonAtlasClassification> atlasClassificationArray, String attrColonQualifiedName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = atlasClassificationArray;

        // create path and map variables
        String localVarPath = "/atlas/v2/entity/uniqueAttribute/type/{typeName}/classifications"
            .replaceAll("\\{" + "typeName" + "\\}", localVarApiClient.escapeString(typeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attrColonQualifiedName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attr:qualifiedName", attrColonQualifiedName));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entityRESTUpdateClassificationsByUniqueAttributeValidateBeforeCall(String typeName, List<JsonAtlasClassification> atlasClassificationArray, String attrColonQualifiedName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'typeName' is set
        if (typeName == null) {
            throw new ApiException("Missing the required parameter 'typeName' when calling entityRESTUpdateClassificationsByUniqueAttribute(Async)");
        }
        
        // verify the required parameter 'atlasClassificationArray' is set
        if (atlasClassificationArray == null) {
            throw new ApiException("Missing the required parameter 'atlasClassificationArray' when calling entityRESTUpdateClassificationsByUniqueAttribute(Async)");
        }
        

        okhttp3.Call localVarCall = entityRESTUpdateClassificationsByUniqueAttributeCall(typeName, atlasClassificationArray, attrColonQualifiedName, _callback);
        return localVarCall;

    }

    /**
     * 
     * Updates classification on an entity identified by its type and unique attributes.
     * @param typeName The name of the type. (required)
     * @param atlasClassificationArray An array of classification to be updated. (required)
     * @param attrColonQualifiedName The qualified name of the entity. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public void entityRESTUpdateClassificationsByUniqueAttribute(String typeName, List<JsonAtlasClassification> atlasClassificationArray, String attrColonQualifiedName) throws ApiException {
        entityRESTUpdateClassificationsByUniqueAttributeWithHttpInfo(typeName, atlasClassificationArray, attrColonQualifiedName);
    }

    /**
     * 
     * Updates classification on an entity identified by its type and unique attributes.
     * @param typeName The name of the type. (required)
     * @param atlasClassificationArray An array of classification to be updated. (required)
     * @param attrColonQualifiedName The qualified name of the entity. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> entityRESTUpdateClassificationsByUniqueAttributeWithHttpInfo(String typeName, List<JsonAtlasClassification> atlasClassificationArray, String attrColonQualifiedName) throws ApiException {
        okhttp3.Call localVarCall = entityRESTUpdateClassificationsByUniqueAttributeValidateBeforeCall(typeName, atlasClassificationArray, attrColonQualifiedName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Updates classification on an entity identified by its type and unique attributes.
     * @param typeName The name of the type. (required)
     * @param atlasClassificationArray An array of classification to be updated. (required)
     * @param attrColonQualifiedName The qualified name of the entity. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityRESTUpdateClassificationsByUniqueAttributeAsync(String typeName, List<JsonAtlasClassification> atlasClassificationArray, String attrColonQualifiedName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = entityRESTUpdateClassificationsByUniqueAttributeValidateBeforeCall(typeName, atlasClassificationArray, attrColonQualifiedName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
