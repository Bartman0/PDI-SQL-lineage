/*
 * Purview Catalog Service REST API Document
 * Purview Catalog Service is a fully managed cloud service whose users can discover the data sources they need and understand the data sources they find. At the same time, Data Catalog helps organizations get more value from their existing investments. This swagger defines REST API of the Hot Tier of Data Catalog Gen 2.
 *
 * The version of the OpenAPI document: 2020-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.JsonRoundingMode;

/**
 * The number format.
 */
@ApiModel(description = "The number format.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-01-21T11:36:33.263002+01:00[Europe/Amsterdam]")
public class JsonNumberFormat {
  public static final String SERIALIZED_NAME_AVAILABLE_LOCALES = "availableLocales";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_LOCALES)
  private List<String> availableLocales = null;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_CURRENCY_INSTANCE = "currencyInstance";
  @SerializedName(SERIALIZED_NAME_CURRENCY_INSTANCE)
  private JsonNumberFormat currencyInstance;

  public static final String SERIALIZED_NAME_GROUPING_USED = "groupingUsed";
  @SerializedName(SERIALIZED_NAME_GROUPING_USED)
  private Boolean groupingUsed;

  public static final String SERIALIZED_NAME_INSTANCE = "instance";
  @SerializedName(SERIALIZED_NAME_INSTANCE)
  private JsonNumberFormat instance;

  public static final String SERIALIZED_NAME_INTEGER_INSTANCE = "integerInstance";
  @SerializedName(SERIALIZED_NAME_INTEGER_INSTANCE)
  private JsonNumberFormat integerInstance;

  public static final String SERIALIZED_NAME_MAXIMUM_FRACTION_DIGITS = "maximumFractionDigits";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_FRACTION_DIGITS)
  private Integer maximumFractionDigits;

  public static final String SERIALIZED_NAME_MAXIMUM_INTEGER_DIGITS = "maximumIntegerDigits";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_INTEGER_DIGITS)
  private Integer maximumIntegerDigits;

  public static final String SERIALIZED_NAME_MINIMUM_FRACTION_DIGITS = "minimumFractionDigits";
  @SerializedName(SERIALIZED_NAME_MINIMUM_FRACTION_DIGITS)
  private Integer minimumFractionDigits;

  public static final String SERIALIZED_NAME_MINIMUM_INTEGER_DIGITS = "minimumIntegerDigits";
  @SerializedName(SERIALIZED_NAME_MINIMUM_INTEGER_DIGITS)
  private Integer minimumIntegerDigits;

  public static final String SERIALIZED_NAME_NUMBER_INSTANCE = "numberInstance";
  @SerializedName(SERIALIZED_NAME_NUMBER_INSTANCE)
  private JsonNumberFormat numberInstance;

  public static final String SERIALIZED_NAME_PARSE_INTEGER_ONLY = "parseIntegerOnly";
  @SerializedName(SERIALIZED_NAME_PARSE_INTEGER_ONLY)
  private Boolean parseIntegerOnly;

  public static final String SERIALIZED_NAME_PERCENT_INSTANCE = "percentInstance";
  @SerializedName(SERIALIZED_NAME_PERCENT_INSTANCE)
  private JsonNumberFormat percentInstance;

  public static final String SERIALIZED_NAME_ROUNDING_MODE = "roundingMode";
  @SerializedName(SERIALIZED_NAME_ROUNDING_MODE)
  private JsonRoundingMode roundingMode;


  public JsonNumberFormat availableLocales(List<String> availableLocales) {
    
    this.availableLocales = availableLocales;
    return this;
  }

  public JsonNumberFormat addAvailableLocalesItem(String availableLocalesItem) {
    if (this.availableLocales == null) {
      this.availableLocales = new ArrayList<String>();
    }
    this.availableLocales.add(availableLocalesItem);
    return this;
  }

   /**
   * The number format.
   * @return availableLocales
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number format.")

  public List<String> getAvailableLocales() {
    return availableLocales;
  }


  public void setAvailableLocales(List<String> availableLocales) {
    this.availableLocales = availableLocales;
  }


  public JsonNumberFormat currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * The currency.
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The currency.")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public JsonNumberFormat currencyInstance(JsonNumberFormat currencyInstance) {
    
    this.currencyInstance = currencyInstance;
    return this;
  }

   /**
   * Get currencyInstance
   * @return currencyInstance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JsonNumberFormat getCurrencyInstance() {
    return currencyInstance;
  }


  public void setCurrencyInstance(JsonNumberFormat currencyInstance) {
    this.currencyInstance = currencyInstance;
  }


  public JsonNumberFormat groupingUsed(Boolean groupingUsed) {
    
    this.groupingUsed = groupingUsed;
    return this;
  }

   /**
   * Determines if grouping is used.
   * @return groupingUsed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determines if grouping is used.")

  public Boolean getGroupingUsed() {
    return groupingUsed;
  }


  public void setGroupingUsed(Boolean groupingUsed) {
    this.groupingUsed = groupingUsed;
  }


  public JsonNumberFormat instance(JsonNumberFormat instance) {
    
    this.instance = instance;
    return this;
  }

   /**
   * Get instance
   * @return instance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JsonNumberFormat getInstance() {
    return instance;
  }


  public void setInstance(JsonNumberFormat instance) {
    this.instance = instance;
  }


  public JsonNumberFormat integerInstance(JsonNumberFormat integerInstance) {
    
    this.integerInstance = integerInstance;
    return this;
  }

   /**
   * Get integerInstance
   * @return integerInstance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JsonNumberFormat getIntegerInstance() {
    return integerInstance;
  }


  public void setIntegerInstance(JsonNumberFormat integerInstance) {
    this.integerInstance = integerInstance;
  }


  public JsonNumberFormat maximumFractionDigits(Integer maximumFractionDigits) {
    
    this.maximumFractionDigits = maximumFractionDigits;
    return this;
  }

   /**
   * The maximum of fraction digits.
   * @return maximumFractionDigits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum of fraction digits.")

  public Integer getMaximumFractionDigits() {
    return maximumFractionDigits;
  }


  public void setMaximumFractionDigits(Integer maximumFractionDigits) {
    this.maximumFractionDigits = maximumFractionDigits;
  }


  public JsonNumberFormat maximumIntegerDigits(Integer maximumIntegerDigits) {
    
    this.maximumIntegerDigits = maximumIntegerDigits;
    return this;
  }

   /**
   * The maximum of integer digits.
   * @return maximumIntegerDigits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum of integer digits.")

  public Integer getMaximumIntegerDigits() {
    return maximumIntegerDigits;
  }


  public void setMaximumIntegerDigits(Integer maximumIntegerDigits) {
    this.maximumIntegerDigits = maximumIntegerDigits;
  }


  public JsonNumberFormat minimumFractionDigits(Integer minimumFractionDigits) {
    
    this.minimumFractionDigits = minimumFractionDigits;
    return this;
  }

   /**
   * The minimum of fraction digits.
   * @return minimumFractionDigits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The minimum of fraction digits.")

  public Integer getMinimumFractionDigits() {
    return minimumFractionDigits;
  }


  public void setMinimumFractionDigits(Integer minimumFractionDigits) {
    this.minimumFractionDigits = minimumFractionDigits;
  }


  public JsonNumberFormat minimumIntegerDigits(Integer minimumIntegerDigits) {
    
    this.minimumIntegerDigits = minimumIntegerDigits;
    return this;
  }

   /**
   * The minimum of integer digits.
   * @return minimumIntegerDigits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The minimum of integer digits.")

  public Integer getMinimumIntegerDigits() {
    return minimumIntegerDigits;
  }


  public void setMinimumIntegerDigits(Integer minimumIntegerDigits) {
    this.minimumIntegerDigits = minimumIntegerDigits;
  }


  public JsonNumberFormat numberInstance(JsonNumberFormat numberInstance) {
    
    this.numberInstance = numberInstance;
    return this;
  }

   /**
   * Get numberInstance
   * @return numberInstance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JsonNumberFormat getNumberInstance() {
    return numberInstance;
  }


  public void setNumberInstance(JsonNumberFormat numberInstance) {
    this.numberInstance = numberInstance;
  }


  public JsonNumberFormat parseIntegerOnly(Boolean parseIntegerOnly) {
    
    this.parseIntegerOnly = parseIntegerOnly;
    return this;
  }

   /**
   * Determines if only integer is parsed.
   * @return parseIntegerOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determines if only integer is parsed.")

  public Boolean getParseIntegerOnly() {
    return parseIntegerOnly;
  }


  public void setParseIntegerOnly(Boolean parseIntegerOnly) {
    this.parseIntegerOnly = parseIntegerOnly;
  }


  public JsonNumberFormat percentInstance(JsonNumberFormat percentInstance) {
    
    this.percentInstance = percentInstance;
    return this;
  }

   /**
   * Get percentInstance
   * @return percentInstance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JsonNumberFormat getPercentInstance() {
    return percentInstance;
  }


  public void setPercentInstance(JsonNumberFormat percentInstance) {
    this.percentInstance = percentInstance;
  }


  public JsonNumberFormat roundingMode(JsonRoundingMode roundingMode) {
    
    this.roundingMode = roundingMode;
    return this;
  }

   /**
   * Get roundingMode
   * @return roundingMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JsonRoundingMode getRoundingMode() {
    return roundingMode;
  }


  public void setRoundingMode(JsonRoundingMode roundingMode) {
    this.roundingMode = roundingMode;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonNumberFormat jsonNumberFormat = (JsonNumberFormat) o;
    return Objects.equals(this.availableLocales, jsonNumberFormat.availableLocales) &&
        Objects.equals(this.currency, jsonNumberFormat.currency) &&
        Objects.equals(this.currencyInstance, jsonNumberFormat.currencyInstance) &&
        Objects.equals(this.groupingUsed, jsonNumberFormat.groupingUsed) &&
        Objects.equals(this.instance, jsonNumberFormat.instance) &&
        Objects.equals(this.integerInstance, jsonNumberFormat.integerInstance) &&
        Objects.equals(this.maximumFractionDigits, jsonNumberFormat.maximumFractionDigits) &&
        Objects.equals(this.maximumIntegerDigits, jsonNumberFormat.maximumIntegerDigits) &&
        Objects.equals(this.minimumFractionDigits, jsonNumberFormat.minimumFractionDigits) &&
        Objects.equals(this.minimumIntegerDigits, jsonNumberFormat.minimumIntegerDigits) &&
        Objects.equals(this.numberInstance, jsonNumberFormat.numberInstance) &&
        Objects.equals(this.parseIntegerOnly, jsonNumberFormat.parseIntegerOnly) &&
        Objects.equals(this.percentInstance, jsonNumberFormat.percentInstance) &&
        Objects.equals(this.roundingMode, jsonNumberFormat.roundingMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableLocales, currency, currencyInstance, groupingUsed, instance, integerInstance, maximumFractionDigits, maximumIntegerDigits, minimumFractionDigits, minimumIntegerDigits, numberInstance, parseIntegerOnly, percentInstance, roundingMode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonNumberFormat {\n");
    sb.append("    availableLocales: ").append(toIndentedString(availableLocales)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    currencyInstance: ").append(toIndentedString(currencyInstance)).append("\n");
    sb.append("    groupingUsed: ").append(toIndentedString(groupingUsed)).append("\n");
    sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
    sb.append("    integerInstance: ").append(toIndentedString(integerInstance)).append("\n");
    sb.append("    maximumFractionDigits: ").append(toIndentedString(maximumFractionDigits)).append("\n");
    sb.append("    maximumIntegerDigits: ").append(toIndentedString(maximumIntegerDigits)).append("\n");
    sb.append("    minimumFractionDigits: ").append(toIndentedString(minimumFractionDigits)).append("\n");
    sb.append("    minimumIntegerDigits: ").append(toIndentedString(minimumIntegerDigits)).append("\n");
    sb.append("    numberInstance: ").append(toIndentedString(numberInstance)).append("\n");
    sb.append("    parseIntegerOnly: ").append(toIndentedString(parseIntegerOnly)).append("\n");
    sb.append("    percentInstance: ").append(toIndentedString(percentInstance)).append("\n");
    sb.append("    roundingMode: ").append(toIndentedString(roundingMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

