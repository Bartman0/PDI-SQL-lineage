/*
 * Purview Catalog Service REST API Document
 * Purview Catalog Service is a fully managed cloud service whose users can discover the data sources they need and understand the data sources they find. At the same time, Data Catalog helps organizations get more value from their existing investments. This swagger defines REST API of the Hot Tier of Data Catalog Gen 2.
 *
 * The version of the OpenAPI document: 2020-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.JsonAtlasConstraintDef;
import org.openapitools.client.model.JsonCardinality;

/**
 * class that captures details of a struct-attribute.
 */
@ApiModel(description = "class that captures details of a struct-attribute.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-01-21T11:36:33.263002+01:00[Europe/Amsterdam]")
public class JsonAtlasAttributeDef {
  public static final String SERIALIZED_NAME_CARDINALITY = "cardinality";
  @SerializedName(SERIALIZED_NAME_CARDINALITY)
  private JsonCardinality cardinality;

  public static final String SERIALIZED_NAME_CONSTRAINTS = "constraints";
  @SerializedName(SERIALIZED_NAME_CONSTRAINTS)
  private List<JsonAtlasConstraintDef> constraints = null;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "defaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private String defaultValue;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_INCLUDE_IN_NOTIFICATION = "includeInNotification";
  @SerializedName(SERIALIZED_NAME_INCLUDE_IN_NOTIFICATION)
  private Boolean includeInNotification;

  public static final String SERIALIZED_NAME_IS_INDEXABLE = "isIndexable";
  @SerializedName(SERIALIZED_NAME_IS_INDEXABLE)
  private Boolean isIndexable;

  public static final String SERIALIZED_NAME_IS_OPTIONAL = "isOptional";
  @SerializedName(SERIALIZED_NAME_IS_OPTIONAL)
  private Boolean isOptional;

  public static final String SERIALIZED_NAME_IS_UNIQUE = "isUnique";
  @SerializedName(SERIALIZED_NAME_IS_UNIQUE)
  private Boolean isUnique;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private Map<String, String> options = null;

  public static final String SERIALIZED_NAME_TYPE_NAME = "typeName";
  @SerializedName(SERIALIZED_NAME_TYPE_NAME)
  private String typeName;

  public static final String SERIALIZED_NAME_VALUES_MAX_COUNT = "valuesMaxCount";
  @SerializedName(SERIALIZED_NAME_VALUES_MAX_COUNT)
  private Integer valuesMaxCount;

  public static final String SERIALIZED_NAME_VALUES_MIN_COUNT = "valuesMinCount";
  @SerializedName(SERIALIZED_NAME_VALUES_MIN_COUNT)
  private Integer valuesMinCount;


  public JsonAtlasAttributeDef cardinality(JsonCardinality cardinality) {
    
    this.cardinality = cardinality;
    return this;
  }

   /**
   * Get cardinality
   * @return cardinality
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JsonCardinality getCardinality() {
    return cardinality;
  }


  public void setCardinality(JsonCardinality cardinality) {
    this.cardinality = cardinality;
  }


  public JsonAtlasAttributeDef constraints(List<JsonAtlasConstraintDef> constraints) {
    
    this.constraints = constraints;
    return this;
  }

  public JsonAtlasAttributeDef addConstraintsItem(JsonAtlasConstraintDef constraintsItem) {
    if (this.constraints == null) {
      this.constraints = new ArrayList<JsonAtlasConstraintDef>();
    }
    this.constraints.add(constraintsItem);
    return this;
  }

   /**
   * An array of constraints.
   * @return constraints
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of constraints.")

  public List<JsonAtlasConstraintDef> getConstraints() {
    return constraints;
  }


  public void setConstraints(List<JsonAtlasConstraintDef> constraints) {
    this.constraints = constraints;
  }


  public JsonAtlasAttributeDef defaultValue(String defaultValue) {
    
    this.defaultValue = defaultValue;
    return this;
  }

   /**
   * The default value of the attribute.
   * @return defaultValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The default value of the attribute.")

  public String getDefaultValue() {
    return defaultValue;
  }


  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }


  public JsonAtlasAttributeDef description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * The description of the attribute.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The description of the attribute.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public JsonAtlasAttributeDef includeInNotification(Boolean includeInNotification) {
    
    this.includeInNotification = includeInNotification;
    return this;
  }

   /**
   * Determines if it is included in notification.
   * @return includeInNotification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determines if it is included in notification.")

  public Boolean getIncludeInNotification() {
    return includeInNotification;
  }


  public void setIncludeInNotification(Boolean includeInNotification) {
    this.includeInNotification = includeInNotification;
  }


  public JsonAtlasAttributeDef isIndexable(Boolean isIndexable) {
    
    this.isIndexable = isIndexable;
    return this;
  }

   /**
   * Determines if it is indexable.
   * @return isIndexable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determines if it is indexable.")

  public Boolean getIsIndexable() {
    return isIndexable;
  }


  public void setIsIndexable(Boolean isIndexable) {
    this.isIndexable = isIndexable;
  }


  public JsonAtlasAttributeDef isOptional(Boolean isOptional) {
    
    this.isOptional = isOptional;
    return this;
  }

   /**
   * Determines if it is optional.
   * @return isOptional
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determines if it is optional.")

  public Boolean getIsOptional() {
    return isOptional;
  }


  public void setIsOptional(Boolean isOptional) {
    this.isOptional = isOptional;
  }


  public JsonAtlasAttributeDef isUnique(Boolean isUnique) {
    
    this.isUnique = isUnique;
    return this;
  }

   /**
   * Determines if it unique.
   * @return isUnique
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determines if it unique.")

  public Boolean getIsUnique() {
    return isUnique;
  }


  public void setIsUnique(Boolean isUnique) {
    this.isUnique = isUnique;
  }


  public JsonAtlasAttributeDef name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the attribute.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the attribute.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public JsonAtlasAttributeDef options(Map<String, String> options) {
    
    this.options = options;
    return this;
  }

  public JsonAtlasAttributeDef putOptionsItem(String key, String optionsItem) {
    if (this.options == null) {
      this.options = new HashMap<String, String>();
    }
    this.options.put(key, optionsItem);
    return this;
  }

   /**
   * The options for the attribute.
   * @return options
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The options for the attribute.")

  public Map<String, String> getOptions() {
    return options;
  }


  public void setOptions(Map<String, String> options) {
    this.options = options;
  }


  public JsonAtlasAttributeDef typeName(String typeName) {
    
    this.typeName = typeName;
    return this;
  }

   /**
   * The name of the type.
   * @return typeName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the type.")

  public String getTypeName() {
    return typeName;
  }


  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }


  public JsonAtlasAttributeDef valuesMaxCount(Integer valuesMaxCount) {
    
    this.valuesMaxCount = valuesMaxCount;
    return this;
  }

   /**
   * The maximum count of the values.
   * @return valuesMaxCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum count of the values.")

  public Integer getValuesMaxCount() {
    return valuesMaxCount;
  }


  public void setValuesMaxCount(Integer valuesMaxCount) {
    this.valuesMaxCount = valuesMaxCount;
  }


  public JsonAtlasAttributeDef valuesMinCount(Integer valuesMinCount) {
    
    this.valuesMinCount = valuesMinCount;
    return this;
  }

   /**
   * The minimum count of the values.
   * @return valuesMinCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The minimum count of the values.")

  public Integer getValuesMinCount() {
    return valuesMinCount;
  }


  public void setValuesMinCount(Integer valuesMinCount) {
    this.valuesMinCount = valuesMinCount;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonAtlasAttributeDef jsonAtlasAttributeDef = (JsonAtlasAttributeDef) o;
    return Objects.equals(this.cardinality, jsonAtlasAttributeDef.cardinality) &&
        Objects.equals(this.constraints, jsonAtlasAttributeDef.constraints) &&
        Objects.equals(this.defaultValue, jsonAtlasAttributeDef.defaultValue) &&
        Objects.equals(this.description, jsonAtlasAttributeDef.description) &&
        Objects.equals(this.includeInNotification, jsonAtlasAttributeDef.includeInNotification) &&
        Objects.equals(this.isIndexable, jsonAtlasAttributeDef.isIndexable) &&
        Objects.equals(this.isOptional, jsonAtlasAttributeDef.isOptional) &&
        Objects.equals(this.isUnique, jsonAtlasAttributeDef.isUnique) &&
        Objects.equals(this.name, jsonAtlasAttributeDef.name) &&
        Objects.equals(this.options, jsonAtlasAttributeDef.options) &&
        Objects.equals(this.typeName, jsonAtlasAttributeDef.typeName) &&
        Objects.equals(this.valuesMaxCount, jsonAtlasAttributeDef.valuesMaxCount) &&
        Objects.equals(this.valuesMinCount, jsonAtlasAttributeDef.valuesMinCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardinality, constraints, defaultValue, description, includeInNotification, isIndexable, isOptional, isUnique, name, options, typeName, valuesMaxCount, valuesMinCount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonAtlasAttributeDef {\n");
    sb.append("    cardinality: ").append(toIndentedString(cardinality)).append("\n");
    sb.append("    constraints: ").append(toIndentedString(constraints)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    includeInNotification: ").append(toIndentedString(includeInNotification)).append("\n");
    sb.append("    isIndexable: ").append(toIndentedString(isIndexable)).append("\n");
    sb.append("    isOptional: ").append(toIndentedString(isOptional)).append("\n");
    sb.append("    isUnique: ").append(toIndentedString(isUnique)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("    valuesMaxCount: ").append(toIndentedString(valuesMaxCount)).append("\n");
    sb.append("    valuesMinCount: ").append(toIndentedString(valuesMinCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

